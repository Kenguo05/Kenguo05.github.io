<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java学习笔记-Java流程控制</title>
    <url>/2021/08/24/Java-note-3/</url>
    <content><![CDATA[<h2 id="Scanner-对象"><a href="#Scanner-对象" class="headerlink" title="Scanner 对象"></a>Scanner 对象</h2><p>Java5 在 <code>java.util.Scanner</code> 中提供了 <code>Scanner</code> 类，可以获取用户输入，使用之前要导入这个包</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span></code></pre>

<p>基本语法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//创建一个名叫 s 的 Scanner 对象用于获取输入</span>
<span class="token class-name">Scanner</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 将接收到的输入赋给变量str</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>通过<code>Scanner</code>类的<code>next()</code>与<code>nextLine()</code>方法获取输入的字符串，读取前一般需要用<code>hasNext()</code>与<code>hasNextLine()</code>判断是否还有输入数据</p>
<ul>
<li><p><code>next()</code></p>
<ol>
<li>一定要读取到有效字符才可以结束输入</li>
<li>对输入有效字符之前遇到空白，<code>next()</code>方法会将其自动去掉</li>
<li>只有输入有效字符后才将其后面输入的空白作为分隔符或结束符</li>
<li><strong><code>next()</code>不能得到带有空格的字符串</strong></li>
</ol>
</li>
<li><p><code>nextLine()</code></p>
<ol>
<li>以<code>Enter</code>为结束符，也就是说<code>nextLine()</code>返回的是输入回车之前的字符</li>
<li>可以得到带有空格的字符串</li>
</ol>
</li>
</ul>
<blockquote>
<p>当需要输入整数和小数时，可以使用<code>nextInt()</code>和<code>nextFloat()</code>等方法，其他数据类型依次类推。</p>
</blockquote>
<h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>最基本的结构，最简单的结构，语句从上到下依次执行</p>
<p><strong>是所有算法都会用到的结构</strong></p>
<h2 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h2><h3 id="if-单选择结构"><a href="#if-单选择结构" class="headerlink" title="if 单选择结构"></a>if 单选择结构</h3><p>语法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="if-双选择结构"><a href="#if-双选择结构" class="headerlink" title="if 双选择结构"></a>if 双选择结构</h3><p>语法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="if-多选择结构"><a href="#if-多选择结构" class="headerlink" title="if 多选择结构"></a>if 多选择结构</h3><p>语法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="if-嵌套结构"><a href="#if-嵌套结构" class="headerlink" title="if 嵌套结构"></a>if 嵌套结构</h3><p>语法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 执行语句</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>布尔表达式<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 执行语句</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="switch-选择结构"><a href="#switch-选择结构" class="headerlink" title="switch 选择结构"></a>switch 选择结构</h3><p>语法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">case</span> value<span class="token operator">:</span>
        <span class="token comment">//语句</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>
    <span class="token keyword">case</span> value<span class="token operator">:</span>
        <span class="token comment">//语句</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">//可选</span>
    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token comment">//可选</span>
        <span class="token comment">// 语句</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>自 JavaSE 7 开始支持字符串比较</strong></p>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="while-循环"><a href="#while-循环" class="headerlink" title="while 循环"></a>while 循环</h3><p>结构</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 执行语句</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>当布尔表达式为<code>true</code>是进入循环执行语句</p>
<p><strong>大多数情况需要循环停止下来，需要一个让表达式失效的方式来结束循环</strong></p>
<h3 id="do…while-循环"><a href="#do…while-循环" class="headerlink" title="do…while 循环"></a>do…while 循环</h3><p>结构</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">do</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>布尔表达式<span class="token punctuation">)</span></code></pre>

<p>de…while 循环至少执行一次</p>
<h3 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h3><p>结构</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>初始化<span class="token punctuation">;</span> 布尔表达式<span class="token punctuation">;</span> 更新<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 执行语句</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="增强-for-循环"><a href="#增强-for-循环" class="headerlink" title="增强 for 循环"></a>增强 for 循环</h3><p>主要用于遍历数组，JavaSE 5 引入</p>
<p>结构</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句 <span class="token operator">:</span> 表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//执行语句</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>声明语句：声明新的局部变量，该变量的类型必须和数组元素类型匹配。其作用域限定在循环语句块，其值与此时的数组元素的值相等</p>
<p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法</p>
</blockquote>
<h2 id="break-continue"><a href="#break-continue" class="headerlink" title="break continue"></a>break continue</h2><h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>用于<strong>强制</strong>退出循环，或在<code>switch</code>语句中防止<code>case</code>穿透</p>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>用于终止当次循环，但仍会执行下一次循环</p>
<blockquote>
<p>Java 没有<code>goto</code>，但可以通过<code>label</code>标签和<code>continue</code>&amp;<code>break</code>实现</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-Java基础</title>
    <url>/2021/08/24/Java-note-2/</url>
    <content><![CDATA[<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li><p>单行注释</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 单行注释</span></code></pre></li>
<li><p>多行注释</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/*
多行注释
多行注释
*/</span></code></pre></li>
<li><p>文档注释（JavaDoc）</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 *@Description
 *@Author
 */</span></code></pre></li>
</ul>
<h2 id="标识符与关键字"><a href="#标识符与关键字" class="headerlink" title="标识符与关键字"></a>标识符与关键字</h2><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>Java 语法中自带的单词，如 public，int，package等</p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>类名、变量名以及方法名都被称为标识符，标识符不能以关键字命名</p>
<ul>
<li>标识符以大小写字母、美元符号（$）、下划线（_）开头</li>
<li>首字符后可以使用大小写字母、美元符号、下划线、数字</li>
<li>标识符大小写敏感</li>
<li>不建议使用中文与拼音命名</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul>
<li><p>数值类型</p>
<ul>
<li><p>整数类型</p>
<ul>
<li>byte：占1个字节</li>
<li>short：占2个字节</li>
<li>int：占4个字节</li>
<li>long：占8个字节</li>
</ul>
<blockquote>
<p>二进制 <code>0b</code>，八进制<code>0</code>，十六进制<code>0x</code></p>
</blockquote>
</li>
<li><p>浮点类型</p>
<ul>
<li>float：占4个字节</li>
<li>double：占8个字节</li>
</ul>
<blockquote>
<p>浮点数有误差，最好不要使用浮点数进行比较操作</p>
</blockquote>
</li>
<li><p>字符类型</p>
<ul>
<li>char：占2个字节</li>
</ul>
<blockquote>
<p>unicode编码 占2字节</p>
<p>转义字符：\t \n 等</p>
</blockquote>
</li>
</ul>
</li>
<li><p>boolean类型：占一位，只有 <code>true</code>和<code>false</code>两种取值</p>
</li>
</ul>
<h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ul>
<li>类</li>
<li>接口</li>
<li>数组</li>
</ul>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>byte, short, char -&gt; int -&gt; long -&gt; float -&gt; double</p>
<blockquote>
<p>一般从小到大转换</p>
</blockquote>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><p>eg：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i<span class="token punctuation">;</span></code></pre>

<p>高转低用强制转换，注意内存溢出与精度问题</p>
<h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><p>eg：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> c<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span></code></pre>

<p>低到高用自动转换</p>
<blockquote>
<p>在计算比较大的数字时注意溢出的问题</p>
</blockquote>
<h2 id="变量、常量、作用域"><a href="#变量、常量、作用域" class="headerlink" title="变量、常量、作用域"></a>变量、常量、作用域</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>最基本的存储单元，包括变量名、变量类型和作用域</p>
<ul>
<li>每个变量都有类型，可以是基本类型，也可以是引用类型</li>
<li>变量名为合法的标识符</li>
</ul>
<h3 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h3><p>初始化后不再改变，一般用<code>final</code>+<code>类型</code>+<code>常量名</code>定义</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span></code></pre>

<p>常量名一般用大写字符</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><ul>
<li>类变量：作用域更大</li>
<li>实例变量：从属于对象，有默认值</li>
<li>局部变量：作用于方法内，需要初始化</li>
</ul>
<blockquote>
<p><strong>变量命名规范</strong></p>
<ul>
<li>见名知意</li>
<li>类变量：首字母小写和驼峰原则：monthSalary</li>
<li>局部变量：首字母小写和驼峰原则</li>
<li>常量：大写字母和下划线</li>
<li>类名：首字母大写和驼峰原则：HelloWorld</li>
<li>方法名：首字母小写和驼峰原则：setName</li>
</ul>
</blockquote>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><ul>
<li><p>算术运算符：+ , - , * , / , % , ++ , –</p>
</li>
<li><p>赋值运算符：=</p>
</li>
<li><p>关系运算符：&gt; , &lt; , &gt;= , &lt;= , == , != , instaceof</p>
<blockquote>
<p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false</p>
</blockquote>
</li>
<li><p>逻辑运算符：&amp;&amp;，||， !</p>
</li>
<li><p>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</p>
</li>
<li><p>条件运算符：? : </p>
</li>
<li><p>扩展赋值运算符：+=，-=，*=，/=</p>
</li>
</ul>
<h2 id="包机制"><a href="#包机制" class="headerlink" title="包机制"></a>包机制</h2><p>用于更好的组织类</p>
<p>语法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">pkg1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>pkg2<span class="token punctuation">[</span><span class="token punctuation">.</span>pkg3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 三个包存在包含关系</span></code></pre>

<p>一般用域名倒置作为包名</p>
<p>当使用某个包的成员时，需要导入该包</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">package1</span><span class="token punctuation">[</span><span class="token punctuation">.</span>package2<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">(</span>classname<span class="token operator">|</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// *表示导入包中所有的类</span></code></pre>

<h2 id="JavaDoc"><a href="#JavaDoc" class="headerlink" title="JavaDoc"></a>JavaDoc</h2><ul>
<li>javadoc命令用于生成自己的API文档</li>
<li>参数<ul>
<li>@author 作者</li>
<li>@version 版本</li>
<li>@since jdk版本</li>
<li>@param 参数</li>
<li>@return 返回值情况</li>
<li>@throws 异常抛出情况</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-初识Java</title>
    <url>/2021/08/24/Java-note-1/</url>
    <content><![CDATA[<h2 id="Java-特性与优势"><a href="#Java-特性与优势" class="headerlink" title="Java 特性与优势"></a>Java 特性与优势</h2><ul>
<li>简单性</li>
<li>面向对象</li>
<li>可移植性（<strong>跨平台</strong>）：Write once, run anywhere.</li>
<li>高性能</li>
<li>分布式</li>
<li>动态性：反射机制</li>
<li>多线程</li>
<li>安全性</li>
<li>健壮性</li>
</ul>
<h2 id="Java-三大版本"><a href="#Java-三大版本" class="headerlink" title="Java 三大版本"></a>Java 三大版本</h2><ul>
<li><code>JavaSE</code>：标准版（桌面程序，控制台开发……）</li>
<li><code>JavaME</code>：嵌入式开发（手机，小家电……）</li>
<li><code>JavaEE</code>：企业级开发（web端，服务器开发……）</li>
</ul>
<h2 id="JDK、JRE、JVM-初识"><a href="#JDK、JRE、JVM-初识" class="headerlink" title="JDK、JRE、JVM 初识"></a>JDK、JRE、JVM 初识</h2><ul>
<li><code>JDK</code>：Java Development Kit</li>
<li><code>JRE</code>：Java Runtime Environment</li>
<li><code>JVM</code>：Java Virtual Machine</li>
</ul>
<blockquote>
<p><code>JRE</code> 扩充了一些开发工具后成为<code> JDK</code></p>
<p><strong>JVM</strong> 是 Java 跨平台的核心</p>
</blockquote>
<h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><p><code>HelloWord</code> 的 <code>Java</code>实现</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在命令行窗口中运行命令</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">javac HelloWorld.java
# 在对应目录下运行cmd，将会生成一个.class文件
java HelloWorld
# 这里不用加后缀</code></pre>

<p>运行成功后将打印</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">Hello, World!</code></pre>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-Java方法</title>
    <url>/2021/08/24/Java-note-4/</url>
    <content><![CDATA[<h2 id="什么是方法"><a href="#什么是方法" class="headerlink" title="什么是方法"></a>什么是方法</h2><p>Java 方法是语句集合，它们在一起执行一个功能</p>
<ul>
<li>方法是解决一类问题的步骤的有序组合</li>
<li>方法包含于类或对象中</li>
<li>方法在程序中被创建，在其他地方被引用</li>
</ul>
<blockquote>
<p>设计方法的原则：最好保持方法的原子性，即<strong>一个方法只完成一个功能</strong></p>
</blockquote>
<h2 id="方法的定义与调用"><a href="#方法的定义与调用" class="headerlink" title="方法的定义与调用"></a>方法的定义与调用</h2><h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><p>类似于C语言中的函数</p>
<p><strong>方法包括一个方法头与一个方法体：</strong></p>
<ul>
<li><p>方法头：</p>
<ul>
<li>修饰符：可选，告诉编译器如何调用该方法，定义了该方法的访问类型</li>
<li>返回值类型：方法可能会返回值。返回值类型是方法返回值的数据类型，若方法没有返回值，则返回值类型为<code>void</code></li>
<li>方法名：是方法的实际名称，与参数表共同构成方法签名</li>
<li>参数表：方法被调用时，将值传递给参数，这个值被称为实际参数或变量（实参），而用于接收外界输入的数据被称为形式参数（形参）；参数表指方法的参数类型、顺序和参数个数。方法可以不含任何参数<ul>
<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>
<li>实际参数：调用方法时实际传递给方法的数据</li>
</ul>
</li>
</ul>
</li>
<li><p>方法体：方法体包含具体的执行语句，定义该方法的功能</p>
</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">修饰符 返回值类型 方法名<span class="token punctuation">(</span>参数类型 参数名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//方法头</span>
    <span class="token comment">/*
      方法体
    */</span>
    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>格式：<code>对象名.方法名(实参表)</code></p>
<blockquote>
<p>值传递与引用传递：</p>
<p>Java是值传递的，即调用方法时，将实参的值拷贝给形参，对形参的值进行更改时，实参的值不会发生改变，<strong>注意：这里的“值”是指这个参数的值，它可以是数值，也可以是地址</strong>，因此在考虑调用方法后的值变化问题需要具体分析，可以指针和内存管理角度去理解（C语言还是有用）</p>
</blockquote>
<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>重载就是一个类中，有相同的方法名称，但形参不同的方法</p>
<p>规则：</p>
<ul>
<li>方法名称相同</li>
<li>参数表必须不同（个数不同、或类型不同、或参数排列顺序不同等）</li>
<li>方法的返回类型可以相同也可以不同</li>
<li>仅仅返回类型不同不足以成为方法的重载</li>
</ul>
<h2 id="命令行传参"><a href="#命令行传参" class="headerlink" title="命令行传参"></a>命令行传参</h2><p>与C语言类似，在运行时通过给<code>main</code>方法传递参数来实现相应的功能</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">javac 文件名.java
java 包名.类名 参数
# 注意：运行时一定要回退至根目录下通过包名来找到类</code></pre>

<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>JDK 1.5 开始支持传递同类型可变参数给一个方法</p>
<p>在方法的声明中。在指定参数类型后加上一个省略号（…）</p>
<p>一个方法中只能指定一个可变参数，且必须时方法的最后一个参数</p>
<blockquote>
<p>本质上是给方法传递一个数组实现</p>
</blockquote>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>自己调用自己</p>
<ul>
<li>递归结构<ul>
<li>递归头：即递归终点的到达条件</li>
<li>递归体：调用自身的语句</li>
</ul>
</li>
</ul>
<p><strong>没有递归头将会导致递归工作栈溢出</strong></p>
<p>例如递归实现阶乘</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">fact</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> n <span class="token operator">*</span> <span class="token function">fact</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-数组</title>
    <url>/2021/08/24/Java-note-5/</url>
    <content><![CDATA[<h2 id="数组的声明创建"><a href="#数组的声明创建" class="headerlink" title="数组的声明创建"></a>数组的声明创建</h2><ul>
<li><p>声明</p>
<pre class="language-java" data-language="java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar<span class="token punctuation">;</span> <span class="token comment">//首选</span>
dataType arrayRefVar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//也行</span></code></pre></li>
<li><p>创建</p>
<pre class="language-java" data-language="java"><code class="language-java">arrayRefVar <span class="token operator">=</span> <span class="token keyword">new</span> dataType<span class="token punctuation">[</span>arraySize<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li>
<li><p>也可以</p>
<pre class="language-java" data-language="java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar <span class="token operator">=</span> <span class="token keyword">new</span> dataType<span class="token punctuation">[</span>arraySize<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></li>
</ul>
<blockquote>
<p>数组下标从0开始</p>
</blockquote>
<ul>
<li><p>获取数组长度<code>arrays.length</code></p>
<blockquote>
<p>arrays 为数组名</p>
</blockquote>
</li>
</ul>
<h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><h3 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h3><pre class="language-java" data-language="java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar <span class="token operator">=</span> <span class="token punctuation">&#123;</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">,</span>data3<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<h3 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h3><pre class="language-java" data-language="java"><code class="language-java">dataType<span class="token punctuation">[</span><span class="token punctuation">]</span> arrayRefVar <span class="token operator">=</span> <span class="token keyword">new</span> dataType<span class="token punctuation">[</span>arraySize<span class="token punctuation">]</span><span class="token punctuation">;</span>
arrayRefVar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> data1<span class="token punctuation">;</span>
arrayRefVar<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data2<span class="token punctuation">;</span></code></pre>

<h3 id="默认初始化"><a href="#默认初始化" class="headerlink" title="默认初始化"></a>默认初始化</h3><ul>
<li>数组是引用类型，其元素相当于类的实例变量，因此数组一经分配，其元素也被按照实例变量同样的方式被隐式初始化</li>
</ul>
<h2 id="数组使用"><a href="#数组使用" class="headerlink" title="数组使用"></a>数组使用</h2><ul>
<li><p>for-each 循环</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><p>数组作为参数</p>
<pre class="language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> array <span class="token operator">:</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
<li><p>数组作为返回值</p>
<pre class="language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrays<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arrays<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre></li>
</ul>
<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>可以看作数组的数组</p>
<p>以二维数组为例</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arrays <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre>

<p>获取数组长度只获取当前维度的长度</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrays<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印结果为4</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arrays<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印结果为2</span></code></pre>

<p>结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/arrays.jpg" alt="arrays"></p>
<blockquote>
<p> 三维数组或更高维的类似</p>
</blockquote>
<h2 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h2><p><a href="https://docs.oracle.com/javase/8/docs/api/">Java SE 8 官方API文档</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-异常</title>
    <url>/2021/08/25/Java-note-7/</url>
    <content><![CDATA[<h2 id="Exception-和-Error"><a href="#Exception-和-Error" class="headerlink" title="Exception 和 Error"></a>Exception 和 Error</h2><ul>
<li>检查性异常：比如用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li>
<li>运行时异常：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略</li>
<li>错误：错误不是异常，而是脱离程序员控制的问题。错误在编译中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们是编译也检查不到的</li>
</ul>
<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul>
<li>Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写这所执行的操作无关</li>
<li>Java 虚拟机运行错误（VirtualMachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 <strong>OutOfMenmoryError</strong>。这些异常发生时，JVM 一般会选择终止线程</li>
<li>在 JVM 试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况</li>
</ul>
<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><ul>
<li>在 Exception 分支中有一个重要的子类 RuntimeException（运行时异常）<ul>
<li>ArrayIndexOutOfBoundsException</li>
<li>NullPointerException</li>
<li>ArithmeticException</li>
<li>MissingResourceExecption</li>
<li>ClassNotFoundException</li>
</ul>
</li>
<li>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理</li>
<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常发生</li>
<li>Error 和 Exception 的区别<ul>
<li>Error 通常是灾难性的致命错误，是程序无法控制和处理的，当出现时，JVM 一般会选择终止线程</li>
<li>Exception 通常情况下是可以被程序处理的，并且在程序中应该尽可能的处理</li>
</ul>
</li>
</ul>
<h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><p>异常处理关键字：<code>try</code>, <code>catch</code>, <code>finally</code>, <code>throw</code>, <code>throws</code></p>
<h3 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// try 监控区域</span>
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>想要捕获的异常<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 捕获异常后的执行语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 无论是否捕获到异常都会执行</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>如果要捕获多个异常，要按照异常包含关系从小到大捕获，否则会报错</p>
<p>比如</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// try 监控区域</span>
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 捕获异常后的执行语句</span>
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 这段语句不能与上一段捕获语句交换位置</span>
<span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 无论是否捕获到异常都会执行</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h3><p>假设在一个方法中无法处理异常，可以将其抛出</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//方法将异常抛出于此</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//捕获到异常</span>
            <span class="token comment">//处理异常</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">&#123;</span> <span class="token comment">// 可能出现的异常</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 判断可能发生异常</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//主动将异常抛出</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><p>以下代码自定义了一个异常</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span> <span class="token comment">// 自定义异常需要继承自 Exception 或更高的父类</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> detail<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token keyword">int</span> detail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//构造方法，对 detail 赋值</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>detail <span class="token operator">=</span> detail<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//来自父类Object的方法，将类的信息转换为字符串</span>
        <span class="token keyword">return</span> <span class="token string">"MyException&#123;"</span> <span class="token operator">+</span>  <span class="token comment">//这里相当于把这个异常信息转换成了字符串便于打印</span>
                <span class="token string">"detail="</span> <span class="token operator">+</span> detail <span class="token operator">+</span>
                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<p>下面是测试代码</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//异常抛出于此</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//捕获异常信息 e，也就是 toString 的返回值</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//打印异常信息</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"传入的参数为："</span> <span class="token operator">+</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//这里将判断是否异常</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//异常则 new 一个异常类，将其初始化为a，抛出到上层</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"OK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h2><ul>
<li>处理运行异常时，采用逻辑去合理规避同时辅助<code>try</code>+<code>catch</code>处理</li>
<li>多重<code>catch</code>块后面，可以加一个<code>catch(Exception e)</code>来处理可能会被遗漏的异常</li>
<li>对于不确定的代码，也可以加上<code>try</code>+<code>catch</code>，处理潜在的异常</li>
<li>尽量去处理异常，切记只是简单的调用<code>printStackTrace()</code>去打印输出</li>
<li>具体如何处理异常，需要根据不同的业务需求和异常类型去确定</li>
<li>尽量添加<code>finally</code>语句块去释放占用资源</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
  <entry>
    <title>被SSL搞疯了</title>
    <url>/2021/08/18/SSL-makes-me-crazy-md/</url>
    <content><![CDATA[<p>折腾云服务器真的要把我搞疯了QAQ！！！</p>
<span id="more"></span>

<h2 id="SOS要死了要死了！！"><a href="#SOS要死了要死了！！" class="headerlink" title="SOS要死了要死了！！"></a>SOS要死了要死了！！</h2><p>之前花了大力气搞了个云服务器，把部署环境都装好了，也部署成功了，然后想着给网站整个SSL，结果没整明白，一通瞎搞最后终于在网址栏上看见了那个熟悉的小锁，然后以为这就结束了，结果跑到又拍云整个CDN回来又发现网站无法访问了，不知道发生了什么，有无懂行的帮一下啊QAQ！！</p>
<hr>
<p>自己折腾了半天发现果然还是托管到GitHub上香，直接进行一个摆烂。</p>
<p>还有就是现在我在腾讯云上也注册了一个账号，到时候也玩玩这边的服务器，看看跟阿里那边有啥不同的体验，网站果然还是挂在GitHub上好，访问速度什么的，<del>建议科学上网</del>，心诚则灵（bushi）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/1629272544-13552.jpg" alt="1629272544-13552"></p>
<hr>
<h4 id="不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！"><a href="#不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！" class="headerlink" title="不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！"></a>不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！</h4><p>run了run了。</p>
]]></content>
      <categories>
        <category>牢骚向</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>博客搭建过程与心得</title>
    <url>/2021/08/05/blog-generating-sharing/</url>
    <content><![CDATA[<p>记录自己第一次博客搭建~~</p>
<span id="more"></span>

<h2 id="第一次自己搭建博客"><a href="#第一次自己搭建博客" class="headerlink" title="第一次自己搭建博客"></a>第一次自己搭建博客</h2><p>现在是暑假嘛，反正没啥事干，正好在网上看见不少个人博客搭建教程，就想着自己搭着玩玩，于是便选择了<a href="https://hexo.io/zh-cn/">Hexo</a>框架，看着教程和文档一步一步搭，不过居然比我想象中简单，<del>有手就行</del>，这里就大概讲一讲本人搭建该博客的过程和体会吧。（注意：这不是教程，只是把本人搭建过程记录一下而已，<del>怕我忘掉</del>，具体过程建议百度）</p>
<h3 id="本地环境搭建"><a href="#本地环境搭建" class="headerlink" title="本地环境搭建"></a>本地环境搭建</h3><hr>
<p>这个不多说，先把<a href="https://nodejs.org/en/">Node.js </a>下好安装，在终端里输入<code>node --version</code>检验是否安装成功，好，搞定。这个时候可以使用Node.js带的包管理工具<code>npm</code>安装Hexo工具（国内使用<code>npm</code>速度有点慢，<strong>可以考虑换<code>taobao</code>源</strong>），很简单，一行命令足矣。=￣ω￣=</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-cli -g</code></pre>

<h3 id="远程仓库搭建"><a href="#远程仓库搭建" class="headerlink" title="远程仓库搭建"></a>远程仓库搭建</h3><hr>
<p>这玩意都不用搭建，去<del>知名同性交友网站</del><a href="https://github.com/">GitHub</a>上<code>create</code>就完事了，省时省力又省钱，仓库命名记得设为<code>用户名.github.io</code>，这个就是博客的域名了，自定义域名？懒得注册，懒得备案，先稍稍吧（国内访问GitHub速度不稳定，<strong>嫌慢可以考虑<a href="https://gitee.com/">Gitee</a>试试</strong>）。好了远程也搞定了，现在就只要把本地和远程关联起来部署上去就好了，好耶！！！！\^o^/</p>
<blockquote>
<p>Git与GitHub的使用是基本功，而且这个网上教程一大把，搭个博客也不需要对此理解多深，会用就行(。・∀・)ノ</p>
</blockquote>
<h3 id="本地博客搭建"><a href="#本地博客搭建" class="headerlink" title="本地博客搭建"></a>本地博客搭建</h3><hr>
<p>之前不是在本地安装了Hexo吗，现在利用这个工具，选择一个合适的目录，在终端中输入命令</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">hexo init 你想为你的Hexo工作目录取的名字
cd 你想为你的Hexo工作目录取的名字
npm install
# 我一般写成hexo s比较省事
hexo server</code></pre>

<p>现在博客已经在本地跑起来了，默认通过<code>localhost:4000</code>这个端口访问，一般用于本地预览。</p>
<p>此时的博客使用的是默认的主题，叫<code>landscape</code>（好像是这个名来着），有点太普通了？直接网上搜其他更好康的主题，推荐一波我用的主题<a href="https://github.com/YunYouJun/hexo-theme-yun">Yun</a>（没收广告费，我是真觉得不戳）。把主题安装到<code>Hexo工作目录/themes</code>下，修改<code>Hexo工作目录</code>下的<code>_config.yml</code>配置文件，找到<code>theme</code>项，更改为</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">theme</span><span class="token punctuation">:</span> yun
<span class="token comment"># 记得写所要使用的主题的文件夹名</span></code></pre>

<blockquote>
<p>事实说明，一个好看的主题可以极大的提升博客站长完善与维护博客的心理体验</p>
</blockquote>
<p>如果想要对主题进行更多配置的话建议自行搜索方法或看主题的制作者是否提供相关文档，比如我所用的主题就有<a href="https://yun.yunyoujun.cn/guide/">Yun主题使用指南</a>手把手教你配置。</p>
<p><code>_config.yml</code>中还可以修改许多配置，可以将自己的博客进行各种自定义，建议看<a href="https://hexo.io/zh-cn/docs/">官方文档</a>好好学。</p>
<p>各项配置完成后，现在可以生成将会被展示出来的静态文件了，在终端中输入</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">hexo clean
# g 就是 generate 的缩写
hexo g</code></pre>

<blockquote>
<p>如果注意观察文件夹，会发现，当输入<code>hexo clean</code>命令后，目录下的<code>public</code>子目录会被删除，输入<code>hexo g</code>命令后，该子目录又会重新生成，这是因为该子目录下存放的就是将会在网页上被浏览的静态文件，当对博客进行修改后，先<code>clean</code>掉原本的静态文件，在<code>generate</code>新的静态文件，这样就完成了对博客的更新。</p>
</blockquote>
<p>如果还想在本地预览的话就接着输入</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">hexo s</code></pre>

<p>OK！现在本地博客已经搞定了，开始着手把它部署到远端吧！\(@^0^@)/</p>
<h3 id="将本地文件与远程仓库建立关联"><a href="#将本地文件与远程仓库建立关联" class="headerlink" title="将本地文件与远程仓库建立关联"></a>将本地文件与远程仓库建立关联</h3><hr>
<p>基本的git操作了，直接在工作目录下</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">git init # 此时这个目录就被初始化成了一个Git仓库</code></pre>

<p>然后可以建立一个分支</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">git checkout -b hexo # 表示建立了一个名叫hexo的分支</code></pre>

<p>这个分支我将用于备份博客的源代码文件。（本来没有备份的习惯，但这里参考了<a href="https://www.yunyoujun.cn/share/how-to-build-your-site/">教你如何从零开始搭建一个属于自己的网站 </a>的教程，就也学着做了）</p>
<p>将这个本地的Git仓库与之前在GitHub上搭建的远程仓库建立关联</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;用户名&#x2F;用户名.github.io</code></pre>

<p>安装Hexo的部署插件<code>hexo-deployer-git</code></p>
<pre class="language-sh" data-language="sh"><code class="language-sh">npm install hexo-deployer-git</code></pre>

<p>在<code>_config.yml</code>配置文件中的<code>deployer</code>项中修改</p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">deploy</span><span class="token punctuation">:</span>
  <span class="token key atrule">type</span><span class="token punctuation">:</span> git
  <span class="token key atrule">repo</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/用户名/用户名.github.io.git <span class="token comment"># 远程仓库的网址</span>
  <span class="token key atrule">branch</span><span class="token punctuation">:</span> main <span class="token comment"># 分支名，表示将要部署的分支</span>
  <span class="token key atrule">message</span><span class="token punctuation">:</span> <span class="token comment"># 可选填，对更新部署的说明</span></code></pre>

<p>至此，本地与远程关联建立完成！</p>
<h3 id="部署与备份"><a href="#部署与备份" class="headerlink" title="部署与备份"></a>部署与备份</h3><hr>
<p>部署很简单，之前部署安装了<code>hexo-deployer-git</code>这个插件吗，生成静态文件后直接输入命令</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">hexo d # d 是 deploy 的缩写</code></pre>

<p>完成部署！</p>
<p>然后还可以对网站源文件上传到远端进行备份，就利用之前建立的分支，同样是基本的git命令</p>
<pre class="language-sh" data-language="sh"><code class="language-sh"># git代码提交老三样
git add -A
git commit -m &quot;xxx&quot; # 养成备注说明的好习惯
git push # 第一次推送记得指定默认分支
# git push --set-upstream origin hexo</code></pre>

<p>ohhhhhh！！！现在个人博客已经搭建完毕了！用浏览器访问看看⑧！！ヽ(✿ﾟ▽ﾟ)ノ</p>
<h3 id="个人感受"><a href="#个人感受" class="headerlink" title="个人感受"></a>个人感受</h3><hr>
<p>其实搭建个人博客是受了b站up主<a href="https://space.bilibili.com/384068749/">CodeSheep</a>的某期视频<a href="https://www.bilibili.com/video/BV1Yb411a7ty">手把手教你从0开始搭建自己的个人博客 </a>的影响，就自己搭着看看，一路做下来，只能说很多事情唯一的难点就是 <em>Just do it</em> 了，自己搭建博客之前总觉得这玩意涉及了一堆看不懂的技术栈，我这种又菜又懒的辣鸡肯定搭不出来，结果当自己真正上手做了才发现并没有想象的那么夸张，许多东西都是很基础的命令，比如简单的git命令。真正遇到问题了也大多可以通过自己搜索解决，Hexo官方与我所使用的主题也提供了详细的配置文档供我参考，实际过程中并没有遇到什么无法解决的问题，还学到了不少前端知识，<del>爷真nb</del>。希望以后遇到新事物新技术是也能冷静下来好好研究吧，这里总结一下搭建时的心得经验吧：</p>
<ul>
<li><strong>不要怕，Just do it! 迈出第一步就成功了一半</strong></li>
<li>记得提前搭建好本地环境，比如Node.js，git等工具</li>
<li>搞清楚每一步要在哪一个目录下进行，各种链接与路径要弄清楚</li>
<li>出问题了别紧张，看清楚报错信息，网上搜一般都可以搜到解决办法</li>
<li>搜到解决办法不要看见什么就用什么，多看几个人的回答，找大家都提到的方法成功率更高</li>
<li>不知道下一步怎么做了就看相关文档，文档讲的很详细</li>
</ul>
<hr>
<h3 id="以上，第一篇正经博客"><a href="#以上，第一篇正经博客" class="headerlink" title="以上，第一篇正经博客"></a>以上，第一篇正经博客</h3><p>感谢支持o(*￣▽￣*)o</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>博客搭建</tag>
        <tag>Hexo</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-面向对象</title>
    <url>/2021/08/24/Java-note-6/</url>
    <content><![CDATA[<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>Object-Oriented Programming, OOP</p>
<p><strong>以类的形式组织代码，以对象的形式封装数据</strong></p>
<p>三大特性：</p>
<ul>
<li><strong>封装</strong></li>
<li><strong>继承</strong></li>
<li><strong>多态</strong></li>
</ul>
<h2 id="方法回顾与拓展"><a href="#方法回顾与拓展" class="headerlink" title="方法回顾与拓展"></a>方法回顾与拓展</h2><ul>
<li><p>方法的定义</p>
<ul>
<li>修饰符</li>
<li>返回值类型</li>
<li>方法名</li>
<li>参数表</li>
<li>异常抛出</li>
</ul>
</li>
<li><p>方法的调用</p>
<ul>
<li><p>静态方法：有<code>static</code>修饰符，将与类同时加载</p>
</li>
<li><p>非静态方法：没有<code>static</code>修饰符，在类实例化后才加载</p>
<blockquote>
<p>即需要new一个对象使其实例化后才可以调用</p>
</blockquote>
</li>
<li><p>形参与实参</p>
</li>
<li><p>值传递与引用传递</p>
</li>
<li><p><code>this</code>关键字</p>
</li>
</ul>
</li>
</ul>
<h2 id="类与对象的创建"><a href="#类与对象的创建" class="headerlink" title="类与对象的创建"></a>类与对象的创建</h2><ul>
<li><strong>使用<code>new</code>创建对象</strong></li>
<li>使用<code>new</code>创建对象的时候，除了分配内存空间之外，还会给创建好的对象进行默认初始化以及对类中构造器的调用</li>
</ul>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><ul>
<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且有以下两个特点：<ol>
<li>必须与类名字相同</li>
<li>必须没有返回类型，也不能写<code>void</code></li>
</ol>
</li>
<li>构造器的作用<ul>
<li>使用<code>new</code>关键字，本质上实在调用构造器</li>
<li>构造器用来初始化值</li>
<li>当定义了有参构造器，无参构造器必须显式定义</li>
</ul>
</li>
</ul>
<p>eg：</p>
<p>在文件<code>Student.java</code>中</p>
<pre class="language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    pubilc <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token comment">//这是一个无参构造器</span>
    pubilc <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token comment">//这是一个有参构造器</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>那么在文件<code>Application.java</code>中</p>
<pre class="language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Student</span> <span class="token class-name">Tom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Tom</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里将会打印默认初始值Tom</span>
        <span class="token class-name">Student</span> <span class="token class-name">Alice</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"Alice"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Alice</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这里将会打印传入的参数Alice</span>
        <span class="token comment">// 回忆关于方法的重载相关的知识</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="创建对象的内存分析"><a href="#创建对象的内存分析" class="headerlink" title="创建对象的内存分析"></a>创建对象的内存分析</h2><p>仍然以上文的代码为例，其在内存中的存在形式如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/objects.jpg" alt="objects"></p>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul>
<li><strong>高内聚，低耦合</strong><ul>
<li>高内聚：类的内部数据操作细节自己完成，不允许外界干涉</li>
<li>低耦合：仅暴露少量方法给外部使用</li>
</ul>
</li>
<li>封装<ul>
<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</li>
</ul>
</li>
<li>属性私有，通过get/set对属性进行操作</li>
</ul>
<p>eg</p>
<pre class="language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 使用 private 关键字将数据封装，这些字段将无法从外部访问</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>
    <span class="token comment">// 通过一些 public 方法实现对相应字段的操作</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">// ...</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>封装的意义在于：</p>
<ul>
<li>确保程序的安全，可以规避不合法的数据，提高健壮性</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">pubilc <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">char</span> gender<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>age<span class="token operator">></span><span class="token number">120</span><span class="token operator">||</span>age<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//判断数据是否合法</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">//处理非法数据，保障系统安全</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span> <span class="token comment">//合法数据</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>增加系统的可维护性</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li><p>本质是对某一批类的抽象</p>
</li>
<li><p>使用<code>extends</code>关键字，意为“扩展“，子类为父类的扩展</p>
</li>
<li><p>Java 中只有单继承，没有多继承</p>
<blockquote>
<p>一个子类只能有一个父类，一个父类可以有多个子类</p>
</blockquote>
</li>
</ul>
<p>比如现在定义一个 Person 类</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>再定义一个 Student 类继承它</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// 这个类中将继承父类中所有 public 的属性和方法</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>那么在主方法中可以</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    pubilc <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这是合法的</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<blockquote>
<p>实际上，所有的类都可以通过继承关系追溯到一个 Object 类，因此即便一个类不定义任何方法都可以找到一些默认自带的方法比如 <code>hashCode</code>方法</p>
</blockquote>
<h2 id="super-关键字"><a href="#super-关键字" class="headerlink" title="super 关键字"></a>super 关键字</h2><h3 id="super-关键字的用法"><a href="#super-关键字的用法" class="headerlink" title="super 关键字的用法"></a>super 关键字的用法</h3><p><code>super</code>关键字用于调用父类的数属性和方法</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment">// 调用父类的 name 属性</span>
<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用父类的 print 方法</span>
<span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用父类的构造方法</span></code></pre>

<blockquote>
<p><code>super</code>关键字无法调用被<code>private</code>修饰的属性或方法</p>
</blockquote>
<p>在子类的无参构造器中，默认调用父类无参构造器，且先于子类无参构造器执行</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 该语句隐式存在，若显式写出，须写在子类构造器第一行</span>
        <span class="token comment">// 可以通过 this 关键字调用本类的构造器，但不能与 super 同时显式存在</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类无参构造执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类无参构造执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>当在<code>main</code>方法中<code>new</code>一个<code>Student</code>对象时，将会打印</p>
<pre class="language-sh" data-language="sh"><code class="language-sh">父类无参构造执行
子类无参构造执行</code></pre>

<blockquote>
<p>当父类只有有参构造时，子类若使用无参构造将会报错，但可以在子类的无参构造中的<code>super</code>语句中传入参数。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 父类</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 子类</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 若不写此语句，程序将报错</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
</blockquote>
<h3 id="super-关键字对比-this-关键字"><a href="#super-关键字对比-this-关键字" class="headerlink" title="super 关键字对比 this 关键字"></a>super 关键字对比 this 关键字</h3><ul>
<li>代表的对象不同<ul>
<li><code>this</code>：代表调用者本身这个对象</li>
<li><code>super</code>：代表父类对象的引用</li>
</ul>
</li>
<li>使用前提<ul>
<li><code>this</code>：没有继承关系也可以使用</li>
<li><code>super</code>：必须存在继承关系</li>
</ul>
</li>
<li>构造方法<ul>
<li><code>this()</code>：本类的构造</li>
<li><code>super()</code>：父类的构造</li>
</ul>
</li>
</ul>
<h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>重写：必须要有继承关系，子类可以重写父类的方法</p>
<ol>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大但不能缩小</li>
<li>抛出异常：范围可以缩小但不能扩大</li>
</ol>
<p>重写的意义在于：父类的功能未必满足子类的需求，或超出了子类的需求</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 若为静态方法，则方法的调用只和左边定义的数据类型有关</span>
        <span class="token comment">// 若为非静态方法，则发生了方法的重写</span>
        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 打印 B=>test</span>
        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//父类的引用指向了子类</span>
        a<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//由于方法重写，打印 B=>test</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A=>test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B=>test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>即同一种方法可以根据发送对象的不同而采用多种不同的行为方式</p>
<p>比如说，</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Pet</span> pet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Pet</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 父类的引用指向子类</span>
        <span class="token class-name">Pet</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        pet<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将会打印 shout</span>
        dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将会打印 wof</span>
        cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将会打印 nya</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Pet</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"shout!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>          <span class="token comment">// 重写了 Pet 中的 shout 方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"nya!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Pet</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wof!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>多态存在的条件</p>
<ul>
<li><p>存在继承关系</p>
</li>
<li><p>方法重写</p>
<blockquote>
<p>一些方法不能被重写</p>
<ul>
<li><p>static 方法</p>
</li>
<li><p>final 常量</p>
<blockquote>
<p>被 final 修饰的变量初始化后便不能更改</p>
<p>被 final 修饰的方法不能重写</p>
<p>被 final 修饰的类不能被继承</p>
</blockquote>
</li>
<li><p>private 方法</p>
</li>
</ul>
</blockquote>
</li>
<li><p>父类的引用指向子类</p>
</li>
</ul>
<p>多态的意义：提高了程序的灵活性与可扩展性，比如上例中如果需要添加其他的子类，只需要将新增的类继承自<code>Pet</code>，再将<code>shout</code>方法重写就可以，不需要对原本有的代码进行改动</p>
<h2 id="instanceof-和类型转换"><a href="#instanceof-和类型转换" class="headerlink" title="instanceof 和类型转换"></a>instanceof 和类型转换</h2><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false</p>
<p>看以下代码</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">//考虑类的继承结构</span>
        <span class="token comment">//Object > String</span>
        <span class="token comment">//Object > Person > Teacher</span>
        <span class="token comment">//Object > Person > Student</span>
        <span class="token class-name">Object</span> object <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person <span class="token keyword">instanceof</span> <span class="token class-name">Teacher</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
        <span class="token comment">//System.out.println(person instanceof String); // 编译报错</span>
        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Student</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
        <span class="token comment">//System.out.println(student instanceof Teacher); // 编译报错</span>
        <span class="token comment">//System.out.println(student instanceof String); // 编译报错</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    
<span class="token punctuation">&#125;</span></code></pre>

<p>对于语句<code>X instanceof Y</code>，是否编译通过取决于<code>X</code>引用类型与<code>Y</code>类是否可比，若可比，则编译通过，否则编译报错；而语句的值取决于<code>X</code>所指向的实际类型是否是<code>Y</code>类或其子类，若是，则值为<code>true</code>，否则值为<code>false</code></p>
<h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>与基础类型的转换类似，父类型处于高位，子类型处于低位，如果父类型想调用子类型的方法，可以使用强制转换</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Person</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// obj.run(); //会报错</span>
        <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span> obj<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 或者</span>
        <span class="token comment">// Student student = (Student)obj;</span>
        <span class="token comment">// student.run();</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// run方法是Student拥有的方法，父类中没有这个方法</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>而子类转换为父类，可以自动转换</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        student<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可以直接调用自己的方法</span>
        <span class="token class-name">Person</span> person <span class="token operator">=</span> student<span class="token punctuation">;</span> <span class="token comment">//无需强制转换</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token comment">// run方法是Student拥有的方法，父类中没有这个方法</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"run"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h2><h3 id="静态变量"><a href="#静态变量" class="headerlink" title="静态变量"></a>静态变量</h3><p>当给变量加上<code>static</code>修饰词时，变量成为静态变量，静态变量与类同时加载，即使没有将类实例化成对象，也可以通过类来访问这个变量，因为此时静态变量已经存在于内存中了</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可以直接访问</span>
        <span class="token comment">// System.out.println(Student.score); //不能直接访问</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>当给方法加上<code>static</code>修饰词时，变量成为静态方法，静态方法与类同时加载，其他方法可以直接调用静态方法，而非静态方法需要先将类实例化成对象才能调用</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> score<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 其他方法可以直接调用静态方法</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Student</span><span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//可以直接调用</span>
        <span class="token comment">// 如果在同一个类中，还可以</span>
        <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>在类中可以加入用<code>&#123;&#125;</code>包裹的代码块，这种代码块先于构造器执行</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#123;</span>
        <span class="token comment">// 匿名代码块</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 静态代码块</span>
    <span class="token punctuation">&#125;</span>
        
<span class="token punctuation">&#125;</span></code></pre>

<p>其中静态代码块最先执行且执行一次，然后执行匿名代码块，最后执行构造器</p>
<p>可以利用这种特性对数据进行初始化</p>
<h3 id="静态导入包"><a href="#静态导入包" class="headerlink" title="静态导入包"></a>静态导入包</h3><p>通过静态导入包可以在当前类中直接使用导入包中的方法或属性</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">pkg1<span class="token punctuation">.</span>pkg2<span class="token punctuation">.</span>pkg3<span class="token punctuation">.</span>classname<span class="token punctuation">.</span>methodname</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">pkg1<span class="token punctuation">.</span>pkg2<span class="token punctuation">.</span>pkg3<span class="token punctuation">.</span>classname<span class="token punctuation">.</span>fieldname</span><span class="token punctuation">;</span></code></pre>

<h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><p>通过<code>abstract</code>修饰过的类称为抽象类</p>
<ul>
<li>抽象类不能<code>new</code>，只能通过子类实现它</li>
<li>抽象类中可以写普通方法</li>
<li>抽象方法只能存在于抽象类中</li>
<li>抽象方法的实现只能通过子类重写</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Action</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这是一个抽象方法</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token keyword">do</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 方法体</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>接口的本质是契约</strong></p>
<p>定义接口的关键字是<code>interface</code></p>
<p>定义一个接口</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//接口中的方法只有方法名，且默认为 public abstract</span>
    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>接口需要有实现类，通过关键字<code>implements</code>继承</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 在实现类中重写接口中的方法</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>接口是多继承的，一个类可以实现多个接口</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TimeService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 继承了多个接口</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">,</span><span class="token class-name">TimeService</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>接口中也可以定义属性</p>
<p>所有属性默认为<code>public static final</code></p>
<p>接口的特点：</p>
<ul>
<li>约束</li>
<li>定义一些方法，让不同的人实现</li>
<li>接口不能被实例化，接口中没有构造方法</li>
<li><code>implements</code>可以实现多个接口</li>
</ul>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>内部类就是在一个类的内部再定义一个类</p>
<ul>
<li>成员内部类</li>
<li>静态内部类</li>
<li>局部内部类</li>
<li>匿名内部类</li>
</ul>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">in</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> id<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>可以通过外部类实例化内部类</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">Outer</span> outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Outer<span class="token punctuation">.</span>Inner</span> inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 通过内部类获取外部类的私有属性/方法</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> inner<span class="token punctuation">.</span>getId<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><p>用关键字<code>static</code>修饰的内部类，只能获取外部类的静态变量/方法</p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>没有名字的初始化类，不用将实例保存到变量中</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这是一个匿名内部类</span>
        <span class="token class-name">UserService</span> userservice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// 将返回一个UserService对象</span>
          <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
              
          <span class="token punctuation">&#125;</span>  
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 这也是一个匿名内部类，可以用来实现接口</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name">Apple</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">interface</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>定义在方法中的类，类似于局部变量</p>
]]></content>
      <categories>
        <category>学习笔记</category>
        <category>Java笔记</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>学习</tag>
      </tags>
  </entry>
</search>
