{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"18541ba547928c5772e228f9aad74d6be241ac1d","modified":1629294426492},{"_id":"source/_posts/Java-note-1.md","hash":"4e8b5496e43171a84f0e622000e4cb758811172a","modified":1629793560435},{"_id":"source/_posts/Java-note-2.md","hash":"56cdc19b89ec6b0cf3ca2731ac45fbf595ffe07d","modified":1629906903887},{"_id":"source/_posts/Java-note-3.md","hash":"bba4eb9fd843eac43e6a6594f6217ee953f67d8b","modified":1629793575761},{"_id":"source/_posts/Java-note-4.md","hash":"8eef901fef4baa101718a67ae1a8d67f0313ed15","modified":1629799478455},{"_id":"source/_posts/Java-note-5.md","hash":"b6e65e42a6ec76e8119913e92e216281da04475b","modified":1629807541812},{"_id":"source/_posts/Java-note-6.md","hash":"67cf83c6f33dc036d248e4782209a3aa69876fdb","modified":1629889074109},{"_id":"source/_posts/Java-note-7.md","hash":"ab119910970f7c9eda6121c08f94955dd85218bb","modified":1629899043076},{"_id":"source/_posts/SSL-makes-me-crazy-md.md","hash":"10ded9d1533eb6af8bb638da18497d2a2fdd217f","modified":1629556288438},{"_id":"source/_posts/blog-generating-sharing.md","hash":"114b84b07e52260ec27a926ea7fa6eab419d7e5a","modified":1629556278552},{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":499162500000},{"_id":"source/_posts/My-first-blog.md","hash":"e9d820eef36887a9ff5af60a1f377488d54ca0dc","modified":1627572168054},{"_id":"source/categories/index.md","hash":"45b82a95ec0de10ab5b30b351307dbaf0de1033c","modified":1627568345396},{"_id":"source/tags/index.md","hash":"740a8380da5b7c8191dedf5af1555497a8cc51cb","modified":1627567816626},{"_id":"source/about/index.md","hash":"f82db30c19e1df250a0795f3202c4a264d7bbd6a","modified":1628145730053},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1585668906000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1585668906000},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1585668906000},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1585668906000},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1585668906000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1585668906000},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1585668906000},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1585668906000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1585668906000},{"_id":"themes/next/_config.yml","hash":"0442895ffaa5af2821ecc00a0925ed8e522bc3aa","modified":1630083101563},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1585668906000},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1585668906000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1585668906000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1585668906000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1585668906000},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1585668906000},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1585668906000},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1585668906000},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1585668906000},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1585668906000},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1585668906000},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1585668906000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1585668906000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1585668906000},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1585668906000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1585668906000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1585668906000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1585668906000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1585668906000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1585668906000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1585668906000},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1585668906000},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1585668906000},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1585668906000},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1585668906000},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585668906000},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1585668906000},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1585668906000},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1585668906000},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1585668906000},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1585668906000},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1585668906000},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1585668906000},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1585668906000},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1585668906000},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1585668906000},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1585668906000},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1585668906000},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1585668906000},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1585668906000},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1585668906000},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1585668906000},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1585668906000},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1585668906000},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1585668906000},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1585668906000},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1585668906000},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1585668906000},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1585668906000},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1585668906000},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1585668906000},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1585668906000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1585668906000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1585668906000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1585668906000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"c4ec5822d644ddcedf2401837e6f6e6d3b63fbcd","modified":1585668906000},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1585668906000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1585668906000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1585668906000},{"_id":"themes/next/layout/_macro/post.swig","hash":"71e4dc5a56cbc403d9785526f7719d824f4c8911","modified":1585668906000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1585668906000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1585668906000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"af2d688f688923080aaf8f20be33cfda629797ea","modified":1585668906000},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1585668906000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1585668906000},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1585668906000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1585668906000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1585668906000},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1585668906000},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1585668906000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1585668906000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1585668906000},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1585668906000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1585668906000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1585668906000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"22d77bd511fc7c1bbd12339d65004ed5bfb0713c","modified":1585668906000},{"_id":"themes/next/scripts/events/index.js","hash":"bf5e93f9209d111a014a7a6a17e86c05be552d13","modified":1585668906000},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1585668906000},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1585668906000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1585668906000},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1585668906000},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1585668906000},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1585668906000},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1585668906000},{"_id":"themes/next/source/css/_colors.styl","hash":"19c836f367977fb712b9868f3281ff5d757a8d5c","modified":1585668906000},{"_id":"themes/next/scripts/filters/post.js","hash":"d86849559ae54a4098aef4e2ab9dc8f99a1d186c","modified":1585668906000},{"_id":"themes/next/source/css/_mixins.styl","hash":"b79ff3debd5709397b122292fc7e551ae9d40782","modified":1585668906000},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1585668906000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585668906000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585668906000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585668906000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585668906000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585668906000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585668906000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585668906000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1585668906000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1585668906000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585668906000},{"_id":"themes/next/scripts/tags/button.js","hash":"946dd7beede408d1f090d5e9774d74763828b97c","modified":1585668906000},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1585668906000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"0f133f27b61e8351cfd0959ba8a1b8551a9a8cc6","modified":1585668906000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1585668906000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1585668906000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1585668906000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1585668906000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1585668906000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1585668906000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1585668906000},{"_id":"themes/next/source/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1585668906000},{"_id":"themes/next/source/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1585668906000},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1585668906000},{"_id":"themes/next/source/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1585668906000},{"_id":"themes/next/source/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1585668906000},{"_id":"themes/next/source/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1585668906000},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"12aeb9ee0d1d49d347f82a91e6bab568e1b59037","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"958e097790551c9520426a1233add03515034f35","modified":1585668906000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1585668906000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1585668906000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"1ea12d4b9490d9065ebf1b8739b90ce5defd6398","modified":1585668906000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1585668906000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1585668906000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1585668906000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1585668906000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"12cd9adb0c33adc484201f9e8a4e64ccf3011bae","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"94d54b0c65d504f772af1e62424952e092b6c21d","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1585668906000},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1585668906000},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"ec20ff43845723e0ac2a245047c7a7e5aead6e88","modified":1585668906000},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1585668906000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1585668906000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1585668906000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1585668906000},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1585668906000},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1585668906000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1585668906000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1585668906000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1585668906000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1585668906000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1585668906000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1585668906000},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1585668906000},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1585668906000},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1585668906000},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1585668906000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1585668906000},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"1f20213af8da3127701e6bb9da995e5c91be2051","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"19cbd24880d0fbbd4d5698cd54da598f03b942da","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1585668906000},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6a72b5928cdab9526a288177991e4b2aedd028cf","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"799fdf4f258a51d45d1e2b02fb59b337e46b5b3c","modified":1585668906000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"dae390efcb5da9c021ad7f25fe2d39ff36938cc6","modified":1585668906000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1585668906000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1585668906000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1585668906000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585668906000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"220da37051ed5dac9cf7bd126451f6aba4f94d21","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"b3bea92eef0e1fe2e7e294dac2184d16b5b8d666","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"5e644b1303ab6dcd1b65ee0fd6b91309b04ce64d","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ccb71d732b12acd02ac26ed6bbda4861d027857d","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"82025c3ad7af12e532e2e81be98deb0a74ff23ac","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e4f958677a75de87ee1caf7e22ba46a0602f22dd","modified":1585668906000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c1daeb60c23945f745703ac2c3f4bf99d0ea3d95","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"89f76380091f1be49936c69bac02e984dae5ff87","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"eca4d80dd0df1c3b1bc06bd39e6a4bd6c56198df","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"66211794e4ed47e779ca81150cef588e0b4f2fc5","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"796eb941ba0ca03fd5ca6d15a1f6a56afd9aa174","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1585668906000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"555762730f1f31451113e8fdc84ec438ea738d90","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"a237c290e8934d1a8cbbf22b3f30503d9663021d","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1585668906000},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"7213e3d0ad7c95717ecd4e701d6ee9248ef2bf9f","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"9b3cce30c58e57b59e45d3f668a71a4129d3a8e4","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1585668906000},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585668906000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585668906000},{"_id":"themes/next/source/images/avatar.png","hash":"a50d4dcc98defd8b16dea2dbff59047193318d54","modified":1627451921732},{"_id":"public/search.json","hash":"f5474b2649a9d84df485ae0570d7c102ec762749","modified":1630083121154},{"_id":"public/atom.xml","hash":"ab2bb650b48ca2673497fcffce400a1fffc2b200","modified":1630083121154},{"_id":"public/categories/index.html","hash":"a173bca26fedb6b3b92a845a7ee41cacdb150f89","modified":1630083121154},{"_id":"public/about/index.html","hash":"7f196935e7eb82e2be118092e8adee40b66c2d5e","modified":1630083121154},{"_id":"public/tags/index.html","hash":"b7e059afff829d4422b83cf89af5c1c50c5315f6","modified":1630083121154},{"_id":"public/archives/page/2/index.html","hash":"be409bd02a81c489136fc500738b7cb22691ef13","modified":1630083121154},{"_id":"public/archives/2021/page/2/index.html","hash":"3f2c012c908d29022b44f1573e0ab531299b2d9e","modified":1630083121154},{"_id":"public/archives/2021/07/index.html","hash":"8da5d893878a91acb1481af84d177120dd82ce8e","modified":1630083121154},{"_id":"public/categories/学习笔记/index.html","hash":"e50cb70bbc8468ef0c9249b56f41391bad051b7d","modified":1630083121154},{"_id":"public/categories/学习笔记/Java笔记/index.html","hash":"412cc50c833c64437083aa54701734317cb56ea5","modified":1630083121154},{"_id":"public/categories/牢骚向/index.html","hash":"8f0414cbdb10c41e7575534cf0bc3fd91bb5285b","modified":1630083121154},{"_id":"public/categories/技术向/index.html","hash":"5445afc168d41ec4c079e58e08502e8edc241f4c","modified":1630083121154},{"_id":"public/categories/没有内容的测试文章/index.html","hash":"6829de60746604ebbadd8e787c0b99df3ee0b194","modified":1630083121154},{"_id":"public/page/2/index.html","hash":"6a72ca255aed46ca17a86f6de1c8779e21fa0dc9","modified":1630083121154},{"_id":"public/tags/Java/index.html","hash":"4494b4b4fa1cb9d75e039a6d2851a8da486cc44c","modified":1630083121154},{"_id":"public/tags/学习/index.html","hash":"4e1a791d303cd6737314f2ac9533ef0ae9cba5ea","modified":1630083121154},{"_id":"public/tags/博客搭建/index.html","hash":"8c82d2abf9c60897eb82d14a82e05d6f7ecf3635","modified":1630083121154},{"_id":"public/tags/SSL/index.html","hash":"34a17e89d29caa4ffbb7be6015113da08cd5c5f6","modified":1630083121154},{"_id":"public/tags/Hexo/index.html","hash":"009847b48e3656a871c761563f17b42f30c513d3","modified":1630083121154},{"_id":"public/2021/08/25/Java-note-7/index.html","hash":"0ac0e20a6d632ff62884e5f21fd34221081bf874","modified":1630083121154},{"_id":"public/2021/08/24/Java-note-6/index.html","hash":"e5b6103e807f10d8ce1085cc21b44653513bfe38","modified":1630083121154},{"_id":"public/2021/08/24/Java-note-5/index.html","hash":"0df721b3f00f487cbc20b3fc8318bbaa021ad597","modified":1630083121154},{"_id":"public/2021/08/24/Java-note-4/index.html","hash":"838f89be90094b354fc8c6b8dfc548e0f26d72a8","modified":1630083121154},{"_id":"public/2021/08/24/Java-note-3/index.html","hash":"f9c372f4569b9d42180c26c111f893108432fc8a","modified":1630083121154},{"_id":"public/2021/08/24/Java-note-2/index.html","hash":"9df84dce4a6db45e9dc9609341a9012ac0b029f6","modified":1630083121154},{"_id":"public/2021/08/24/Java-note-1/index.html","hash":"f2219437f2e76e673099651a864da8d65583d831","modified":1630083121154},{"_id":"public/2021/08/18/SSL-makes-me-crazy-md/index.html","hash":"e72c3517742b53791dca2d22070f6169faf6999b","modified":1630083121154},{"_id":"public/2021/08/05/blog-generating-sharing/index.html","hash":"8e0208e0ece896034d36980393b03a6d445b6291","modified":1630083121154},{"_id":"public/2021/07/28/My-first-blog/index.html","hash":"56d284b5e6727734dd7c580d2c7eb0927a62fc28","modified":1630083121154},{"_id":"public/2021/07/28/hello-world/index.html","hash":"c99a06ff52a86d2b322039551ac4fb0b33c23799","modified":1630083121154},{"_id":"public/archives/index.html","hash":"588fc0557dad1ccce936faf629263be1e4437dbf","modified":1630083121154},{"_id":"public/archives/2021/index.html","hash":"15694d25e92e7424738e9a48332a5ef4614ac825","modified":1630083121154},{"_id":"public/archives/2021/08/index.html","hash":"6477f56a1b3472b3ccc6bc9cd7ef1db64456b2dc","modified":1630083121154},{"_id":"public/index.html","hash":"694605adcb65624f00e5c1fda936f2e1dde0099a","modified":1630083121154},{"_id":"public/tags/分享/index.html","hash":"3ccf0a868831997b0ae3ea17a161d01802217502","modified":1630083121154},{"_id":"public/tags/博客功能测试/index.html","hash":"6916cbec80a424b18ed23c8ccb825fd9bd11223d","modified":1630083121154},{"_id":"public/CNAME","hash":"18541ba547928c5772e228f9aad74d6be241ac1d","modified":1630083121154},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1630083121154},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1630083121154},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1630083121154},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1630083121154},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1630083121154},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1630083121154},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1630083121154},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1630083121154},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1630083121154},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1630083121154},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1630083121154},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1630083121154},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1630083121154},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1630083121154},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1630083121154},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1630083121154},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1630083121154},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1630083121154},{"_id":"public/css/main.css","hash":"152bd7981bbf451a4431b824a7b646987c18fef7","modified":1630083121154},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1630083121154},{"_id":"public/js/algolia-search.js","hash":"23cc3c013185eb97ef347c3b4c92d928f2f3398f","modified":1630083121154},{"_id":"public/js/bookmark.js","hash":"a00945ff886e9f6f835731cdaf29a3a3727c8877","modified":1630083121154},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1630083121154},{"_id":"public/js/next-boot.js","hash":"a22eeb6048ddd6b9224c8a671cbcfa303a2f7a1a","modified":1630083121154},{"_id":"public/js/local-search.js","hash":"b42bd1c883ce91db8632d96e0f0e062cb6b73adc","modified":1630083121154},{"_id":"public/js/utils.js","hash":"95c5d37aa06521675afcf8619cfc5dbba3d2e18a","modified":1630083121154},{"_id":"public/js/schemes/muse.js","hash":"47c4f60eb7f7dc3303e84914b611dc34827069e1","modified":1630083121154},{"_id":"public/js/schemes/pisces.js","hash":"3d9d3c14b77044d66be1898a9a934696e9127c82","modified":1630083121154},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1630083121154},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1630083121154},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1630083121154},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1630083121154},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1630083121154},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1630083121154},{"_id":"public/images/avatar.png","hash":"a50d4dcc98defd8b16dea2dbff59047193318d54","modified":1630083121154}],"Category":[{"name":"学习笔记","_id":"cksuleinq0004kwvj7jxtcqa7"},{"name":"Java笔记","parent":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleinz000kkwvj4oew408t"},{"name":"牢骚向","_id":"cksuleio40019kwvjbi382p5c"},{"name":"技术向","_id":"cksuleio6001jkwvjequg1h6y"},{"name":"没有内容的测试文章","_id":"cksuleio7001pkwvjdjq830uf"}],"Data":[],"Page":[{"date":"2021-07-29T14:17:45.000Z","comments":0,"type":"categories","_content":"\n","source":"categories/index.md","raw":"---\n\ndate: 2021-07-29 22:17:45\n\ncomments: false\n\ntype: categories\n\n---\n\n","updated":"2021-07-29T14:19:05.396Z","path":"categories/index.html","title":"","layout":"page","_id":"cksuleinj0000kwvj1q8mc04s","content":"","site":{"data":{}},"excerpt":"","more":""},{"date":"2021-07-29T14:01:52.000Z","comments":0,"type":"tags","_content":"\n","source":"tags/index.md","raw":"---\n\ndate: 2021-07-29 22:01:52\n\ncomments: false\n\ntype: tags\n\n---\n\n","updated":"2021-07-29T14:10:16.626Z","path":"tags/index.html","title":"","layout":"page","_id":"cksuleino0002kwvjc62s1ltt","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About Me","date":"2021-07-29T14:38:47.000Z","reward":true,"_content":"\n## 关于我本人\n\n> 生于2002-05-05，性别男，湖南长沙人，本科在华中科技大学读计算机科学与技术，研究生不知道，可能考不上（恼\n>\n> 遵纪守法好青年，不抽烟不喝酒，除了脑子不太好使其他都还行\n\n- 爱好：ACGN，插画，~~摸鱼~~，数码。\n- 擅长的事：败家。\n- 不擅长的事：学习，跟别人打交道（尤其是女生）。\n- 喜欢的东西：纸片人，快乐水，电子产品（属于是喜欢但不是很懂），开源项目。\n- 不喜欢的东西：运动（老肥宅了），酒，烟。\n- 单推：笑死，是dd。\n- 目标：前端工程师/全栈工程师/游戏制作人/动画制作人\n- 人生理想：在一线城市能买房（想peach），35岁不退休，不孤独终老。\n\n***\n\n## 联系我\n\n侧边栏中有我的一些社交方式，然而本人社恐，所以都不咋看，实在想联系我建议邮箱（这个侧边栏也有吧大概）。\n\n> 还有就是如果各位对本站有什么建议都可以联系我提出来，我看的懂就找时间改（咕咕咕\n\n***\n\n哦还有一件事，各位如果是刀客塔的话可以加我：官服 OceanCat#3909，~~欢迎互赠线索七~~\n\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2021-07-29 22:38:47\nreward: true\n---\n\n## 关于我本人\n\n> 生于2002-05-05，性别男，湖南长沙人，本科在华中科技大学读计算机科学与技术，研究生不知道，可能考不上（恼\n>\n> 遵纪守法好青年，不抽烟不喝酒，除了脑子不太好使其他都还行\n\n- 爱好：ACGN，插画，~~摸鱼~~，数码。\n- 擅长的事：败家。\n- 不擅长的事：学习，跟别人打交道（尤其是女生）。\n- 喜欢的东西：纸片人，快乐水，电子产品（属于是喜欢但不是很懂），开源项目。\n- 不喜欢的东西：运动（老肥宅了），酒，烟。\n- 单推：笑死，是dd。\n- 目标：前端工程师/全栈工程师/游戏制作人/动画制作人\n- 人生理想：在一线城市能买房（想peach），35岁不退休，不孤独终老。\n\n***\n\n## 联系我\n\n侧边栏中有我的一些社交方式，然而本人社恐，所以都不咋看，实在想联系我建议邮箱（这个侧边栏也有吧大概）。\n\n> 还有就是如果各位对本站有什么建议都可以联系我提出来，我看的懂就找时间改（咕咕咕\n\n***\n\n哦还有一件事，各位如果是刀客塔的话可以加我：官服 OceanCat#3909，~~欢迎互赠线索七~~\n\n","updated":"2021-08-05T06:42:10.053Z","path":"about/index.html","comments":1,"layout":"page","_id":"cksuleinr0006kwvjd575hg7o","content":"<h2 id=\"关于我本人\"><a href=\"#关于我本人\" class=\"headerlink\" title=\"关于我本人\"></a>关于我本人</h2><blockquote>\n<p>生于2002-05-05，性别男，湖南长沙人，本科在华中科技大学读计算机科学与技术，研究生不知道，可能考不上（恼</p>\n<p>遵纪守法好青年，不抽烟不喝酒，除了脑子不太好使其他都还行</p>\n</blockquote>\n<ul>\n<li>爱好：ACGN，插画，<del>摸鱼</del>，数码。</li>\n<li>擅长的事：败家。</li>\n<li>不擅长的事：学习，跟别人打交道（尤其是女生）。</li>\n<li>喜欢的东西：纸片人，快乐水，电子产品（属于是喜欢但不是很懂），开源项目。</li>\n<li>不喜欢的东西：运动（老肥宅了），酒，烟。</li>\n<li>单推：笑死，是dd。</li>\n<li>目标：前端工程师/全栈工程师/游戏制作人/动画制作人</li>\n<li>人生理想：在一线城市能买房（想peach），35岁不退休，不孤独终老。</li>\n</ul>\n<hr>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><p>侧边栏中有我的一些社交方式，然而本人社恐，所以都不咋看，实在想联系我建议邮箱（这个侧边栏也有吧大概）。</p>\n<blockquote>\n<p>还有就是如果各位对本站有什么建议都可以联系我提出来，我看的懂就找时间改（咕咕咕</p>\n</blockquote>\n<hr>\n<p>哦还有一件事，各位如果是刀客塔的话可以加我：官服 OceanCat#3909，<del>欢迎互赠线索七</del></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我本人\"><a href=\"#关于我本人\" class=\"headerlink\" title=\"关于我本人\"></a>关于我本人</h2><blockquote>\n<p>生于2002-05-05，性别男，湖南长沙人，本科在华中科技大学读计算机科学与技术，研究生不知道，可能考不上（恼</p>\n<p>遵纪守法好青年，不抽烟不喝酒，除了脑子不太好使其他都还行</p>\n</blockquote>\n<ul>\n<li>爱好：ACGN，插画，<del>摸鱼</del>，数码。</li>\n<li>擅长的事：败家。</li>\n<li>不擅长的事：学习，跟别人打交道（尤其是女生）。</li>\n<li>喜欢的东西：纸片人，快乐水，电子产品（属于是喜欢但不是很懂），开源项目。</li>\n<li>不喜欢的东西：运动（老肥宅了），酒，烟。</li>\n<li>单推：笑死，是dd。</li>\n<li>目标：前端工程师/全栈工程师/游戏制作人/动画制作人</li>\n<li>人生理想：在一线城市能买房（想peach），35岁不退休，不孤独终老。</li>\n</ul>\n<hr>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><p>侧边栏中有我的一些社交方式，然而本人社恐，所以都不咋看，实在想联系我建议邮箱（这个侧边栏也有吧大概）。</p>\n<blockquote>\n<p>还有就是如果各位对本站有什么建议都可以联系我提出来，我看的懂就找时间改（咕咕咕</p>\n</blockquote>\n<hr>\n<p>哦还有一件事，各位如果是刀客塔的话可以加我：官服 OceanCat#3909，<del>欢迎互赠线索七</del></p>\n"}],"Post":[{"title":"Java学习笔记-初识Java","update":"2021-08-23T17:07:08.000Z","_content":"\n## Java 特性与优势\n\n+ 简单性\n+ 面向对象\n+ 可移植性（**跨平台**）：Write once, run anywhere.\n+ 高性能\n+ 分布式\n+ 动态性：反射机制\n+ 多线程\n+ 安全性\n+ 健壮性\n\n## Java 三大版本\n\n+ `JavaSE`：标准版（桌面程序，控制台开发......）\n+ `JavaME`：嵌入式开发（手机，小家电......）\n+ `JavaEE`：企业级开发（web端，服务器开发......）\n\n## JDK、JRE、JVM 初识\n\n+ `JDK`：Java Development Kit\n+ `JRE`：Java Runtime Environment\n+ `JVM`：Java Virtual Machine\n\n> `JRE` 扩充了一些开发工具后成为` JDK`\n>\n> **JVM** 是 Java 跨平台的核心\n\n## Hello World \n\n`HelloWord` 的 `Java`实现\n\n```java\npublic class HelloWorld{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}\n```\n\n在命令行窗口中运行命令\n\n```sh\njavac HelloWorld.java\n# 在对应目录下运行cmd，将会生成一个.class文件\njava HelloWorld\n# 这里不用加后缀\n```\n\n运行成功后将打印\n\n```sh\nHello, World!\n```\n\n","source":"_posts/Java-note-1.md","raw":"---\ntitle: Java学习笔记-初识Java\nupdate: 2021-08-24 01:07:08\ntags: \n  - Java\n  - 学习\ncategories:\n  - 学习笔记\n  - Java笔记\n---\n\n## Java 特性与优势\n\n+ 简单性\n+ 面向对象\n+ 可移植性（**跨平台**）：Write once, run anywhere.\n+ 高性能\n+ 分布式\n+ 动态性：反射机制\n+ 多线程\n+ 安全性\n+ 健壮性\n\n## Java 三大版本\n\n+ `JavaSE`：标准版（桌面程序，控制台开发......）\n+ `JavaME`：嵌入式开发（手机，小家电......）\n+ `JavaEE`：企业级开发（web端，服务器开发......）\n\n## JDK、JRE、JVM 初识\n\n+ `JDK`：Java Development Kit\n+ `JRE`：Java Runtime Environment\n+ `JVM`：Java Virtual Machine\n\n> `JRE` 扩充了一些开发工具后成为` JDK`\n>\n> **JVM** 是 Java 跨平台的核心\n\n## Hello World \n\n`HelloWord` 的 `Java`实现\n\n```java\npublic class HelloWorld{\n\tpublic static void main(String[] args){\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}\n```\n\n在命令行窗口中运行命令\n\n```sh\njavac HelloWorld.java\n# 在对应目录下运行cmd，将会生成一个.class文件\njava HelloWorld\n# 这里不用加后缀\n```\n\n运行成功后将打印\n\n```sh\nHello, World!\n```\n\n","slug":"Java-note-1","published":1,"date":"2021-08-23T17:05:41.824Z","updated":"2021-08-24T08:26:00.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleinm0001kwvjfeme67pw","content":"<h2 id=\"Java-特性与优势\"><a href=\"#Java-特性与优势\" class=\"headerlink\" title=\"Java 特性与优势\"></a>Java 特性与优势</h2><ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性（<strong>跨平台</strong>）：Write once, run anywhere.</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性：反射机制</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n</ul>\n<h2 id=\"Java-三大版本\"><a href=\"#Java-三大版本\" class=\"headerlink\" title=\"Java 三大版本\"></a>Java 三大版本</h2><ul>\n<li><code>JavaSE</code>：标准版（桌面程序，控制台开发……）</li>\n<li><code>JavaME</code>：嵌入式开发（手机，小家电……）</li>\n<li><code>JavaEE</code>：企业级开发（web端，服务器开发……）</li>\n</ul>\n<h2 id=\"JDK、JRE、JVM-初识\"><a href=\"#JDK、JRE、JVM-初识\" class=\"headerlink\" title=\"JDK、JRE、JVM 初识\"></a>JDK、JRE、JVM 初识</h2><ul>\n<li><code>JDK</code>：Java Development Kit</li>\n<li><code>JRE</code>：Java Runtime Environment</li>\n<li><code>JVM</code>：Java Virtual Machine</li>\n</ul>\n<blockquote>\n<p><code>JRE</code> 扩充了一些开发工具后成为<code> JDK</code></p>\n<p><strong>JVM</strong> 是 Java 跨平台的核心</p>\n</blockquote>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p><code>HelloWord</code> 的 <code>Java</code>实现</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>在命令行窗口中运行命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">javac HelloWorld.java\n# 在对应目录下运行cmd，将会生成一个.class文件\njava HelloWorld\n# 这里不用加后缀</code></pre>\n\n<p>运行成功后将打印</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">Hello, World!</code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Java-特性与优势\"><a href=\"#Java-特性与优势\" class=\"headerlink\" title=\"Java 特性与优势\"></a>Java 特性与优势</h2><ul>\n<li>简单性</li>\n<li>面向对象</li>\n<li>可移植性（<strong>跨平台</strong>）：Write once, run anywhere.</li>\n<li>高性能</li>\n<li>分布式</li>\n<li>动态性：反射机制</li>\n<li>多线程</li>\n<li>安全性</li>\n<li>健壮性</li>\n</ul>\n<h2 id=\"Java-三大版本\"><a href=\"#Java-三大版本\" class=\"headerlink\" title=\"Java 三大版本\"></a>Java 三大版本</h2><ul>\n<li><code>JavaSE</code>：标准版（桌面程序，控制台开发……）</li>\n<li><code>JavaME</code>：嵌入式开发（手机，小家电……）</li>\n<li><code>JavaEE</code>：企业级开发（web端，服务器开发……）</li>\n</ul>\n<h2 id=\"JDK、JRE、JVM-初识\"><a href=\"#JDK、JRE、JVM-初识\" class=\"headerlink\" title=\"JDK、JRE、JVM 初识\"></a>JDK、JRE、JVM 初识</h2><ul>\n<li><code>JDK</code>：Java Development Kit</li>\n<li><code>JRE</code>：Java Runtime Environment</li>\n<li><code>JVM</code>：Java Virtual Machine</li>\n</ul>\n<blockquote>\n<p><code>JRE</code> 扩充了一些开发工具后成为<code> JDK</code></p>\n<p><strong>JVM</strong> 是 Java 跨平台的核心</p>\n</blockquote>\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><p><code>HelloWord</code> 的 <code>Java</code>实现</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>在命令行窗口中运行命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">javac HelloWorld.java\n# 在对应目录下运行cmd，将会生成一个.class文件\njava HelloWorld\n# 这里不用加后缀</code></pre>\n\n<p>运行成功后将打印</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">Hello, World!</code></pre>\n\n"},{"title":"Java学习笔记-Java基础","date":"2021-08-23T18:23:48.000Z","_content":"\n## 注释\n\n+ 单行注释\n\n  ```java\n  // 单行注释\n  ```\n\n+ 多行注释\n\n  ```java\n  /*\n  多行注释\n  多行注释\n  */\n  ```\n\n+ 文档注释（JavaDoc）\n\n  ```java\n  /**\n   *@Description\n   *@Author\n   */\n  ```\n\n## 标识符与关键字\n\n### 关键字\n\nJava 语法中自带的单词，如 public，int，package等\n\n### 标识符\n\n类名、变量名以及方法名都被称为标识符，标识符不能以关键字命名\n\n+ 标识符以大小写字母、美元符号（$）、下划线（_）开头\n+ 首字符后可以使用大小写字母、美元符号、下划线、数字\n+ 标识符大小写敏感\n+ 不建议使用中文与拼音命名\n\n## 数据类型\n\n### 基本类型\n\n+ 数值类型\n\n  + 整数类型\n\n    + byte：占1个字节\n    + short：占2个字节\n    + int：占4个字节\n    + long：占8个字节\n\n    > 二进制 `0b`，八进制`0`，十六进制`0x`\n\n  + 浮点类型\n\n    + float：占4个字节\n    + double：占8个字节\n\n    > 浮点数有误差，最好不要使用浮点数进行比较操作\n\n  + 字符类型\n\n    + char：占2个字节\n\n    > unicode编码 占2字节\n    >\n    > 转义字符：\\t \\n 等\n\n+ boolean类型：占一位，只有 `true`和`false`两种取值\n\n### 引用类型\n\n+ 类\n+ 接口\n+ 数组\n\n## 类型转换\n\nbyte, short, char -> int -> long -> float -> double\n\n> 一般从小到大转换\n\n### 强制类型转换\n\neg：\n\n```java\nint i = 10;\nbyte b = (byte)i;\n```\n\n高转低用强制转换，注意内存溢出与精度问题\n\n### 自动类型转换\n\neg：\n\n```java\nchar c = 'a';\nint i = c+1;\n```\n\n低到高用自动转换\n\n> 在计算比较大的数字时注意溢出的问题\n\n## 变量、常量、作用域\n\n### 变量\n\n最基本的存储单元，包括变量名、变量类型和作用域\n\n+ 每个变量都有类型，可以是基本类型，也可以是引用类型\n+ 变量名为合法的标识符\n\n### 常量\n\n初始化后不再改变，一般用`final`+`类型`+`常量名`定义\n\n```java\nfinal double PI = 3.14\n```\n\n常量名一般用大写字符\n\n### 作用域\n\n+ 类变量：作用域更大\n+ 实例变量：从属于对象，有默认值\n+ 局部变量：作用于方法内，需要初始化\n\n> **变量命名规范**\n>\n> + 见名知意\n> + 类变量：首字母小写和驼峰原则：monthSalary\n> + 局部变量：首字母小写和驼峰原则\n> + 常量：大写字母和下划线\n> + 类名：首字母大写和驼峰原则：HelloWorld\n> + 方法名：首字母小写和驼峰原则：setName\n\n## 运算符\n\n+ 算术运算符：+ , - , * , / , % , ++ , --\n\n+ 赋值运算符：=\n\n+ 关系运算符：> , < , >= , <= , == , != , instaceof\n\n  > instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false\n\n+ 逻辑运算符：&&，||， !\n\n+ 位运算符：&，|，^，~，>>，<<，>>>\n\n+ 条件运算符：? : \n\n+ 扩展赋值运算符：+=，-=，*=，/=\n\n## 包机制\n\n用于更好的组织类\n\n语法\n\n```java\npackage pkg1[.pkg2[.pkg3...]];\n// 三个包存在包含关系\n```\n\n一般用域名倒置作为包名\n\n当使用某个包的成员时，需要导入该包\n\n```java\nimport package1[.package2...].(classname|*);\n// *表示导入包中所有的类\n```\n\n## JavaDoc\n\n+ javadoc命令用于生成自己的API文档\n+ 参数\n  + @author 作者\n  + @version 版本\n  + @since jdk版本\n  + @param 参数\n  + @return 返回值情况\n  + @throws 异常抛出情况\n","source":"_posts/Java-note-2.md","raw":"---\ntitle: Java学习笔记-Java基础\ndate: 2021-08-24 02:23:48\ntags: \n  - Java\n  - 学习\ncategories:\n  - 学习笔记\n  - Java笔记\n---\n\n## 注释\n\n+ 单行注释\n\n  ```java\n  // 单行注释\n  ```\n\n+ 多行注释\n\n  ```java\n  /*\n  多行注释\n  多行注释\n  */\n  ```\n\n+ 文档注释（JavaDoc）\n\n  ```java\n  /**\n   *@Description\n   *@Author\n   */\n  ```\n\n## 标识符与关键字\n\n### 关键字\n\nJava 语法中自带的单词，如 public，int，package等\n\n### 标识符\n\n类名、变量名以及方法名都被称为标识符，标识符不能以关键字命名\n\n+ 标识符以大小写字母、美元符号（$）、下划线（_）开头\n+ 首字符后可以使用大小写字母、美元符号、下划线、数字\n+ 标识符大小写敏感\n+ 不建议使用中文与拼音命名\n\n## 数据类型\n\n### 基本类型\n\n+ 数值类型\n\n  + 整数类型\n\n    + byte：占1个字节\n    + short：占2个字节\n    + int：占4个字节\n    + long：占8个字节\n\n    > 二进制 `0b`，八进制`0`，十六进制`0x`\n\n  + 浮点类型\n\n    + float：占4个字节\n    + double：占8个字节\n\n    > 浮点数有误差，最好不要使用浮点数进行比较操作\n\n  + 字符类型\n\n    + char：占2个字节\n\n    > unicode编码 占2字节\n    >\n    > 转义字符：\\t \\n 等\n\n+ boolean类型：占一位，只有 `true`和`false`两种取值\n\n### 引用类型\n\n+ 类\n+ 接口\n+ 数组\n\n## 类型转换\n\nbyte, short, char -> int -> long -> float -> double\n\n> 一般从小到大转换\n\n### 强制类型转换\n\neg：\n\n```java\nint i = 10;\nbyte b = (byte)i;\n```\n\n高转低用强制转换，注意内存溢出与精度问题\n\n### 自动类型转换\n\neg：\n\n```java\nchar c = 'a';\nint i = c+1;\n```\n\n低到高用自动转换\n\n> 在计算比较大的数字时注意溢出的问题\n\n## 变量、常量、作用域\n\n### 变量\n\n最基本的存储单元，包括变量名、变量类型和作用域\n\n+ 每个变量都有类型，可以是基本类型，也可以是引用类型\n+ 变量名为合法的标识符\n\n### 常量\n\n初始化后不再改变，一般用`final`+`类型`+`常量名`定义\n\n```java\nfinal double PI = 3.14\n```\n\n常量名一般用大写字符\n\n### 作用域\n\n+ 类变量：作用域更大\n+ 实例变量：从属于对象，有默认值\n+ 局部变量：作用于方法内，需要初始化\n\n> **变量命名规范**\n>\n> + 见名知意\n> + 类变量：首字母小写和驼峰原则：monthSalary\n> + 局部变量：首字母小写和驼峰原则\n> + 常量：大写字母和下划线\n> + 类名：首字母大写和驼峰原则：HelloWorld\n> + 方法名：首字母小写和驼峰原则：setName\n\n## 运算符\n\n+ 算术运算符：+ , - , * , / , % , ++ , --\n\n+ 赋值运算符：=\n\n+ 关系运算符：> , < , >= , <= , == , != , instaceof\n\n  > instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false\n\n+ 逻辑运算符：&&，||， !\n\n+ 位运算符：&，|，^，~，>>，<<，>>>\n\n+ 条件运算符：? : \n\n+ 扩展赋值运算符：+=，-=，*=，/=\n\n## 包机制\n\n用于更好的组织类\n\n语法\n\n```java\npackage pkg1[.pkg2[.pkg3...]];\n// 三个包存在包含关系\n```\n\n一般用域名倒置作为包名\n\n当使用某个包的成员时，需要导入该包\n\n```java\nimport package1[.package2...].(classname|*);\n// *表示导入包中所有的类\n```\n\n## JavaDoc\n\n+ javadoc命令用于生成自己的API文档\n+ 参数\n  + @author 作者\n  + @version 版本\n  + @since jdk版本\n  + @param 参数\n  + @return 返回值情况\n  + @throws 异常抛出情况\n","slug":"Java-note-2","published":1,"updated":"2021-08-25T15:55:03.887Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleino0003kwvj7twj8b1x","content":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li><p>单行注释</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 单行注释</span></code></pre></li>\n<li><p>多行注释</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n多行注释\n多行注释\n*/</span></code></pre></li>\n<li><p>文档注释（JavaDoc）</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n *@Description\n *@Author\n */</span></code></pre></li>\n</ul>\n<h2 id=\"标识符与关键字\"><a href=\"#标识符与关键字\" class=\"headerlink\" title=\"标识符与关键字\"></a>标识符与关键字</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>Java 语法中自带的单词，如 public，int，package等</p>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>类名、变量名以及方法名都被称为标识符，标识符不能以关键字命名</p>\n<ul>\n<li>标识符以大小写字母、美元符号（$）、下划线（_）开头</li>\n<li>首字符后可以使用大小写字母、美元符号、下划线、数字</li>\n<li>标识符大小写敏感</li>\n<li>不建议使用中文与拼音命名</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h3><ul>\n<li><p>数值类型</p>\n<ul>\n<li><p>整数类型</p>\n<ul>\n<li>byte：占1个字节</li>\n<li>short：占2个字节</li>\n<li>int：占4个字节</li>\n<li>long：占8个字节</li>\n</ul>\n<blockquote>\n<p>二进制 <code>0b</code>，八进制<code>0</code>，十六进制<code>0x</code></p>\n</blockquote>\n</li>\n<li><p>浮点类型</p>\n<ul>\n<li>float：占4个字节</li>\n<li>double：占8个字节</li>\n</ul>\n<blockquote>\n<p>浮点数有误差，最好不要使用浮点数进行比较操作</p>\n</blockquote>\n</li>\n<li><p>字符类型</p>\n<ul>\n<li>char：占2个字节</li>\n</ul>\n<blockquote>\n<p>unicode编码 占2字节</p>\n<p>转义字符：\\t \\n 等</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>boolean类型：占一位，只有 <code>true</code>和<code>false</code>两种取值</p>\n</li>\n</ul>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul>\n<li>类</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>byte, short, char -&gt; int -&gt; long -&gt; float -&gt; double</p>\n<blockquote>\n<p>一般从小到大转换</p>\n</blockquote>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><p>eg：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span></code></pre>\n\n<p>高转低用强制转换，注意内存溢出与精度问题</p>\n<h3 id=\"自动类型转换\"><a href=\"#自动类型转换\" class=\"headerlink\" title=\"自动类型转换\"></a>自动类型转换</h3><p>eg：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>低到高用自动转换</p>\n<blockquote>\n<p>在计算比较大的数字时注意溢出的问题</p>\n</blockquote>\n<h2 id=\"变量、常量、作用域\"><a href=\"#变量、常量、作用域\" class=\"headerlink\" title=\"变量、常量、作用域\"></a>变量、常量、作用域</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>最基本的存储单元，包括变量名、变量类型和作用域</p>\n<ul>\n<li>每个变量都有类型，可以是基本类型，也可以是引用类型</li>\n<li>变量名为合法的标识符</li>\n</ul>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>初始化后不再改变，一般用<code>final</code>+<code>类型</code>+<code>常量名</code>定义</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span></code></pre>\n\n<p>常量名一般用大写字符</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>类变量：作用域更大</li>\n<li>实例变量：从属于对象，有默认值</li>\n<li>局部变量：作用于方法内，需要初始化</li>\n</ul>\n<blockquote>\n<p><strong>变量命名规范</strong></p>\n<ul>\n<li>见名知意</li>\n<li>类变量：首字母小写和驼峰原则：monthSalary</li>\n<li>局部变量：首字母小写和驼峰原则</li>\n<li>常量：大写字母和下划线</li>\n<li>类名：首字母大写和驼峰原则：HelloWorld</li>\n<li>方法名：首字母小写和驼峰原则：setName</li>\n</ul>\n</blockquote>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li><p>算术运算符：+ , - , * , / , % , ++ , –</p>\n</li>\n<li><p>赋值运算符：=</p>\n</li>\n<li><p>关系运算符：&gt; , &lt; , &gt;= , &lt;= , == , != , instaceof</p>\n<blockquote>\n<p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false</p>\n</blockquote>\n</li>\n<li><p>逻辑运算符：&amp;&amp;，||， !</p>\n</li>\n<li><p>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</p>\n</li>\n<li><p>条件运算符：? : </p>\n</li>\n<li><p>扩展赋值运算符：+=，-=，*=，/=</p>\n</li>\n</ul>\n<h2 id=\"包机制\"><a href=\"#包机制\" class=\"headerlink\" title=\"包机制\"></a>包机制</h2><p>用于更好的组织类</p>\n<p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">pkg1</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>pkg2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>pkg3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 三个包存在包含关系</span></code></pre>\n\n<p>一般用域名倒置作为包名</p>\n<p>当使用某个包的成员时，需要导入该包</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">package1</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>package2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>classname<span class=\"token operator\">|</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// *表示导入包中所有的类</span></code></pre>\n\n<h2 id=\"JavaDoc\"><a href=\"#JavaDoc\" class=\"headerlink\" title=\"JavaDoc\"></a>JavaDoc</h2><ul>\n<li>javadoc命令用于生成自己的API文档</li>\n<li>参数<ul>\n<li>@author 作者</li>\n<li>@version 版本</li>\n<li>@since jdk版本</li>\n<li>@param 参数</li>\n<li>@return 返回值情况</li>\n<li>@throws 异常抛出情况</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><ul>\n<li><p>单行注释</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 单行注释</span></code></pre></li>\n<li><p>多行注释</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/*\n多行注释\n多行注释\n*/</span></code></pre></li>\n<li><p>文档注释（JavaDoc）</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">/**\n *@Description\n *@Author\n */</span></code></pre></li>\n</ul>\n<h2 id=\"标识符与关键字\"><a href=\"#标识符与关键字\" class=\"headerlink\" title=\"标识符与关键字\"></a>标识符与关键字</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>Java 语法中自带的单词，如 public，int，package等</p>\n<h3 id=\"标识符\"><a href=\"#标识符\" class=\"headerlink\" title=\"标识符\"></a>标识符</h3><p>类名、变量名以及方法名都被称为标识符，标识符不能以关键字命名</p>\n<ul>\n<li>标识符以大小写字母、美元符号（$）、下划线（_）开头</li>\n<li>首字符后可以使用大小写字母、美元符号、下划线、数字</li>\n<li>标识符大小写敏感</li>\n<li>不建议使用中文与拼音命名</li>\n</ul>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><h3 id=\"基本类型\"><a href=\"#基本类型\" class=\"headerlink\" title=\"基本类型\"></a>基本类型</h3><ul>\n<li><p>数值类型</p>\n<ul>\n<li><p>整数类型</p>\n<ul>\n<li>byte：占1个字节</li>\n<li>short：占2个字节</li>\n<li>int：占4个字节</li>\n<li>long：占8个字节</li>\n</ul>\n<blockquote>\n<p>二进制 <code>0b</code>，八进制<code>0</code>，十六进制<code>0x</code></p>\n</blockquote>\n</li>\n<li><p>浮点类型</p>\n<ul>\n<li>float：占4个字节</li>\n<li>double：占8个字节</li>\n</ul>\n<blockquote>\n<p>浮点数有误差，最好不要使用浮点数进行比较操作</p>\n</blockquote>\n</li>\n<li><p>字符类型</p>\n<ul>\n<li>char：占2个字节</li>\n</ul>\n<blockquote>\n<p>unicode编码 占2字节</p>\n<p>转义字符：\\t \\n 等</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p>boolean类型：占一位，只有 <code>true</code>和<code>false</code>两种取值</p>\n</li>\n</ul>\n<h3 id=\"引用类型\"><a href=\"#引用类型\" class=\"headerlink\" title=\"引用类型\"></a>引用类型</h3><ul>\n<li>类</li>\n<li>接口</li>\n<li>数组</li>\n</ul>\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>byte, short, char -&gt; int -&gt; long -&gt; float -&gt; double</p>\n<blockquote>\n<p>一般从小到大转换</p>\n</blockquote>\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><p>eg：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">byte</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">byte</span><span class=\"token punctuation\">)</span>i<span class=\"token punctuation\">;</span></code></pre>\n\n<p>高转低用强制转换，注意内存溢出与精度问题</p>\n<h3 id=\"自动类型转换\"><a href=\"#自动类型转换\" class=\"headerlink\" title=\"自动类型转换\"></a>自动类型转换</h3><p>eg：</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> <span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>低到高用自动转换</p>\n<blockquote>\n<p>在计算比较大的数字时注意溢出的问题</p>\n</blockquote>\n<h2 id=\"变量、常量、作用域\"><a href=\"#变量、常量、作用域\" class=\"headerlink\" title=\"变量、常量、作用域\"></a>变量、常量、作用域</h2><h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3><p>最基本的存储单元，包括变量名、变量类型和作用域</p>\n<ul>\n<li>每个变量都有类型，可以是基本类型，也可以是引用类型</li>\n<li>变量名为合法的标识符</li>\n</ul>\n<h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><p>初始化后不再改变，一般用<code>final</code>+<code>类型</code>+<code>常量名</code>定义</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">final</span> <span class=\"token keyword\">double</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span></code></pre>\n\n<p>常量名一般用大写字符</p>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>类变量：作用域更大</li>\n<li>实例变量：从属于对象，有默认值</li>\n<li>局部变量：作用于方法内，需要初始化</li>\n</ul>\n<blockquote>\n<p><strong>变量命名规范</strong></p>\n<ul>\n<li>见名知意</li>\n<li>类变量：首字母小写和驼峰原则：monthSalary</li>\n<li>局部变量：首字母小写和驼峰原则</li>\n<li>常量：大写字母和下划线</li>\n<li>类名：首字母大写和驼峰原则：HelloWorld</li>\n<li>方法名：首字母小写和驼峰原则：setName</li>\n</ul>\n</blockquote>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><ul>\n<li><p>算术运算符：+ , - , * , / , % , ++ , –</p>\n</li>\n<li><p>赋值运算符：=</p>\n</li>\n<li><p>关系运算符：&gt; , &lt; , &gt;= , &lt;= , == , != , instaceof</p>\n<blockquote>\n<p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false</p>\n</blockquote>\n</li>\n<li><p>逻辑运算符：&amp;&amp;，||， !</p>\n</li>\n<li><p>位运算符：&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;</p>\n</li>\n<li><p>条件运算符：? : </p>\n</li>\n<li><p>扩展赋值运算符：+=，-=，*=，/=</p>\n</li>\n</ul>\n<h2 id=\"包机制\"><a href=\"#包机制\" class=\"headerlink\" title=\"包机制\"></a>包机制</h2><p>用于更好的组织类</p>\n<p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">pkg1</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>pkg2<span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>pkg3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 三个包存在包含关系</span></code></pre>\n\n<p>一般用域名倒置作为包名</p>\n<p>当使用某个包的成员时，需要导入该包</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">package1</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">.</span>package2<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>classname<span class=\"token operator\">|</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// *表示导入包中所有的类</span></code></pre>\n\n<h2 id=\"JavaDoc\"><a href=\"#JavaDoc\" class=\"headerlink\" title=\"JavaDoc\"></a>JavaDoc</h2><ul>\n<li>javadoc命令用于生成自己的API文档</li>\n<li>参数<ul>\n<li>@author 作者</li>\n<li>@version 版本</li>\n<li>@since jdk版本</li>\n<li>@param 参数</li>\n<li>@return 返回值情况</li>\n<li>@throws 异常抛出情况</li>\n</ul>\n</li>\n</ul>\n"},{"title":"Java学习笔记-Java流程控制","date":"2021-08-24T04:59:00.000Z","_content":"\n## Scanner 对象\n\nJava5 在 `java.util.Scanner` 中提供了 `Scanner` 类，可以获取用户输入，使用之前要导入这个包\n\n```java\nimport java.util.Scanner;\n```\n\n基本语法\n\n```java\n//创建一个名叫 s 的 Scanner 对象用于获取输入\nScanner s = new Scanner(System.in);\n// 将接收到的输入赋给变量str\nString str = s.next();\n```\n\n通过`Scanner`类的`next()`与`nextLine()`方法获取输入的字符串，读取前一般需要用`hasNext()`与`hasNextLine()`判断是否还有输入数据\n\n+ `next()`\n  1. 一定要读取到有效字符才可以结束输入\n  2. 对输入有效字符之前遇到空白，`next()`方法会将其自动去掉\n  3. 只有输入有效字符后才将其后面输入的空白作为分隔符或结束符\n  4. **`next()`不能得到带有空格的字符串**\n\n+ `nextLine()`\n  1. 以`Enter`为结束符，也就是说`nextLine()`返回的是输入回车之前的字符\n  2. 可以得到带有空格的字符串\n\n> 当需要输入整数和小数时，可以使用`nextInt()`和`nextFloat()`等方法，其他数据类型依次类推。\n\n## 顺序结构\n\n最基本的结构，最简单的结构，语句从上到下依次执行\n\n**是所有算法都会用到的结构**\n\n## 选择结构\n\n### if 单选择结构\n\n语法\n\n```java\nif (布尔表达式){\n\t//执行语句\n}\n```\n\n### if 双选择结构\n\n语法\n\n```java\nif(布尔表达式){\n    //执行语句\n}else{\n    //执行语句\n}\n```\n\n### if 多选择结构\n\n语法\n\n```java\nif (布尔表达式1){\n    //执行语句\n}else if (布尔表达式2){\n    //执行语句\n}else if (布尔表达式3){\n    //执行语句\n}else{\n    //执行语句\n}\n```\n\n### if 嵌套结构\n\n语法\n\n```java\nif (布尔表达式1){\n    // 执行语句\n    if (布尔表达式2){\n        // 执行语句\n    }\n}\n```\n\n### switch 选择结构\n\n语法\n\n```java\nswitch(expression){\n    case value:\n        //语句\n        break; //可选\n    case value:\n        //语句\n        break; //可选\n    default: //可选\n        // 语句\n}\n```\n\n**自 JavaSE 7 开始支持字符串比较**\n\n## 循环结构\n\n### while 循环\n\n结构\n\n```java\nwhile(布尔表达式) {\n    // 执行语句\n}\n```\n\n当布尔表达式为`true`是进入循环执行语句\n\n**大多数情况需要循环停止下来，需要一个让表达式失效的方式来结束循环**\n\n### do...while 循环\n\n结构\n\n```java\ndo {\n    //执行语句\n} while(布尔表达式)\n```\n\nde...while 循环至少执行一次\n\n### for 循环\n\n结构\n\n```java\nfor(初始化; 布尔表达式; 更新) {\n    // 执行语句\n}\n```\n\n### 增强 for 循环\n\n主要用于遍历数组，JavaSE 5 引入\n\n结构\n\n```java\nfor(声明语句 : 表达式){\n    //执行语句\n}\n```\n\n>声明语句：声明新的局部变量，该变量的类型必须和数组元素类型匹配。其作用域限定在循环语句块，其值与此时的数组元素的值相等\n>\n>表达式：表达式是要访问的数组名，或者是返回值为数组的方法\n\n## break continue\n\n### break\n\n用于**强制**退出循环，或在`switch`语句中防止`case`穿透\n\n### continue\n\n用于终止当次循环，但仍会执行下一次循环\n\n> Java 没有`goto`，但可以通过`label`标签和`continue`&`break`实现\n\n","source":"_posts/Java-note-3.md","raw":"---\ntitle: Java学习笔记-Java流程控制\ndate: 2021-08-24 12:59:00\ntags: \n  - Java\n  - 学习\ncategories:\n  - 学习笔记\n  - Java笔记\n---\n\n## Scanner 对象\n\nJava5 在 `java.util.Scanner` 中提供了 `Scanner` 类，可以获取用户输入，使用之前要导入这个包\n\n```java\nimport java.util.Scanner;\n```\n\n基本语法\n\n```java\n//创建一个名叫 s 的 Scanner 对象用于获取输入\nScanner s = new Scanner(System.in);\n// 将接收到的输入赋给变量str\nString str = s.next();\n```\n\n通过`Scanner`类的`next()`与`nextLine()`方法获取输入的字符串，读取前一般需要用`hasNext()`与`hasNextLine()`判断是否还有输入数据\n\n+ `next()`\n  1. 一定要读取到有效字符才可以结束输入\n  2. 对输入有效字符之前遇到空白，`next()`方法会将其自动去掉\n  3. 只有输入有效字符后才将其后面输入的空白作为分隔符或结束符\n  4. **`next()`不能得到带有空格的字符串**\n\n+ `nextLine()`\n  1. 以`Enter`为结束符，也就是说`nextLine()`返回的是输入回车之前的字符\n  2. 可以得到带有空格的字符串\n\n> 当需要输入整数和小数时，可以使用`nextInt()`和`nextFloat()`等方法，其他数据类型依次类推。\n\n## 顺序结构\n\n最基本的结构，最简单的结构，语句从上到下依次执行\n\n**是所有算法都会用到的结构**\n\n## 选择结构\n\n### if 单选择结构\n\n语法\n\n```java\nif (布尔表达式){\n\t//执行语句\n}\n```\n\n### if 双选择结构\n\n语法\n\n```java\nif(布尔表达式){\n    //执行语句\n}else{\n    //执行语句\n}\n```\n\n### if 多选择结构\n\n语法\n\n```java\nif (布尔表达式1){\n    //执行语句\n}else if (布尔表达式2){\n    //执行语句\n}else if (布尔表达式3){\n    //执行语句\n}else{\n    //执行语句\n}\n```\n\n### if 嵌套结构\n\n语法\n\n```java\nif (布尔表达式1){\n    // 执行语句\n    if (布尔表达式2){\n        // 执行语句\n    }\n}\n```\n\n### switch 选择结构\n\n语法\n\n```java\nswitch(expression){\n    case value:\n        //语句\n        break; //可选\n    case value:\n        //语句\n        break; //可选\n    default: //可选\n        // 语句\n}\n```\n\n**自 JavaSE 7 开始支持字符串比较**\n\n## 循环结构\n\n### while 循环\n\n结构\n\n```java\nwhile(布尔表达式) {\n    // 执行语句\n}\n```\n\n当布尔表达式为`true`是进入循环执行语句\n\n**大多数情况需要循环停止下来，需要一个让表达式失效的方式来结束循环**\n\n### do...while 循环\n\n结构\n\n```java\ndo {\n    //执行语句\n} while(布尔表达式)\n```\n\nde...while 循环至少执行一次\n\n### for 循环\n\n结构\n\n```java\nfor(初始化; 布尔表达式; 更新) {\n    // 执行语句\n}\n```\n\n### 增强 for 循环\n\n主要用于遍历数组，JavaSE 5 引入\n\n结构\n\n```java\nfor(声明语句 : 表达式){\n    //执行语句\n}\n```\n\n>声明语句：声明新的局部变量，该变量的类型必须和数组元素类型匹配。其作用域限定在循环语句块，其值与此时的数组元素的值相等\n>\n>表达式：表达式是要访问的数组名，或者是返回值为数组的方法\n\n## break continue\n\n### break\n\n用于**强制**退出循环，或在`switch`语句中防止`case`穿透\n\n### continue\n\n用于终止当次循环，但仍会执行下一次循环\n\n> Java 没有`goto`，但可以通过`label`标签和`continue`&`break`实现\n\n","slug":"Java-note-3","published":1,"updated":"2021-08-24T08:26:15.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleinr0007kwvj3xxw28xe","content":"<h2 id=\"Scanner-对象\"><a href=\"#Scanner-对象\" class=\"headerlink\" title=\"Scanner 对象\"></a>Scanner 对象</h2><p>Java5 在 <code>java.util.Scanner</code> 中提供了 <code>Scanner</code> 类，可以获取用户输入，使用之前要导入这个包</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>基本语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//创建一个名叫 s 的 Scanner 对象用于获取输入</span>\n<span class=\"token class-name\">Scanner</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将接收到的输入赋给变量str</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>通过<code>Scanner</code>类的<code>next()</code>与<code>nextLine()</code>方法获取输入的字符串，读取前一般需要用<code>hasNext()</code>与<code>hasNextLine()</code>判断是否还有输入数据</p>\n<ul>\n<li><p><code>next()</code></p>\n<ol>\n<li>一定要读取到有效字符才可以结束输入</li>\n<li>对输入有效字符之前遇到空白，<code>next()</code>方法会将其自动去掉</li>\n<li>只有输入有效字符后才将其后面输入的空白作为分隔符或结束符</li>\n<li><strong><code>next()</code>不能得到带有空格的字符串</strong></li>\n</ol>\n</li>\n<li><p><code>nextLine()</code></p>\n<ol>\n<li>以<code>Enter</code>为结束符，也就是说<code>nextLine()</code>返回的是输入回车之前的字符</li>\n<li>可以得到带有空格的字符串</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>当需要输入整数和小数时，可以使用<code>nextInt()</code>和<code>nextFloat()</code>等方法，其他数据类型依次类推。</p>\n</blockquote>\n<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><p>最基本的结构，最简单的结构，语句从上到下依次执行</p>\n<p><strong>是所有算法都会用到的结构</strong></p>\n<h2 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h2><h3 id=\"if-单选择结构\"><a href=\"#if-单选择结构\" class=\"headerlink\" title=\"if 单选择结构\"></a>if 单选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"if-双选择结构\"><a href=\"#if-双选择结构\" class=\"headerlink\" title=\"if 双选择结构\"></a>if 双选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"if-多选择结构\"><a href=\"#if-多选择结构\" class=\"headerlink\" title=\"if 多选择结构\"></a>if 多选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"if-嵌套结构\"><a href=\"#if-嵌套结构\" class=\"headerlink\" title=\"if 嵌套结构\"></a>if 嵌套结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行语句</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 执行语句</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"switch-选择结构\"><a href=\"#switch-选择结构\" class=\"headerlink\" title=\"switch 选择结构\"></a>switch 选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> value<span class=\"token operator\">:</span>\n        <span class=\"token comment\">//语句</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可选</span>\n    <span class=\"token keyword\">case</span> value<span class=\"token operator\">:</span>\n        <span class=\"token comment\">//语句</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可选</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token comment\">//可选</span>\n        <span class=\"token comment\">// 语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>自 JavaSE 7 开始支持字符串比较</strong></p>\n<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>当布尔表达式为<code>true</code>是进入循环执行语句</p>\n<p><strong>大多数情况需要循环停止下来，需要一个让表达式失效的方式来结束循环</strong></p>\n<h3 id=\"do…while-循环\"><a href=\"#do…while-循环\" class=\"headerlink\" title=\"do…while 循环\"></a>do…while 循环</h3><p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></code></pre>\n\n<p>de…while 循环至少执行一次</p>\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">;</span> 布尔表达式<span class=\"token punctuation\">;</span> 更新<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"增强-for-循环\"><a href=\"#增强-for-循环\" class=\"headerlink\" title=\"增强 for 循环\"></a>增强 for 循环</h3><p>主要用于遍历数组，JavaSE 5 引入</p>\n<p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>声明语句 <span class=\"token operator\">:</span> 表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<blockquote>\n<p>声明语句：声明新的局部变量，该变量的类型必须和数组元素类型匹配。其作用域限定在循环语句块，其值与此时的数组元素的值相等</p>\n<p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法</p>\n</blockquote>\n<h2 id=\"break-continue\"><a href=\"#break-continue\" class=\"headerlink\" title=\"break continue\"></a>break continue</h2><h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>用于<strong>强制</strong>退出循环，或在<code>switch</code>语句中防止<code>case</code>穿透</p>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p>用于终止当次循环，但仍会执行下一次循环</p>\n<blockquote>\n<p>Java 没有<code>goto</code>，但可以通过<code>label</code>标签和<code>continue</code>&amp;<code>break</code>实现</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Scanner-对象\"><a href=\"#Scanner-对象\" class=\"headerlink\" title=\"Scanner 对象\"></a>Scanner 对象</h2><p>Java5 在 <code>java.util.Scanner</code> 中提供了 <code>Scanner</code> 类，可以获取用户输入，使用之前要导入这个包</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>基本语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">//创建一个名叫 s 的 Scanner 对象用于获取输入</span>\n<span class=\"token class-name\">Scanner</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 将接收到的输入赋给变量str</span>\n<span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>通过<code>Scanner</code>类的<code>next()</code>与<code>nextLine()</code>方法获取输入的字符串，读取前一般需要用<code>hasNext()</code>与<code>hasNextLine()</code>判断是否还有输入数据</p>\n<ul>\n<li><p><code>next()</code></p>\n<ol>\n<li>一定要读取到有效字符才可以结束输入</li>\n<li>对输入有效字符之前遇到空白，<code>next()</code>方法会将其自动去掉</li>\n<li>只有输入有效字符后才将其后面输入的空白作为分隔符或结束符</li>\n<li><strong><code>next()</code>不能得到带有空格的字符串</strong></li>\n</ol>\n</li>\n<li><p><code>nextLine()</code></p>\n<ol>\n<li>以<code>Enter</code>为结束符，也就是说<code>nextLine()</code>返回的是输入回车之前的字符</li>\n<li>可以得到带有空格的字符串</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>当需要输入整数和小数时，可以使用<code>nextInt()</code>和<code>nextFloat()</code>等方法，其他数据类型依次类推。</p>\n</blockquote>\n<h2 id=\"顺序结构\"><a href=\"#顺序结构\" class=\"headerlink\" title=\"顺序结构\"></a>顺序结构</h2><p>最基本的结构，最简单的结构，语句从上到下依次执行</p>\n<p><strong>是所有算法都会用到的结构</strong></p>\n<h2 id=\"选择结构\"><a href=\"#选择结构\" class=\"headerlink\" title=\"选择结构\"></a>选择结构</h2><h3 id=\"if-单选择结构\"><a href=\"#if-单选择结构\" class=\"headerlink\" title=\"if 单选择结构\"></a>if 单选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t<span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"if-双选择结构\"><a href=\"#if-双选择结构\" class=\"headerlink\" title=\"if 双选择结构\"></a>if 双选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"if-多选择结构\"><a href=\"#if-多选择结构\" class=\"headerlink\" title=\"if 多选择结构\"></a>if 多选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"if-嵌套结构\"><a href=\"#if-嵌套结构\" class=\"headerlink\" title=\"if 嵌套结构\"></a>if 嵌套结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行语句</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>布尔表达式<span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 执行语句</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"switch-选择结构\"><a href=\"#switch-选择结构\" class=\"headerlink\" title=\"switch 选择结构\"></a>switch 选择结构</h3><p>语法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>expression<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">case</span> value<span class=\"token operator\">:</span>\n        <span class=\"token comment\">//语句</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可选</span>\n    <span class=\"token keyword\">case</span> value<span class=\"token operator\">:</span>\n        <span class=\"token comment\">//语句</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可选</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token comment\">//可选</span>\n        <span class=\"token comment\">// 语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p><strong>自 JavaSE 7 开始支持字符串比较</strong></p>\n<h2 id=\"循环结构\"><a href=\"#循环结构\" class=\"headerlink\" title=\"循环结构\"></a>循环结构</h2><h3 id=\"while-循环\"><a href=\"#while-循环\" class=\"headerlink\" title=\"while 循环\"></a>while 循环</h3><p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>当布尔表达式为<code>true</code>是进入循环执行语句</p>\n<p><strong>大多数情况需要循环停止下来，需要一个让表达式失效的方式来结束循环</strong></p>\n<h3 id=\"do…while-循环\"><a href=\"#do…while-循环\" class=\"headerlink\" title=\"do…while 循环\"></a>do…while 循环</h3><p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>布尔表达式<span class=\"token punctuation\">)</span></code></pre>\n\n<p>de…while 循环至少执行一次</p>\n<h3 id=\"for-循环\"><a href=\"#for-循环\" class=\"headerlink\" title=\"for 循环\"></a>for 循环</h3><p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">;</span> 布尔表达式<span class=\"token punctuation\">;</span> 更新<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"增强-for-循环\"><a href=\"#增强-for-循环\" class=\"headerlink\" title=\"增强 for 循环\"></a>增强 for 循环</h3><p>主要用于遍历数组，JavaSE 5 引入</p>\n<p>结构</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>声明语句 <span class=\"token operator\">:</span> 表达式<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//执行语句</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<blockquote>\n<p>声明语句：声明新的局部变量，该变量的类型必须和数组元素类型匹配。其作用域限定在循环语句块，其值与此时的数组元素的值相等</p>\n<p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法</p>\n</blockquote>\n<h2 id=\"break-continue\"><a href=\"#break-continue\" class=\"headerlink\" title=\"break continue\"></a>break continue</h2><h3 id=\"break\"><a href=\"#break\" class=\"headerlink\" title=\"break\"></a>break</h3><p>用于<strong>强制</strong>退出循环，或在<code>switch</code>语句中防止<code>case</code>穿透</p>\n<h3 id=\"continue\"><a href=\"#continue\" class=\"headerlink\" title=\"continue\"></a>continue</h3><p>用于终止当次循环，但仍会执行下一次循环</p>\n<blockquote>\n<p>Java 没有<code>goto</code>，但可以通过<code>label</code>标签和<code>continue</code>&amp;<code>break</code>实现</p>\n</blockquote>\n"},{"title":"Java学习笔记-Java方法","date":"2021-08-24T08:20:00.000Z","_content":"\n## 什么是方法\n\nJava 方法是语句集合，它们在一起执行一个功能\n\n+ 方法是解决一类问题的步骤的有序组合\n+ 方法包含于类或对象中\n+ 方法在程序中被创建，在其他地方被引用\n\n> 设计方法的原则：最好保持方法的原子性，即**一个方法只完成一个功能**\n\n## 方法的定义与调用\n\n### 方法的定义\n\n类似于C语言中的函数\n\n**方法包括一个方法头与一个方法体：**\n\n+ 方法头：\n  + 修饰符：可选，告诉编译器如何调用该方法，定义了该方法的访问类型\n  + 返回值类型：方法可能会返回值。返回值类型是方法返回值的数据类型，若方法没有返回值，则返回值类型为`void`\n  + 方法名：是方法的实际名称，与参数表共同构成方法签名\n  + 参数表：方法被调用时，将值传递给参数，这个值被称为实际参数或变量（实参），而用于接收外界输入的数据被称为形式参数（形参）；参数表指方法的参数类型、顺序和参数个数。方法可以不含任何参数\n    + 形式参数：在方法被调用时用于接收外界输入的数据。\n    + 实际参数：调用方法时实际传递给方法的数据\n\n+ 方法体：方法体包含具体的执行语句，定义该方法的功能\n\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){ //方法头\n    /*\n      方法体\n    */\n    return 返回值;\n}\n```\n\n### 方法调用\n\n格式：`对象名.方法名(实参表)`\n\n> 值传递与引用传递：\n>\n> Java是值传递的，即调用方法时，将实参的值拷贝给形参，对形参的值进行更改时，实参的值不会发生改变，**注意：这里的“值”是指这个参数的值，它可以是数值，也可以是地址**，因此在考虑调用方法后的值变化问题需要具体分析，可以指针和内存管理角度去理解（C语言还是有用）\n\n## 方法的重载\n\n重载就是一个类中，有相同的方法名称，但形参不同的方法\n\n规则：\n\n+ 方法名称相同\n+ 参数表必须不同（个数不同、或类型不同、或参数排列顺序不同等）\n+ 方法的返回类型可以相同也可以不同\n+ 仅仅返回类型不同不足以成为方法的重载\n\n## 命令行传参\n\n与C语言类似，在运行时通过给`main`方法传递参数来实现相应的功能\n\n```sh\njavac 文件名.java\njava 包名.类名 参数\n# 注意：运行时一定要回退至根目录下通过包名来找到类\n```\n\n## 可变参数\n\nJDK 1.5 开始支持传递同类型可变参数给一个方法\n\n在方法的声明中。在指定参数类型后加上一个省略号（...）\n\n一个方法中只能指定一个可变参数，且必须时方法的最后一个参数\n\n> 本质上是给方法传递一个数组实现\n\n## 递归\n\n自己调用自己\n\n+ 递归结构\n  + 递归头：即递归终点的到达条件\n  + 递归体：调用自身的语句\n\n**没有递归头将会导致递归工作栈溢出**\n\n例如递归实现阶乘\n\n```java\npublic static int fact(int n){\n    if (n == 1){\n        return 1;\n    }else{\n        return n * fact(n - 1);\n    }\n}\n```\n\n","source":"_posts/Java-note-4.md","raw":"---\ntitle: Java学习笔记-Java方法\ndate: 2021-08-24 16:20:00\ntags: \n  - Java\n  - 学习\ncategories:\n  - 学习笔记\n  - Java笔记\n---\n\n## 什么是方法\n\nJava 方法是语句集合，它们在一起执行一个功能\n\n+ 方法是解决一类问题的步骤的有序组合\n+ 方法包含于类或对象中\n+ 方法在程序中被创建，在其他地方被引用\n\n> 设计方法的原则：最好保持方法的原子性，即**一个方法只完成一个功能**\n\n## 方法的定义与调用\n\n### 方法的定义\n\n类似于C语言中的函数\n\n**方法包括一个方法头与一个方法体：**\n\n+ 方法头：\n  + 修饰符：可选，告诉编译器如何调用该方法，定义了该方法的访问类型\n  + 返回值类型：方法可能会返回值。返回值类型是方法返回值的数据类型，若方法没有返回值，则返回值类型为`void`\n  + 方法名：是方法的实际名称，与参数表共同构成方法签名\n  + 参数表：方法被调用时，将值传递给参数，这个值被称为实际参数或变量（实参），而用于接收外界输入的数据被称为形式参数（形参）；参数表指方法的参数类型、顺序和参数个数。方法可以不含任何参数\n    + 形式参数：在方法被调用时用于接收外界输入的数据。\n    + 实际参数：调用方法时实际传递给方法的数据\n\n+ 方法体：方法体包含具体的执行语句，定义该方法的功能\n\n```java\n修饰符 返回值类型 方法名(参数类型 参数名){ //方法头\n    /*\n      方法体\n    */\n    return 返回值;\n}\n```\n\n### 方法调用\n\n格式：`对象名.方法名(实参表)`\n\n> 值传递与引用传递：\n>\n> Java是值传递的，即调用方法时，将实参的值拷贝给形参，对形参的值进行更改时，实参的值不会发生改变，**注意：这里的“值”是指这个参数的值，它可以是数值，也可以是地址**，因此在考虑调用方法后的值变化问题需要具体分析，可以指针和内存管理角度去理解（C语言还是有用）\n\n## 方法的重载\n\n重载就是一个类中，有相同的方法名称，但形参不同的方法\n\n规则：\n\n+ 方法名称相同\n+ 参数表必须不同（个数不同、或类型不同、或参数排列顺序不同等）\n+ 方法的返回类型可以相同也可以不同\n+ 仅仅返回类型不同不足以成为方法的重载\n\n## 命令行传参\n\n与C语言类似，在运行时通过给`main`方法传递参数来实现相应的功能\n\n```sh\njavac 文件名.java\njava 包名.类名 参数\n# 注意：运行时一定要回退至根目录下通过包名来找到类\n```\n\n## 可变参数\n\nJDK 1.5 开始支持传递同类型可变参数给一个方法\n\n在方法的声明中。在指定参数类型后加上一个省略号（...）\n\n一个方法中只能指定一个可变参数，且必须时方法的最后一个参数\n\n> 本质上是给方法传递一个数组实现\n\n## 递归\n\n自己调用自己\n\n+ 递归结构\n  + 递归头：即递归终点的到达条件\n  + 递归体：调用自身的语句\n\n**没有递归头将会导致递归工作栈溢出**\n\n例如递归实现阶乘\n\n```java\npublic static int fact(int n){\n    if (n == 1){\n        return 1;\n    }else{\n        return n * fact(n - 1);\n    }\n}\n```\n\n","slug":"Java-note-4","published":1,"updated":"2021-08-24T10:04:38.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleins0008kwvj2l7e8ewo","content":"<h2 id=\"什么是方法\"><a href=\"#什么是方法\" class=\"headerlink\" title=\"什么是方法\"></a>什么是方法</h2><p>Java 方法是语句集合，它们在一起执行一个功能</p>\n<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n<blockquote>\n<p>设计方法的原则：最好保持方法的原子性，即<strong>一个方法只完成一个功能</strong></p>\n</blockquote>\n<h2 id=\"方法的定义与调用\"><a href=\"#方法的定义与调用\" class=\"headerlink\" title=\"方法的定义与调用\"></a>方法的定义与调用</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><p>类似于C语言中的函数</p>\n<p><strong>方法包括一个方法头与一个方法体：</strong></p>\n<ul>\n<li><p>方法头：</p>\n<ul>\n<li>修饰符：可选，告诉编译器如何调用该方法，定义了该方法的访问类型</li>\n<li>返回值类型：方法可能会返回值。返回值类型是方法返回值的数据类型，若方法没有返回值，则返回值类型为<code>void</code></li>\n<li>方法名：是方法的实际名称，与参数表共同构成方法签名</li>\n<li>参数表：方法被调用时，将值传递给参数，这个值被称为实际参数或变量（实参），而用于接收外界输入的数据被称为形式参数（形参）；参数表指方法的参数类型、顺序和参数个数。方法可以不含任何参数<ul>\n<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>\n<li>实际参数：调用方法时实际传递给方法的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法体：方法体包含具体的执行语句，定义该方法的功能</p>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">修饰符 返回值类型 方法名<span class=\"token punctuation\">(</span>参数类型 参数名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//方法头</span>\n    <span class=\"token comment\">/*\n      方法体\n    */</span>\n    <span class=\"token keyword\">return</span> 返回值<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><p>格式：<code>对象名.方法名(实参表)</code></p>\n<blockquote>\n<p>值传递与引用传递：</p>\n<p>Java是值传递的，即调用方法时，将实参的值拷贝给形参，对形参的值进行更改时，实参的值不会发生改变，<strong>注意：这里的“值”是指这个参数的值，它可以是数值，也可以是地址</strong>，因此在考虑调用方法后的值变化问题需要具体分析，可以指针和内存管理角度去理解（C语言还是有用）</p>\n</blockquote>\n<h2 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h2><p>重载就是一个类中，有相同的方法名称，但形参不同的方法</p>\n<p>规则：</p>\n<ul>\n<li>方法名称相同</li>\n<li>参数表必须不同（个数不同、或类型不同、或参数排列顺序不同等）</li>\n<li>方法的返回类型可以相同也可以不同</li>\n<li>仅仅返回类型不同不足以成为方法的重载</li>\n</ul>\n<h2 id=\"命令行传参\"><a href=\"#命令行传参\" class=\"headerlink\" title=\"命令行传参\"></a>命令行传参</h2><p>与C语言类似，在运行时通过给<code>main</code>方法传递参数来实现相应的功能</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">javac 文件名.java\njava 包名.类名 参数\n# 注意：运行时一定要回退至根目录下通过包名来找到类</code></pre>\n\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>JDK 1.5 开始支持传递同类型可变参数给一个方法</p>\n<p>在方法的声明中。在指定参数类型后加上一个省略号（…）</p>\n<p>一个方法中只能指定一个可变参数，且必须时方法的最后一个参数</p>\n<blockquote>\n<p>本质上是给方法传递一个数组实现</p>\n</blockquote>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>自己调用自己</p>\n<ul>\n<li>递归结构<ul>\n<li>递归头：即递归终点的到达条件</li>\n<li>递归体：调用自身的语句</li>\n</ul>\n</li>\n</ul>\n<p><strong>没有递归头将会导致递归工作栈溢出</strong></p>\n<p>例如递归实现阶乘</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是方法\"><a href=\"#什么是方法\" class=\"headerlink\" title=\"什么是方法\"></a>什么是方法</h2><p>Java 方法是语句集合，它们在一起执行一个功能</p>\n<ul>\n<li>方法是解决一类问题的步骤的有序组合</li>\n<li>方法包含于类或对象中</li>\n<li>方法在程序中被创建，在其他地方被引用</li>\n</ul>\n<blockquote>\n<p>设计方法的原则：最好保持方法的原子性，即<strong>一个方法只完成一个功能</strong></p>\n</blockquote>\n<h2 id=\"方法的定义与调用\"><a href=\"#方法的定义与调用\" class=\"headerlink\" title=\"方法的定义与调用\"></a>方法的定义与调用</h2><h3 id=\"方法的定义\"><a href=\"#方法的定义\" class=\"headerlink\" title=\"方法的定义\"></a>方法的定义</h3><p>类似于C语言中的函数</p>\n<p><strong>方法包括一个方法头与一个方法体：</strong></p>\n<ul>\n<li><p>方法头：</p>\n<ul>\n<li>修饰符：可选，告诉编译器如何调用该方法，定义了该方法的访问类型</li>\n<li>返回值类型：方法可能会返回值。返回值类型是方法返回值的数据类型，若方法没有返回值，则返回值类型为<code>void</code></li>\n<li>方法名：是方法的实际名称，与参数表共同构成方法签名</li>\n<li>参数表：方法被调用时，将值传递给参数，这个值被称为实际参数或变量（实参），而用于接收外界输入的数据被称为形式参数（形参）；参数表指方法的参数类型、顺序和参数个数。方法可以不含任何参数<ul>\n<li>形式参数：在方法被调用时用于接收外界输入的数据。</li>\n<li>实际参数：调用方法时实际传递给方法的数据</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法体：方法体包含具体的执行语句，定义该方法的功能</p>\n</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">修饰符 返回值类型 方法名<span class=\"token punctuation\">(</span>参数类型 参数名<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//方法头</span>\n    <span class=\"token comment\">/*\n      方法体\n    */</span>\n    <span class=\"token keyword\">return</span> 返回值<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"方法调用\"><a href=\"#方法调用\" class=\"headerlink\" title=\"方法调用\"></a>方法调用</h3><p>格式：<code>对象名.方法名(实参表)</code></p>\n<blockquote>\n<p>值传递与引用传递：</p>\n<p>Java是值传递的，即调用方法时，将实参的值拷贝给形参，对形参的值进行更改时，实参的值不会发生改变，<strong>注意：这里的“值”是指这个参数的值，它可以是数值，也可以是地址</strong>，因此在考虑调用方法后的值变化问题需要具体分析，可以指针和内存管理角度去理解（C语言还是有用）</p>\n</blockquote>\n<h2 id=\"方法的重载\"><a href=\"#方法的重载\" class=\"headerlink\" title=\"方法的重载\"></a>方法的重载</h2><p>重载就是一个类中，有相同的方法名称，但形参不同的方法</p>\n<p>规则：</p>\n<ul>\n<li>方法名称相同</li>\n<li>参数表必须不同（个数不同、或类型不同、或参数排列顺序不同等）</li>\n<li>方法的返回类型可以相同也可以不同</li>\n<li>仅仅返回类型不同不足以成为方法的重载</li>\n</ul>\n<h2 id=\"命令行传参\"><a href=\"#命令行传参\" class=\"headerlink\" title=\"命令行传参\"></a>命令行传参</h2><p>与C语言类似，在运行时通过给<code>main</code>方法传递参数来实现相应的功能</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">javac 文件名.java\njava 包名.类名 参数\n# 注意：运行时一定要回退至根目录下通过包名来找到类</code></pre>\n\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>JDK 1.5 开始支持传递同类型可变参数给一个方法</p>\n<p>在方法的声明中。在指定参数类型后加上一个省略号（…）</p>\n<p>一个方法中只能指定一个可变参数，且必须时方法的最后一个参数</p>\n<blockquote>\n<p>本质上是给方法传递一个数组实现</p>\n</blockquote>\n<h2 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h2><p>自己调用自己</p>\n<ul>\n<li>递归结构<ul>\n<li>递归头：即递归终点的到达条件</li>\n<li>递归体：调用自身的语句</li>\n</ul>\n</li>\n</ul>\n<p><strong>没有递归头将会导致递归工作栈溢出</strong></p>\n<p>例如递归实现阶乘</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> n <span class=\"token operator\">*</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n"},{"title":"Java学习笔记-数组","date":"2021-08-24T10:09:34.000Z","_content":"\n## 数组的声明创建\n\n+ 声明\n\n  ```java\n  dataType[] arrayRefVar; //首选\n  dataType arrayRefVar[]; //也行\n  ```\n\n+ 创建\n\n  ```java\n  arrayRefVar = new dataType[arraySize];\n  ```\n\n+ 也可以\n\n  ```java\n  dataType[] arrayRefVar = new dataType[arraySize];\n  ```\n\n> 数组下标从0开始\n\n+ 获取数组长度`arrays.length`\n\n  > arrays 为数组名\n\n## 数组初始化\n\n### 静态初始化\n\n```java\ndataType[] arrayRefVar = {data1, data2,data3...};\n```\n\n### 动态初始化\n\n```java\ndataType[] arrayRefVar = new dataType[arraySize];\narrayRefVar[0] = data1;\narrayRefVar[1] = data2;\n```\n\n### 默认初始化\n\n+ 数组是引用类型，其元素相当于类的实例变量，因此数组一经分配，其元素也被按照实例变量同样的方式被隐式初始化\n\n## 数组使用\n\n+ for-each 循环\n\n  ```java\n  for (int array : arrays){\n      System.out.println(array);\n  }\n  ```\n\n+ 数组作为参数\n\n  ```java\n  pubilc static void printArray(int[] arrays){\n      for (int array : arrays){\n      \tSystem.out.println(array);\n  \t}\n  }\n  ```\n\n+ 数组作为返回值\n\n  ```java\n  pubilc static int[] reverse(int[] arrays){\n      int[] result = new int[arrays.length];\n      for (int i = 0, j = result.length - 1; i < arrays.length; i++, j--){\n          result[j] = arrays[i];\n      }\n      return result;\n  }\n  ```\n\n## 多维数组\n\n可以看作数组的数组\n\n以二维数组为例\n\n```java\nint[][] arrays = {{1,2},{2,3},{3,4},{4,5}};\n```\n\n获取数组长度只获取当前维度的长度\n\n```java\nSystem.out.println(arrays.length);\n// 打印结果为4\nSystem.out.println(arrays[0].length);\n// 打印结果为2\n```\n\n结构\n\n![arrays](https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/arrays.jpg)\n\n>  三维数组或更高维的类似\n\n## Arrays 类\n\n[Java SE 8 官方API文档](https://docs.oracle.com/javase/8/docs/api/)\n\n","source":"_posts/Java-note-5.md","raw":"---\ntitle: Java学习笔记-数组\ndate: 2021-08-24 18:09:34\ntags: \n  - Java\n  - 学习\ncategories:\n  - 学习笔记\n  - Java笔记\n---\n\n## 数组的声明创建\n\n+ 声明\n\n  ```java\n  dataType[] arrayRefVar; //首选\n  dataType arrayRefVar[]; //也行\n  ```\n\n+ 创建\n\n  ```java\n  arrayRefVar = new dataType[arraySize];\n  ```\n\n+ 也可以\n\n  ```java\n  dataType[] arrayRefVar = new dataType[arraySize];\n  ```\n\n> 数组下标从0开始\n\n+ 获取数组长度`arrays.length`\n\n  > arrays 为数组名\n\n## 数组初始化\n\n### 静态初始化\n\n```java\ndataType[] arrayRefVar = {data1, data2,data3...};\n```\n\n### 动态初始化\n\n```java\ndataType[] arrayRefVar = new dataType[arraySize];\narrayRefVar[0] = data1;\narrayRefVar[1] = data2;\n```\n\n### 默认初始化\n\n+ 数组是引用类型，其元素相当于类的实例变量，因此数组一经分配，其元素也被按照实例变量同样的方式被隐式初始化\n\n## 数组使用\n\n+ for-each 循环\n\n  ```java\n  for (int array : arrays){\n      System.out.println(array);\n  }\n  ```\n\n+ 数组作为参数\n\n  ```java\n  pubilc static void printArray(int[] arrays){\n      for (int array : arrays){\n      \tSystem.out.println(array);\n  \t}\n  }\n  ```\n\n+ 数组作为返回值\n\n  ```java\n  pubilc static int[] reverse(int[] arrays){\n      int[] result = new int[arrays.length];\n      for (int i = 0, j = result.length - 1; i < arrays.length; i++, j--){\n          result[j] = arrays[i];\n      }\n      return result;\n  }\n  ```\n\n## 多维数组\n\n可以看作数组的数组\n\n以二维数组为例\n\n```java\nint[][] arrays = {{1,2},{2,3},{3,4},{4,5}};\n```\n\n获取数组长度只获取当前维度的长度\n\n```java\nSystem.out.println(arrays.length);\n// 打印结果为4\nSystem.out.println(arrays[0].length);\n// 打印结果为2\n```\n\n结构\n\n![arrays](https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/arrays.jpg)\n\n>  三维数组或更高维的类似\n\n## Arrays 类\n\n[Java SE 8 官方API文档](https://docs.oracle.com/javase/8/docs/api/)\n\n","slug":"Java-note-5","published":1,"updated":"2021-08-24T12:19:01.812Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleint0009kwvj86m21jut","content":"<h2 id=\"数组的声明创建\"><a href=\"#数组的声明创建\" class=\"headerlink\" title=\"数组的声明创建\"></a>数组的声明创建</h2><ul>\n<li><p>声明</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar<span class=\"token punctuation\">;</span> <span class=\"token comment\">//首选</span>\ndataType arrayRefVar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//也行</span></code></pre></li>\n<li><p>创建</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">arrayRefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></li>\n<li><p>也可以</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<blockquote>\n<p>数组下标从0开始</p>\n</blockquote>\n<ul>\n<li><p>获取数组长度<code>arrays.length</code></p>\n<blockquote>\n<p>arrays 为数组名</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数组初始化\"><a href=\"#数组初始化\" class=\"headerlink\" title=\"数组初始化\"></a>数组初始化</h2><h3 id=\"静态初始化\"><a href=\"#静态初始化\" class=\"headerlink\" title=\"静态初始化\"></a>静态初始化</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">,</span>data3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"动态初始化\"><a href=\"#动态初始化\" class=\"headerlink\" title=\"动态初始化\"></a>动态初始化</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narrayRefVar<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data1<span class=\"token punctuation\">;</span>\narrayRefVar<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data2<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"默认初始化\"><a href=\"#默认初始化\" class=\"headerlink\" title=\"默认初始化\"></a>默认初始化</h3><ul>\n<li>数组是引用类型，其元素相当于类的实例变量，因此数组一经分配，其元素也被按照实例变量同样的方式被隐式初始化</li>\n</ul>\n<h2 id=\"数组使用\"><a href=\"#数组使用\" class=\"headerlink\" title=\"数组使用\"></a>数组使用</h2><ul>\n<li><p>for-each 循环</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array <span class=\"token operator\">:</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>数组作为参数</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array <span class=\"token operator\">:</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>数组作为返回值</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arrays<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arrays<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        result<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrays<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><p>可以看作数组的数组</p>\n<p>以二维数组为例</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrays <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>获取数组长度只获取当前维度的长度</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arrays<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印结果为4</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arrays<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印结果为2</span></code></pre>\n\n<p>结构</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/arrays.jpg\" alt=\"arrays\"></p>\n<blockquote>\n<p> 三维数组或更高维的类似</p>\n</blockquote>\n<h2 id=\"Arrays-类\"><a href=\"#Arrays-类\" class=\"headerlink\" title=\"Arrays 类\"></a>Arrays 类</h2><p><a href=\"https://docs.oracle.com/javase/8/docs/api/\">Java SE 8 官方API文档</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"数组的声明创建\"><a href=\"#数组的声明创建\" class=\"headerlink\" title=\"数组的声明创建\"></a>数组的声明创建</h2><ul>\n<li><p>声明</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar<span class=\"token punctuation\">;</span> <span class=\"token comment\">//首选</span>\ndataType arrayRefVar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//也行</span></code></pre></li>\n<li><p>创建</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">arrayRefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></li>\n<li><p>也可以</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></li>\n</ul>\n<blockquote>\n<p>数组下标从0开始</p>\n</blockquote>\n<ul>\n<li><p>获取数组长度<code>arrays.length</code></p>\n<blockquote>\n<p>arrays 为数组名</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"数组初始化\"><a href=\"#数组初始化\" class=\"headerlink\" title=\"数组初始化\"></a>数组初始化</h2><h3 id=\"静态初始化\"><a href=\"#静态初始化\" class=\"headerlink\" title=\"静态初始化\"></a>静态初始化</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>data1<span class=\"token punctuation\">,</span> data2<span class=\"token punctuation\">,</span>data3<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"动态初始化\"><a href=\"#动态初始化\" class=\"headerlink\" title=\"动态初始化\"></a>动态初始化</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">dataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrayRefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span>arraySize<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narrayRefVar<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data1<span class=\"token punctuation\">;</span>\narrayRefVar<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data2<span class=\"token punctuation\">;</span></code></pre>\n\n<h3 id=\"默认初始化\"><a href=\"#默认初始化\" class=\"headerlink\" title=\"默认初始化\"></a>默认初始化</h3><ul>\n<li>数组是引用类型，其元素相当于类的实例变量，因此数组一经分配，其元素也被按照实例变量同样的方式被隐式初始化</li>\n</ul>\n<h2 id=\"数组使用\"><a href=\"#数组使用\" class=\"headerlink\" title=\"数组使用\"></a>数组使用</h2><ul>\n<li><p>for-each 循环</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array <span class=\"token operator\">:</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>数组作为参数</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printArray</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> array <span class=\"token operator\">:</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    \t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n<li><p>数组作为返回值</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrays<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arrays<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arrays<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        result<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arrays<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre></li>\n</ul>\n<h2 id=\"多维数组\"><a href=\"#多维数组\" class=\"headerlink\" title=\"多维数组\"></a>多维数组</h2><p>可以看作数组的数组</p>\n<p>以二维数组为例</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> arrays <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></code></pre>\n\n<p>获取数组长度只获取当前维度的长度</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arrays<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印结果为4</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>arrays<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 打印结果为2</span></code></pre>\n\n<p>结构</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/arrays.jpg\" alt=\"arrays\"></p>\n<blockquote>\n<p> 三维数组或更高维的类似</p>\n</blockquote>\n<h2 id=\"Arrays-类\"><a href=\"#Arrays-类\" class=\"headerlink\" title=\"Arrays 类\"></a>Arrays 类</h2><p><a href=\"https://docs.oracle.com/javase/8/docs/api/\">Java SE 8 官方API文档</a></p>\n"},{"title":"Java学习笔记-异常","date":"2021-08-25T11:31:34.000Z","_content":"\n## Exception 和 Error\n\n- 检查性异常：比如用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略\n- 运行时异常：运行时异常是可能被程序员避免的异常。于检查性异常相反，运行时异常可以在编译时被忽略\n- 错误：错误不是异常，而是脱离程序员控制的问题。错误在打吗中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们是编译也检查不到的\n\n### Error\n\n- Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写这所执行的操作无关\n- Java 虚拟机运行错误（VirtualMachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 **OutOfMenmoryError**。这些异常发生时，JVM 一般会选择终止线程\n- 在 JVM 试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况\n\n### Exception\n\n- 在 Exception 分支中有一个重要的子类 RuntimeException（运行时异常）\n  - ArrayIndexOutOfBoundsException\n  - NullPointerException\n  - ArithmeticException\n  - MissingResourceExecption\n  - ClassNotFoundException\n- 这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理\n- 这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常发生\n- Error 和 Exception 的区别\n  - Error 通常是灾难性的致命错误，是程序无法控制和处理的，当出现时，JVM 一般会选择终止线程\n  - Exception 通常情况下是可以被程序处理的，并且在程序中应该尽可能的处理\n\n## 异常处理机制\n\n异常处理关键字：`try`, `catch`, `finally`, `throw`, `throws`\n\n### 捕获异常\n\n```java\ntry{\n    // try 监控区域\n}catch(想要捕获的异常){\n    // 捕获异常后的执行语句\n}finally{\n    // 无论是否捕获到异常都会执行\n}\n```\n\n如果要捕获多个异常，要按照异常包含关系从小到大捕获，否则会报错\n\n比如\n\n```java\ntry{\n    // try 监控区域\n}catch(Exception e){\n    // 捕获异常后的执行语句\n}catch(Throwable t){\n    // 这段语句不能与上一段捕获语句交换位置\n}finally{\n    // 无论是否捕获到异常都会执行\n}\n```\n\n### 抛出异常\n\n假设在一个方法中无法处理异常，可以将其抛出\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        try{\n            new Test().test(1,0); //方法将异常抛出于此\n        }catch(ArithmeticException e){ //捕获到异常\n            //处理异常\n        }\n    }\n    \n    public void test(int a, int b) throws ArithmeticException{ // 可能出现的异常\n        if(b==0){ // 判断可能发生异常\n            throw new ArithmeticException(); //主动将异常抛出\n        }\n    }\n}\n```\n\n## 自定义异常\n\n以下代码自定义了一个异常\n\n```java\npublic class MyException extends Exception{ // 自定义异常需要继承自 Exception 或更高的父类\n    private int detail;\n\n    public MyException(int detail) { //构造方法，对 detail 赋值\n        this.detail = detail;\n    }\n\n    @Override\n    public String toString() { //来自父类Object的方法，将类的信息转换为字符串\n        return \"MyException{\" +  //这里相当于把这个异常信息转换成了字符串便于打印\n                \"detail=\" + detail +\n                '}';\n    }\n}\n\n```\n\n下面是测试代码\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            new Test().test(11); //异常抛出于此\n        } catch (MyException e) { //捕获异常信息 e，也就是 toString 的返回值\n            System.out.println(e); //打印异常信息\n        }\n    }\n\n    static void test(int a) throws MyException {\n        System.out.println(\"传入的参数为：\" + a);\n        if (a > 10){ //这里将判断是否异常\n            throw new MyException(a); //异常则 new 一个异常类，将其初始化为a，抛出到上层\n        }\n        System.out.println(\"OK\");\n    }\n}\n```\n\n## 实际应用\n\n- 处理运行异常时，采用逻辑去合理规避同时辅助`try`+`catch`处理\n- 多重`catch`块后面，可以加一个`catch(Exception e)`来处理可能会被遗漏的异常\n- 对于不确定的代码，也可以加上`try`+`catch`，处理潜在的异常\n- 尽量去处理异常，切记只是简单的调用`printStackTrace()`去打印输出\n- 具体如何处理异常，需要根据不同的业务需求和异常类型去确定\n- 尽量添加`finally`语句块去释放占用资源","source":"_posts/Java-note-7.md","raw":"---\ntitle: Java学习笔记-异常\ndate: 2021-08-25 19:31:34\ntags: \n  - Java\n  - 学习\ncategories:\n  - 学习笔记\n  - Java笔记\n---\n\n## Exception 和 Error\n\n- 检查性异常：比如用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略\n- 运行时异常：运行时异常是可能被程序员避免的异常。于检查性异常相反，运行时异常可以在编译时被忽略\n- 错误：错误不是异常，而是脱离程序员控制的问题。错误在打吗中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们是编译也检查不到的\n\n### Error\n\n- Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写这所执行的操作无关\n- Java 虚拟机运行错误（VirtualMachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 **OutOfMenmoryError**。这些异常发生时，JVM 一般会选择终止线程\n- 在 JVM 试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况\n\n### Exception\n\n- 在 Exception 分支中有一个重要的子类 RuntimeException（运行时异常）\n  - ArrayIndexOutOfBoundsException\n  - NullPointerException\n  - ArithmeticException\n  - MissingResourceExecption\n  - ClassNotFoundException\n- 这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理\n- 这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常发生\n- Error 和 Exception 的区别\n  - Error 通常是灾难性的致命错误，是程序无法控制和处理的，当出现时，JVM 一般会选择终止线程\n  - Exception 通常情况下是可以被程序处理的，并且在程序中应该尽可能的处理\n\n## 异常处理机制\n\n异常处理关键字：`try`, `catch`, `finally`, `throw`, `throws`\n\n### 捕获异常\n\n```java\ntry{\n    // try 监控区域\n}catch(想要捕获的异常){\n    // 捕获异常后的执行语句\n}finally{\n    // 无论是否捕获到异常都会执行\n}\n```\n\n如果要捕获多个异常，要按照异常包含关系从小到大捕获，否则会报错\n\n比如\n\n```java\ntry{\n    // try 监控区域\n}catch(Exception e){\n    // 捕获异常后的执行语句\n}catch(Throwable t){\n    // 这段语句不能与上一段捕获语句交换位置\n}finally{\n    // 无论是否捕获到异常都会执行\n}\n```\n\n### 抛出异常\n\n假设在一个方法中无法处理异常，可以将其抛出\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        try{\n            new Test().test(1,0); //方法将异常抛出于此\n        }catch(ArithmeticException e){ //捕获到异常\n            //处理异常\n        }\n    }\n    \n    public void test(int a, int b) throws ArithmeticException{ // 可能出现的异常\n        if(b==0){ // 判断可能发生异常\n            throw new ArithmeticException(); //主动将异常抛出\n        }\n    }\n}\n```\n\n## 自定义异常\n\n以下代码自定义了一个异常\n\n```java\npublic class MyException extends Exception{ // 自定义异常需要继承自 Exception 或更高的父类\n    private int detail;\n\n    public MyException(int detail) { //构造方法，对 detail 赋值\n        this.detail = detail;\n    }\n\n    @Override\n    public String toString() { //来自父类Object的方法，将类的信息转换为字符串\n        return \"MyException{\" +  //这里相当于把这个异常信息转换成了字符串便于打印\n                \"detail=\" + detail +\n                '}';\n    }\n}\n\n```\n\n下面是测试代码\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        try {\n            new Test().test(11); //异常抛出于此\n        } catch (MyException e) { //捕获异常信息 e，也就是 toString 的返回值\n            System.out.println(e); //打印异常信息\n        }\n    }\n\n    static void test(int a) throws MyException {\n        System.out.println(\"传入的参数为：\" + a);\n        if (a > 10){ //这里将判断是否异常\n            throw new MyException(a); //异常则 new 一个异常类，将其初始化为a，抛出到上层\n        }\n        System.out.println(\"OK\");\n    }\n}\n```\n\n## 实际应用\n\n- 处理运行异常时，采用逻辑去合理规避同时辅助`try`+`catch`处理\n- 多重`catch`块后面，可以加一个`catch(Exception e)`来处理可能会被遗漏的异常\n- 对于不确定的代码，也可以加上`try`+`catch`，处理潜在的异常\n- 尽量去处理异常，切记只是简单的调用`printStackTrace()`去打印输出\n- 具体如何处理异常，需要根据不同的业务需求和异常类型去确定\n- 尽量添加`finally`语句块去释放占用资源","slug":"Java-note-7","published":1,"updated":"2021-08-25T13:44:03.076Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleinv000ckwvj0dso97oo","content":"<h2 id=\"Exception-和-Error\"><a href=\"#Exception-和-Error\" class=\"headerlink\" title=\"Exception 和 Error\"></a>Exception 和 Error</h2><ul>\n<li>检查性异常：比如用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li>\n<li>运行时异常：运行时异常是可能被程序员避免的异常。于检查性异常相反，运行时异常可以在编译时被忽略</li>\n<li>错误：错误不是异常，而是脱离程序员控制的问题。错误在打吗中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们是编译也检查不到的</li>\n</ul>\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><ul>\n<li>Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写这所执行的操作无关</li>\n<li>Java 虚拟机运行错误（VirtualMachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 <strong>OutOfMenmoryError</strong>。这些异常发生时，JVM 一般会选择终止线程</li>\n<li>在 JVM 试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况</li>\n</ul>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><ul>\n<li>在 Exception 分支中有一个重要的子类 RuntimeException（运行时异常）<ul>\n<li>ArrayIndexOutOfBoundsException</li>\n<li>NullPointerException</li>\n<li>ArithmeticException</li>\n<li>MissingResourceExecption</li>\n<li>ClassNotFoundException</li>\n</ul>\n</li>\n<li>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理</li>\n<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常发生</li>\n<li>Error 和 Exception 的区别<ul>\n<li>Error 通常是灾难性的致命错误，是程序无法控制和处理的，当出现时，JVM 一般会选择终止线程</li>\n<li>Exception 通常情况下是可以被程序处理的，并且在程序中应该尽可能的处理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"异常处理机制\"><a href=\"#异常处理机制\" class=\"headerlink\" title=\"异常处理机制\"></a>异常处理机制</h2><p>异常处理关键字：<code>try</code>, <code>catch</code>, <code>finally</code>, <code>throw</code>, <code>throws</code></p>\n<h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// try 监控区域</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>想要捕获的异常<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 捕获异常后的执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 无论是否捕获到异常都会执行</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>如果要捕获多个异常，要按照异常包含关系从小到大捕获，否则会报错</p>\n<p>比如</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// try 监控区域</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 捕获异常后的执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 这段语句不能与上一段捕获语句交换位置</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 无论是否捕获到异常都会执行</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><p>假设在一个方法中无法处理异常，可以将其抛出</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//方法将异常抛出于此</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//捕获到异常</span>\n            <span class=\"token comment\">//处理异常</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 可能出现的异常</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断可能发生异常</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//主动将异常抛出</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><p>以下代码自定义了一个异常</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 自定义异常需要继承自 Exception 或更高的父类</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> detail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> detail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//构造方法，对 detail 赋值</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>detail <span class=\"token operator\">=</span> detail<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//来自父类Object的方法，将类的信息转换为字符串</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"MyException&#123;\"</span> <span class=\"token operator\">+</span>  <span class=\"token comment\">//这里相当于把这个异常信息转换成了字符串便于打印</span>\n                <span class=\"token string\">\"detail=\"</span> <span class=\"token operator\">+</span> detail <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n\n<p>下面是测试代码</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//异常抛出于此</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//捕获异常信息 e，也就是 toString 的返回值</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//打印异常信息</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MyException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的参数为：\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//这里将判断是否异常</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//异常则 new 一个异常类，将其初始化为a，抛出到上层</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><ul>\n<li>处理运行异常时，采用逻辑去合理规避同时辅助<code>try</code>+<code>catch</code>处理</li>\n<li>多重<code>catch</code>块后面，可以加一个<code>catch(Exception e)</code>来处理可能会被遗漏的异常</li>\n<li>对于不确定的代码，也可以加上<code>try</code>+<code>catch</code>，处理潜在的异常</li>\n<li>尽量去处理异常，切记只是简单的调用<code>printStackTrace()</code>去打印输出</li>\n<li>具体如何处理异常，需要根据不同的业务需求和异常类型去确定</li>\n<li>尽量添加<code>finally</code>语句块去释放占用资源</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Exception-和-Error\"><a href=\"#Exception-和-Error\" class=\"headerlink\" title=\"Exception 和 Error\"></a>Exception 和 Error</h2><ul>\n<li>检查性异常：比如用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件时，一个异常就发生了，这些异常在编译时不能被简单的忽略</li>\n<li>运行时异常：运行时异常是可能被程序员避免的异常。于检查性异常相反，运行时异常可以在编译时被忽略</li>\n<li>错误：错误不是异常，而是脱离程序员控制的问题。错误在打吗中通常被忽略。例如，当栈溢出时，一个错误就发生了，它们是编译也检查不到的</li>\n</ul>\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><ul>\n<li>Error 类对象由 Java 虚拟机生成并抛出，大多数错误与代码编写这所执行的操作无关</li>\n<li>Java 虚拟机运行错误（VirtualMachineError），当 JVM 不再有继续执行操作所需的内存资源时，将出现 <strong>OutOfMenmoryError</strong>。这些异常发生时，JVM 一般会选择终止线程</li>\n<li>在 JVM 试图执行应用时，如类定义错误（NoClassDefFoundError）、链接错误（LinkageError）。这些错误时不可查的，因为它们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况</li>\n</ul>\n<h3 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h3><ul>\n<li>在 Exception 分支中有一个重要的子类 RuntimeException（运行时异常）<ul>\n<li>ArrayIndexOutOfBoundsException</li>\n<li>NullPointerException</li>\n<li>ArithmeticException</li>\n<li>MissingResourceExecption</li>\n<li>ClassNotFoundException</li>\n</ul>\n</li>\n<li>这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理</li>\n<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常发生</li>\n<li>Error 和 Exception 的区别<ul>\n<li>Error 通常是灾难性的致命错误，是程序无法控制和处理的，当出现时，JVM 一般会选择终止线程</li>\n<li>Exception 通常情况下是可以被程序处理的，并且在程序中应该尽可能的处理</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"异常处理机制\"><a href=\"#异常处理机制\" class=\"headerlink\" title=\"异常处理机制\"></a>异常处理机制</h2><p>异常处理关键字：<code>try</code>, <code>catch</code>, <code>finally</code>, <code>throw</code>, <code>throws</code></p>\n<h3 id=\"捕获异常\"><a href=\"#捕获异常\" class=\"headerlink\" title=\"捕获异常\"></a>捕获异常</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// try 监控区域</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>想要捕获的异常<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 捕获异常后的执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 无论是否捕获到异常都会执行</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>如果要捕获多个异常，要按照异常包含关系从小到大捕获，否则会报错</p>\n<p>比如</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// try 监控区域</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 捕获异常后的执行语句</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 这段语句不能与上一段捕获语句交换位置</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">finally</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 无论是否捕获到异常都会执行</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><p>假设在一个方法中无法处理异常，可以将其抛出</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//方法将异常抛出于此</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ArithmeticException</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//捕获到异常</span>\n            <span class=\"token comment\">//处理异常</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 可能出现的异常</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断可能发生异常</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArithmeticException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//主动将异常抛出</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h2><p>以下代码自定义了一个异常</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 自定义异常需要继承自 Exception 或更高的父类</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> detail<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> detail<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//构造方法，对 detail 赋值</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>detail <span class=\"token operator\">=</span> detail<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//来自父类Object的方法，将类的信息转换为字符串</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"MyException&#123;\"</span> <span class=\"token operator\">+</span>  <span class=\"token comment\">//这里相当于把这个异常信息转换成了字符串便于打印</span>\n                <span class=\"token string\">\"detail=\"</span> <span class=\"token operator\">+</span> detail <span class=\"token operator\">+</span>\n                <span class=\"token string\">'&#125;'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n</code></pre>\n\n<p>下面是测试代码</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//异常抛出于此</span>\n        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">MyException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//捕获异常信息 e，也就是 toString 的返回值</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//打印异常信息</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">MyException</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"传入的参数为：\"</span> <span class=\"token operator\">+</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//这里将判断是否异常</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyException</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//异常则 new 一个异常类，将其初始化为a，抛出到上层</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"OK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><ul>\n<li>处理运行异常时，采用逻辑去合理规避同时辅助<code>try</code>+<code>catch</code>处理</li>\n<li>多重<code>catch</code>块后面，可以加一个<code>catch(Exception e)</code>来处理可能会被遗漏的异常</li>\n<li>对于不确定的代码，也可以加上<code>try</code>+<code>catch</code>，处理潜在的异常</li>\n<li>尽量去处理异常，切记只是简单的调用<code>printStackTrace()</code>去打印输出</li>\n<li>具体如何处理异常，需要根据不同的业务需求和异常类型去确定</li>\n<li>尽量添加<code>finally</code>语句块去释放占用资源</li>\n</ul>\n"},{"title":"被SSL搞疯了","date":"2021-08-18T03:51:50.000Z","_content":"\n## SOS要死了要死了！！\n\n之前花了大力气搞了个云服务器，把部署环境都装好了，也部署成功了，然后想着给网站整个SSL，结果没整明白，一通瞎搞最后终于在网址栏上看见了那个熟悉的小锁，然后以为这就结束了，结果跑到又拍云整个CDN回来又发现网站无法访问了，不知道发生了什么，有无懂行的帮一下啊QAQ！！\n\n***\n\n自己折腾了半天发现果然还是托管到GitHub上香，直接进行一个摆烂。\n\n还有就是现在我在腾讯云上也注册了一个账号，到时候也玩玩这边的服务器，看看跟阿里那边有啥不同的体验，网站果然还是挂在GitHub上好，访问速度什么的，~~建议科学上网~~，心诚则灵（bushi）\n\n![1629272544-13552](https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/1629272544-13552.jpg)\n\n***\n\n#### 不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\n\nrun了run了。\n","source":"_posts/SSL-makes-me-crazy-md.md","raw":"---\ntitle: 被SSL搞疯了\ndate: 2021-08-18 11:51:50\ntags: \n  - 博客搭建\n  - SSL\ncategories:\n  - 牢骚向\n---\n\n## SOS要死了要死了！！\n\n之前花了大力气搞了个云服务器，把部署环境都装好了，也部署成功了，然后想着给网站整个SSL，结果没整明白，一通瞎搞最后终于在网址栏上看见了那个熟悉的小锁，然后以为这就结束了，结果跑到又拍云整个CDN回来又发现网站无法访问了，不知道发生了什么，有无懂行的帮一下啊QAQ！！\n\n***\n\n自己折腾了半天发现果然还是托管到GitHub上香，直接进行一个摆烂。\n\n还有就是现在我在腾讯云上也注册了一个账号，到时候也玩玩这边的服务器，看看跟阿里那边有啥不同的体验，网站果然还是挂在GitHub上好，访问速度什么的，~~建议科学上网~~，心诚则灵（bushi）\n\n![1629272544-13552](https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/1629272544-13552.jpg)\n\n***\n\n#### 不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\n\nrun了run了。\n","slug":"SSL-makes-me-crazy-md","published":1,"updated":"2021-08-21T14:31:28.438Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleinw000dkwvjbae760rq","content":"<h2 id=\"SOS要死了要死了！！\"><a href=\"#SOS要死了要死了！！\" class=\"headerlink\" title=\"SOS要死了要死了！！\"></a>SOS要死了要死了！！</h2><p>之前花了大力气搞了个云服务器，把部署环境都装好了，也部署成功了，然后想着给网站整个SSL，结果没整明白，一通瞎搞最后终于在网址栏上看见了那个熟悉的小锁，然后以为这就结束了，结果跑到又拍云整个CDN回来又发现网站无法访问了，不知道发生了什么，有无懂行的帮一下啊QAQ！！</p>\n<hr>\n<p>自己折腾了半天发现果然还是托管到GitHub上香，直接进行一个摆烂。</p>\n<p>还有就是现在我在腾讯云上也注册了一个账号，到时候也玩玩这边的服务器，看看跟阿里那边有啥不同的体验，网站果然还是挂在GitHub上好，访问速度什么的，<del>建议科学上网</del>，心诚则灵（bushi）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/1629272544-13552.jpg\" alt=\"1629272544-13552\"></p>\n<hr>\n<h4 id=\"不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\"><a href=\"#不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\" class=\"headerlink\" title=\"不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\"></a>不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！</h4><p>run了run了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"SOS要死了要死了！！\"><a href=\"#SOS要死了要死了！！\" class=\"headerlink\" title=\"SOS要死了要死了！！\"></a>SOS要死了要死了！！</h2><p>之前花了大力气搞了个云服务器，把部署环境都装好了，也部署成功了，然后想着给网站整个SSL，结果没整明白，一通瞎搞最后终于在网址栏上看见了那个熟悉的小锁，然后以为这就结束了，结果跑到又拍云整个CDN回来又发现网站无法访问了，不知道发生了什么，有无懂行的帮一下啊QAQ！！</p>\n<hr>\n<p>自己折腾了半天发现果然还是托管到GitHub上香，直接进行一个摆烂。</p>\n<p>还有就是现在我在腾讯云上也注册了一个账号，到时候也玩玩这边的服务器，看看跟阿里那边有啥不同的体验，网站果然还是挂在GitHub上好，访问速度什么的，<del>建议科学上网</del>，心诚则灵（bushi）</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/1629272544-13552.jpg\" alt=\"1629272544-13552\"></p>\n<hr>\n<h4 id=\"不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\"><a href=\"#不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\" class=\"headerlink\" title=\"不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！\"></a>不管了，还有一大堆破事没整完，各种报告和课题要写，懒得管这服务器了，寄！</h4><p>run了run了。</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2021-07-28T03:55:51.206Z","updated":"1985-10-26T08:15:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleinx000hkwvj5o277t7e","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo new <span class=\"token string\">\"My New Post\"</span></code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo server</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo generate</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><pre class=\"language-bash\" data-language=\"bash\"><code class=\"language-bash\">$ hexo deploy</code></pre>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"博客搭建过程与心得","date":"2021-08-05T12:23:48.000Z","_content":"\n## 第一次自己搭建博客\n\n现在是暑假嘛，反正没啥事干，正好在网上看见不少个人博客搭建教程，就想着自己搭着玩玩，于是便选择了[Hexo](https://hexo.io/zh-cn/)框架，看着教程和文档一步一步搭，不过居然比我想象中简单，~~有手就行~~，这里就大概讲一讲本人搭建该博客的过程和体会吧。（注意：这不是教程，只是把本人搭建过程记录一下而已，~~怕我忘掉~~，具体过程建议百度）\n\n### 本地环境搭建\n\n***\n\n这个不多说，先把[Node.js ](https://nodejs.org/en/)下好安装，在终端里输入`node --version`检验是否安装成功，好，搞定。这个时候可以使用Node.js带的包管理工具`npm`安装Hexo工具（国内使用`npm`速度有点慢，**可以考虑换`taobao`源**），很简单，一行命令足矣。=￣ω￣=\n\n```sh\nnpm install hexo-cli -g\n```\n\n### 远程仓库搭建\n\n***\n\n这玩意都不用搭建，去~~知名同性交友网站~~[GitHub](https://github.com/)上`create`就完事了，省时省力又省钱，仓库命名记得设为`用户名.github.io`，这个就是博客的域名了，自定义域名？懒得注册，懒得备案，先稍稍吧（国内访问GitHub速度不稳定，**嫌慢可以考虑[Gitee](https://gitee.com/)试试**）。好了远程也搞定了，现在就只要把本地和远程关联起来部署上去就好了，好耶！！！！\\\\^o^/\n\n> Git与GitHub的使用是基本功，而且这个网上教程一大把，搭个博客也不需要对此理解多深，会用就行(。・∀・)ノ\n\n### 本地博客搭建\n\n***\n\n之前不是在本地安装了Hexo吗，现在利用这个工具，选择一个合适的目录，在终端中输入命令\n\n```sh\nhexo init 你想为你的Hexo工作目录取的名字\ncd 你想为你的Hexo工作目录取的名字\nnpm install\n# 我一般写成hexo s比较省事\nhexo server\n```\n\n现在博客已经在本地跑起来了，默认通过`localhost:4000`这个端口访问，一般用于本地预览。\n\n此时的博客使用的是默认的主题，叫`landscape`（好像是这个名来着），有点太普通了？直接网上搜其他更好康的主题，推荐一波我用的主题[Yun](https://github.com/YunYouJun/hexo-theme-yun)（没收广告费，我是真觉得不戳）。把主题安装到`Hexo工作目录/themes`下，修改`Hexo工作目录`下的`_config.yml`配置文件，找到`theme`项，更改为\n\n```yaml\ntheme: yun\n# 记得写所要使用的主题的文件夹名\n```\n\n> 事实说明，一个好看的主题可以极大的提升博客站长完善与维护博客的心理体验\n\n如果想要对主题进行更多配置的话建议自行搜索方法或看主题的制作者是否提供相关文档，比如我所用的主题就有[Yun主题使用指南](https://yun.yunyoujun.cn/guide/)手把手教你配置。\n\n`_config.yml`中还可以修改许多配置，可以将自己的博客进行各种自定义，建议看[官方文档](https://hexo.io/zh-cn/docs/)好好学。\n\n各项配置完成后，现在可以生成将会被展示出来的静态文件了，在终端中输入\n\n```sh\nhexo clean\n# g 就是 generate 的缩写\nhexo g\n```\n\n> 如果注意观察文件夹，会发现，当输入`hexo clean`命令后，目录下的`public`子目录会被删除，输入`hexo g`命令后，该子目录又会重新生成，这是因为该子目录下存放的就是将会在网页上被浏览的静态文件，当对博客进行修改后，先`clean`掉原本的静态文件，在`generate`新的静态文件，这样就完成了对博客的更新。\n\n如果还想在本地预览的话就接着输入\n\n```sh\nhexo s\n```\n\nOK！现在本地博客已经搞定了，开始着手把它部署到远端吧！\\\\(@^0^@)/\n\n### 将本地文件与远程仓库建立关联\n\n***\n\n基本的git操作了，直接在工作目录下\n\n```sh\ngit init # 此时这个目录就被初始化成了一个Git仓库\n```\n\n然后可以建立一个分支\n\n```sh\ngit checkout -b hexo # 表示建立了一个名叫hexo的分支\n```\n\n这个分支我将用于备份博客的源代码文件。（本来没有备份的习惯，但这里参考了[教你如何从零开始搭建一个属于自己的网站 ](https://www.yunyoujun.cn/share/how-to-build-your-site/)的教程，就也学着做了）\n\n将这个本地的Git仓库与之前在GitHub上搭建的远程仓库建立关联\n\n```sh\ngit remote add origin https://github.com/用户名/用户名.github.io\n```\n\n安装Hexo的部署插件`hexo-deployer-git`\n\n```sh\nnpm install hexo-deployer-git\n```\n\n在`_config.yml`配置文件中的`deployer`项中修改\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git # 远程仓库的网址\n  branch: main # 分支名，表示将要部署的分支\n  message: # 可选填，对更新部署的说明\n```\n\n至此，本地与远程关联建立完成！\n\n### 部署与备份\n\n***\n\n部署很简单，之前部署安装了`hexo-deployer-git`这个插件吗，生成静态文件后直接输入命令\n\n```sh\nhexo d # d 是 deploy 的缩写\n```\n\n完成部署！\n\n然后还可以对网站源文件上传到远端进行备份，就利用之前建立的分支，同样是基本的git命令\n\n```sh\n# git代码提交老三样\ngit add -A\ngit commit -m \"xxx\" # 养成备注说明的好习惯\ngit push # 第一次推送记得指定默认分支\n# git push --set-upstream origin hexo\n```\n\nohhhhhh！！！现在个人博客已经搭建完毕了！用浏览器访问看看⑧！！ヽ(✿ﾟ▽ﾟ)ノ\n\n### 个人感受\n\n***\n\n其实搭建个人博客是受了b站up主[CodeSheep](https://space.bilibili.com/384068749/)的某期视频[手把手教你从0开始搭建自己的个人博客 ](https://www.bilibili.com/video/BV1Yb411a7ty)的影响，就自己搭着看看，一路做下来，只能说很多事情唯一的难点就是 _Just do it_ 了，自己搭建博客之前总觉得这玩意涉及了一堆看不懂的技术栈，我这种又菜又懒的辣鸡肯定搭不出来，结果当自己真正上手做了才发现并没有想象的那么夸张，许多东西都是很基础的命令，比如简单的git命令。真正遇到问题了也大多可以通过自己搜索解决，Hexo官方与我所使用的主题也提供了详细的配置文档供我参考，实际过程中并没有遇到什么无法解决的问题，还学到了不少前端知识，~~爷真nb~~。希望以后遇到新事物新技术是也能冷静下来好好研究吧，这里总结一下搭建时的心得经验吧：\n\n+ **不要怕，Just do it! 迈出第一步就成功了一半**\n+ 记得提前搭建好本地环境，比如Node.js，git等工具\n+ 搞清楚每一步要在哪一个目录下进行，各种链接与路径要弄清楚\n+ 出问题了别紧张，看清楚报错信息，网上搜一般都可以搜到解决办法\n+ 搜到解决办法不要看见什么就用什么，多看几个人的回答，找大家都提到的方法成功率更高\n+ 不知道下一步怎么做了就看相关文档，文档讲的很详细\n\n***\n\n### 以上，第一篇正经博客\n\n感谢支持o(\\*￣▽￣\\*)o\n","source":"_posts/blog-generating-sharing.md","raw":"---\ntitle: 博客搭建过程与心得\ndate: 2021-08-05 20:23:48\ntags:\n  - Hexo\n  - 博客搭建\n  - 分享\ncategories:\n  - 技术向\n---\n\n## 第一次自己搭建博客\n\n现在是暑假嘛，反正没啥事干，正好在网上看见不少个人博客搭建教程，就想着自己搭着玩玩，于是便选择了[Hexo](https://hexo.io/zh-cn/)框架，看着教程和文档一步一步搭，不过居然比我想象中简单，~~有手就行~~，这里就大概讲一讲本人搭建该博客的过程和体会吧。（注意：这不是教程，只是把本人搭建过程记录一下而已，~~怕我忘掉~~，具体过程建议百度）\n\n### 本地环境搭建\n\n***\n\n这个不多说，先把[Node.js ](https://nodejs.org/en/)下好安装，在终端里输入`node --version`检验是否安装成功，好，搞定。这个时候可以使用Node.js带的包管理工具`npm`安装Hexo工具（国内使用`npm`速度有点慢，**可以考虑换`taobao`源**），很简单，一行命令足矣。=￣ω￣=\n\n```sh\nnpm install hexo-cli -g\n```\n\n### 远程仓库搭建\n\n***\n\n这玩意都不用搭建，去~~知名同性交友网站~~[GitHub](https://github.com/)上`create`就完事了，省时省力又省钱，仓库命名记得设为`用户名.github.io`，这个就是博客的域名了，自定义域名？懒得注册，懒得备案，先稍稍吧（国内访问GitHub速度不稳定，**嫌慢可以考虑[Gitee](https://gitee.com/)试试**）。好了远程也搞定了，现在就只要把本地和远程关联起来部署上去就好了，好耶！！！！\\\\^o^/\n\n> Git与GitHub的使用是基本功，而且这个网上教程一大把，搭个博客也不需要对此理解多深，会用就行(。・∀・)ノ\n\n### 本地博客搭建\n\n***\n\n之前不是在本地安装了Hexo吗，现在利用这个工具，选择一个合适的目录，在终端中输入命令\n\n```sh\nhexo init 你想为你的Hexo工作目录取的名字\ncd 你想为你的Hexo工作目录取的名字\nnpm install\n# 我一般写成hexo s比较省事\nhexo server\n```\n\n现在博客已经在本地跑起来了，默认通过`localhost:4000`这个端口访问，一般用于本地预览。\n\n此时的博客使用的是默认的主题，叫`landscape`（好像是这个名来着），有点太普通了？直接网上搜其他更好康的主题，推荐一波我用的主题[Yun](https://github.com/YunYouJun/hexo-theme-yun)（没收广告费，我是真觉得不戳）。把主题安装到`Hexo工作目录/themes`下，修改`Hexo工作目录`下的`_config.yml`配置文件，找到`theme`项，更改为\n\n```yaml\ntheme: yun\n# 记得写所要使用的主题的文件夹名\n```\n\n> 事实说明，一个好看的主题可以极大的提升博客站长完善与维护博客的心理体验\n\n如果想要对主题进行更多配置的话建议自行搜索方法或看主题的制作者是否提供相关文档，比如我所用的主题就有[Yun主题使用指南](https://yun.yunyoujun.cn/guide/)手把手教你配置。\n\n`_config.yml`中还可以修改许多配置，可以将自己的博客进行各种自定义，建议看[官方文档](https://hexo.io/zh-cn/docs/)好好学。\n\n各项配置完成后，现在可以生成将会被展示出来的静态文件了，在终端中输入\n\n```sh\nhexo clean\n# g 就是 generate 的缩写\nhexo g\n```\n\n> 如果注意观察文件夹，会发现，当输入`hexo clean`命令后，目录下的`public`子目录会被删除，输入`hexo g`命令后，该子目录又会重新生成，这是因为该子目录下存放的就是将会在网页上被浏览的静态文件，当对博客进行修改后，先`clean`掉原本的静态文件，在`generate`新的静态文件，这样就完成了对博客的更新。\n\n如果还想在本地预览的话就接着输入\n\n```sh\nhexo s\n```\n\nOK！现在本地博客已经搞定了，开始着手把它部署到远端吧！\\\\(@^0^@)/\n\n### 将本地文件与远程仓库建立关联\n\n***\n\n基本的git操作了，直接在工作目录下\n\n```sh\ngit init # 此时这个目录就被初始化成了一个Git仓库\n```\n\n然后可以建立一个分支\n\n```sh\ngit checkout -b hexo # 表示建立了一个名叫hexo的分支\n```\n\n这个分支我将用于备份博客的源代码文件。（本来没有备份的习惯，但这里参考了[教你如何从零开始搭建一个属于自己的网站 ](https://www.yunyoujun.cn/share/how-to-build-your-site/)的教程，就也学着做了）\n\n将这个本地的Git仓库与之前在GitHub上搭建的远程仓库建立关联\n\n```sh\ngit remote add origin https://github.com/用户名/用户名.github.io\n```\n\n安装Hexo的部署插件`hexo-deployer-git`\n\n```sh\nnpm install hexo-deployer-git\n```\n\n在`_config.yml`配置文件中的`deployer`项中修改\n\n```yaml\ndeploy:\n  type: git\n  repo: https://github.com/用户名/用户名.github.io.git # 远程仓库的网址\n  branch: main # 分支名，表示将要部署的分支\n  message: # 可选填，对更新部署的说明\n```\n\n至此，本地与远程关联建立完成！\n\n### 部署与备份\n\n***\n\n部署很简单，之前部署安装了`hexo-deployer-git`这个插件吗，生成静态文件后直接输入命令\n\n```sh\nhexo d # d 是 deploy 的缩写\n```\n\n完成部署！\n\n然后还可以对网站源文件上传到远端进行备份，就利用之前建立的分支，同样是基本的git命令\n\n```sh\n# git代码提交老三样\ngit add -A\ngit commit -m \"xxx\" # 养成备注说明的好习惯\ngit push # 第一次推送记得指定默认分支\n# git push --set-upstream origin hexo\n```\n\nohhhhhh！！！现在个人博客已经搭建完毕了！用浏览器访问看看⑧！！ヽ(✿ﾟ▽ﾟ)ノ\n\n### 个人感受\n\n***\n\n其实搭建个人博客是受了b站up主[CodeSheep](https://space.bilibili.com/384068749/)的某期视频[手把手教你从0开始搭建自己的个人博客 ](https://www.bilibili.com/video/BV1Yb411a7ty)的影响，就自己搭着看看，一路做下来，只能说很多事情唯一的难点就是 _Just do it_ 了，自己搭建博客之前总觉得这玩意涉及了一堆看不懂的技术栈，我这种又菜又懒的辣鸡肯定搭不出来，结果当自己真正上手做了才发现并没有想象的那么夸张，许多东西都是很基础的命令，比如简单的git命令。真正遇到问题了也大多可以通过自己搜索解决，Hexo官方与我所使用的主题也提供了详细的配置文档供我参考，实际过程中并没有遇到什么无法解决的问题，还学到了不少前端知识，~~爷真nb~~。希望以后遇到新事物新技术是也能冷静下来好好研究吧，这里总结一下搭建时的心得经验吧：\n\n+ **不要怕，Just do it! 迈出第一步就成功了一半**\n+ 记得提前搭建好本地环境，比如Node.js，git等工具\n+ 搞清楚每一步要在哪一个目录下进行，各种链接与路径要弄清楚\n+ 出问题了别紧张，看清楚报错信息，网上搜一般都可以搜到解决办法\n+ 搜到解决办法不要看见什么就用什么，多看几个人的回答，找大家都提到的方法成功率更高\n+ 不知道下一步怎么做了就看相关文档，文档讲的很详细\n\n***\n\n### 以上，第一篇正经博客\n\n感谢支持o(\\*￣▽￣\\*)o\n","slug":"blog-generating-sharing","published":1,"updated":"2021-08-21T14:31:18.552Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleiny000jkwvjh06ke2mj","content":"<h2 id=\"第一次自己搭建博客\"><a href=\"#第一次自己搭建博客\" class=\"headerlink\" title=\"第一次自己搭建博客\"></a>第一次自己搭建博客</h2><p>现在是暑假嘛，反正没啥事干，正好在网上看见不少个人博客搭建教程，就想着自己搭着玩玩，于是便选择了<a href=\"https://hexo.io/zh-cn/\">Hexo</a>框架，看着教程和文档一步一步搭，不过居然比我想象中简单，<del>有手就行</del>，这里就大概讲一讲本人搭建该博客的过程和体会吧。（注意：这不是教程，只是把本人搭建过程记录一下而已，<del>怕我忘掉</del>，具体过程建议百度）</p>\n<h3 id=\"本地环境搭建\"><a href=\"#本地环境搭建\" class=\"headerlink\" title=\"本地环境搭建\"></a>本地环境搭建</h3><hr>\n<p>这个不多说，先把<a href=\"https://nodejs.org/en/\">Node.js </a>下好安装，在终端里输入<code>node --version</code>检验是否安装成功，好，搞定。这个时候可以使用Node.js带的包管理工具<code>npm</code>安装Hexo工具（国内使用<code>npm</code>速度有点慢，<strong>可以考虑换<code>taobao</code>源</strong>），很简单，一行命令足矣。=￣ω￣=</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">npm install hexo-cli -g</code></pre>\n\n<h3 id=\"远程仓库搭建\"><a href=\"#远程仓库搭建\" class=\"headerlink\" title=\"远程仓库搭建\"></a>远程仓库搭建</h3><hr>\n<p>这玩意都不用搭建，去<del>知名同性交友网站</del><a href=\"https://github.com/\">GitHub</a>上<code>create</code>就完事了，省时省力又省钱，仓库命名记得设为<code>用户名.github.io</code>，这个就是博客的域名了，自定义域名？懒得注册，懒得备案，先稍稍吧（国内访问GitHub速度不稳定，<strong>嫌慢可以考虑<a href=\"https://gitee.com/\">Gitee</a>试试</strong>）。好了远程也搞定了，现在就只要把本地和远程关联起来部署上去就好了，好耶！！！！\\^o^/</p>\n<blockquote>\n<p>Git与GitHub的使用是基本功，而且这个网上教程一大把，搭个博客也不需要对此理解多深，会用就行(。・∀・)ノ</p>\n</blockquote>\n<h3 id=\"本地博客搭建\"><a href=\"#本地博客搭建\" class=\"headerlink\" title=\"本地博客搭建\"></a>本地博客搭建</h3><hr>\n<p>之前不是在本地安装了Hexo吗，现在利用这个工具，选择一个合适的目录，在终端中输入命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo init 你想为你的Hexo工作目录取的名字\ncd 你想为你的Hexo工作目录取的名字\nnpm install\n# 我一般写成hexo s比较省事\nhexo server</code></pre>\n\n<p>现在博客已经在本地跑起来了，默认通过<code>localhost:4000</code>这个端口访问，一般用于本地预览。</p>\n<p>此时的博客使用的是默认的主题，叫<code>landscape</code>（好像是这个名来着），有点太普通了？直接网上搜其他更好康的主题，推荐一波我用的主题<a href=\"https://github.com/YunYouJun/hexo-theme-yun\">Yun</a>（没收广告费，我是真觉得不戳）。把主题安装到<code>Hexo工作目录/themes</code>下，修改<code>Hexo工作目录</code>下的<code>_config.yml</code>配置文件，找到<code>theme</code>项，更改为</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> yun\n<span class=\"token comment\"># 记得写所要使用的主题的文件夹名</span></code></pre>\n\n<blockquote>\n<p>事实说明，一个好看的主题可以极大的提升博客站长完善与维护博客的心理体验</p>\n</blockquote>\n<p>如果想要对主题进行更多配置的话建议自行搜索方法或看主题的制作者是否提供相关文档，比如我所用的主题就有<a href=\"https://yun.yunyoujun.cn/guide/\">Yun主题使用指南</a>手把手教你配置。</p>\n<p><code>_config.yml</code>中还可以修改许多配置，可以将自己的博客进行各种自定义，建议看<a href=\"https://hexo.io/zh-cn/docs/\">官方文档</a>好好学。</p>\n<p>各项配置完成后，现在可以生成将会被展示出来的静态文件了，在终端中输入</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo clean\n# g 就是 generate 的缩写\nhexo g</code></pre>\n\n<blockquote>\n<p>如果注意观察文件夹，会发现，当输入<code>hexo clean</code>命令后，目录下的<code>public</code>子目录会被删除，输入<code>hexo g</code>命令后，该子目录又会重新生成，这是因为该子目录下存放的就是将会在网页上被浏览的静态文件，当对博客进行修改后，先<code>clean</code>掉原本的静态文件，在<code>generate</code>新的静态文件，这样就完成了对博客的更新。</p>\n</blockquote>\n<p>如果还想在本地预览的话就接着输入</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo s</code></pre>\n\n<p>OK！现在本地博客已经搞定了，开始着手把它部署到远端吧！\\(@^0^@)/</p>\n<h3 id=\"将本地文件与远程仓库建立关联\"><a href=\"#将本地文件与远程仓库建立关联\" class=\"headerlink\" title=\"将本地文件与远程仓库建立关联\"></a>将本地文件与远程仓库建立关联</h3><hr>\n<p>基本的git操作了，直接在工作目录下</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git init # 此时这个目录就被初始化成了一个Git仓库</code></pre>\n\n<p>然后可以建立一个分支</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git checkout -b hexo # 表示建立了一个名叫hexo的分支</code></pre>\n\n<p>这个分支我将用于备份博客的源代码文件。（本来没有备份的习惯，但这里参考了<a href=\"https://www.yunyoujun.cn/share/how-to-build-your-site/\">教你如何从零开始搭建一个属于自己的网站 </a>的教程，就也学着做了）</p>\n<p>将这个本地的Git仓库与之前在GitHub上搭建的远程仓库建立关联</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;用户名&#x2F;用户名.github.io</code></pre>\n\n<p>安装Hexo的部署插件<code>hexo-deployer-git</code></p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">npm install hexo-deployer-git</code></pre>\n\n<p>在<code>_config.yml</code>配置文件中的<code>deployer</code>项中修改</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/用户名/用户名.github.io.git <span class=\"token comment\"># 远程仓库的网址</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main <span class=\"token comment\"># 分支名，表示将要部署的分支</span>\n  <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 可选填，对更新部署的说明</span></code></pre>\n\n<p>至此，本地与远程关联建立完成！</p>\n<h3 id=\"部署与备份\"><a href=\"#部署与备份\" class=\"headerlink\" title=\"部署与备份\"></a>部署与备份</h3><hr>\n<p>部署很简单，之前部署安装了<code>hexo-deployer-git</code>这个插件吗，生成静态文件后直接输入命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo d # d 是 deploy 的缩写</code></pre>\n\n<p>完成部署！</p>\n<p>然后还可以对网站源文件上传到远端进行备份，就利用之前建立的分支，同样是基本的git命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\"># git代码提交老三样\ngit add -A\ngit commit -m &quot;xxx&quot; # 养成备注说明的好习惯\ngit push # 第一次推送记得指定默认分支\n# git push --set-upstream origin hexo</code></pre>\n\n<p>ohhhhhh！！！现在个人博客已经搭建完毕了！用浏览器访问看看⑧！！ヽ(✿ﾟ▽ﾟ)ノ</p>\n<h3 id=\"个人感受\"><a href=\"#个人感受\" class=\"headerlink\" title=\"个人感受\"></a>个人感受</h3><hr>\n<p>其实搭建个人博客是受了b站up主<a href=\"https://space.bilibili.com/384068749/\">CodeSheep</a>的某期视频<a href=\"https://www.bilibili.com/video/BV1Yb411a7ty\">手把手教你从0开始搭建自己的个人博客 </a>的影响，就自己搭着看看，一路做下来，只能说很多事情唯一的难点就是 <em>Just do it</em> 了，自己搭建博客之前总觉得这玩意涉及了一堆看不懂的技术栈，我这种又菜又懒的辣鸡肯定搭不出来，结果当自己真正上手做了才发现并没有想象的那么夸张，许多东西都是很基础的命令，比如简单的git命令。真正遇到问题了也大多可以通过自己搜索解决，Hexo官方与我所使用的主题也提供了详细的配置文档供我参考，实际过程中并没有遇到什么无法解决的问题，还学到了不少前端知识，<del>爷真nb</del>。希望以后遇到新事物新技术是也能冷静下来好好研究吧，这里总结一下搭建时的心得经验吧：</p>\n<ul>\n<li><strong>不要怕，Just do it! 迈出第一步就成功了一半</strong></li>\n<li>记得提前搭建好本地环境，比如Node.js，git等工具</li>\n<li>搞清楚每一步要在哪一个目录下进行，各种链接与路径要弄清楚</li>\n<li>出问题了别紧张，看清楚报错信息，网上搜一般都可以搜到解决办法</li>\n<li>搜到解决办法不要看见什么就用什么，多看几个人的回答，找大家都提到的方法成功率更高</li>\n<li>不知道下一步怎么做了就看相关文档，文档讲的很详细</li>\n</ul>\n<hr>\n<h3 id=\"以上，第一篇正经博客\"><a href=\"#以上，第一篇正经博客\" class=\"headerlink\" title=\"以上，第一篇正经博客\"></a>以上，第一篇正经博客</h3><p>感谢支持o(*￣▽￣*)o</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"第一次自己搭建博客\"><a href=\"#第一次自己搭建博客\" class=\"headerlink\" title=\"第一次自己搭建博客\"></a>第一次自己搭建博客</h2><p>现在是暑假嘛，反正没啥事干，正好在网上看见不少个人博客搭建教程，就想着自己搭着玩玩，于是便选择了<a href=\"https://hexo.io/zh-cn/\">Hexo</a>框架，看着教程和文档一步一步搭，不过居然比我想象中简单，<del>有手就行</del>，这里就大概讲一讲本人搭建该博客的过程和体会吧。（注意：这不是教程，只是把本人搭建过程记录一下而已，<del>怕我忘掉</del>，具体过程建议百度）</p>\n<h3 id=\"本地环境搭建\"><a href=\"#本地环境搭建\" class=\"headerlink\" title=\"本地环境搭建\"></a>本地环境搭建</h3><hr>\n<p>这个不多说，先把<a href=\"https://nodejs.org/en/\">Node.js </a>下好安装，在终端里输入<code>node --version</code>检验是否安装成功，好，搞定。这个时候可以使用Node.js带的包管理工具<code>npm</code>安装Hexo工具（国内使用<code>npm</code>速度有点慢，<strong>可以考虑换<code>taobao</code>源</strong>），很简单，一行命令足矣。=￣ω￣=</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">npm install hexo-cli -g</code></pre>\n\n<h3 id=\"远程仓库搭建\"><a href=\"#远程仓库搭建\" class=\"headerlink\" title=\"远程仓库搭建\"></a>远程仓库搭建</h3><hr>\n<p>这玩意都不用搭建，去<del>知名同性交友网站</del><a href=\"https://github.com/\">GitHub</a>上<code>create</code>就完事了，省时省力又省钱，仓库命名记得设为<code>用户名.github.io</code>，这个就是博客的域名了，自定义域名？懒得注册，懒得备案，先稍稍吧（国内访问GitHub速度不稳定，<strong>嫌慢可以考虑<a href=\"https://gitee.com/\">Gitee</a>试试</strong>）。好了远程也搞定了，现在就只要把本地和远程关联起来部署上去就好了，好耶！！！！\\^o^/</p>\n<blockquote>\n<p>Git与GitHub的使用是基本功，而且这个网上教程一大把，搭个博客也不需要对此理解多深，会用就行(。・∀・)ノ</p>\n</blockquote>\n<h3 id=\"本地博客搭建\"><a href=\"#本地博客搭建\" class=\"headerlink\" title=\"本地博客搭建\"></a>本地博客搭建</h3><hr>\n<p>之前不是在本地安装了Hexo吗，现在利用这个工具，选择一个合适的目录，在终端中输入命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo init 你想为你的Hexo工作目录取的名字\ncd 你想为你的Hexo工作目录取的名字\nnpm install\n# 我一般写成hexo s比较省事\nhexo server</code></pre>\n\n<p>现在博客已经在本地跑起来了，默认通过<code>localhost:4000</code>这个端口访问，一般用于本地预览。</p>\n<p>此时的博客使用的是默认的主题，叫<code>landscape</code>（好像是这个名来着），有点太普通了？直接网上搜其他更好康的主题，推荐一波我用的主题<a href=\"https://github.com/YunYouJun/hexo-theme-yun\">Yun</a>（没收广告费，我是真觉得不戳）。把主题安装到<code>Hexo工作目录/themes</code>下，修改<code>Hexo工作目录</code>下的<code>_config.yml</code>配置文件，找到<code>theme</code>项，更改为</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">theme</span><span class=\"token punctuation\">:</span> yun\n<span class=\"token comment\"># 记得写所要使用的主题的文件夹名</span></code></pre>\n\n<blockquote>\n<p>事实说明，一个好看的主题可以极大的提升博客站长完善与维护博客的心理体验</p>\n</blockquote>\n<p>如果想要对主题进行更多配置的话建议自行搜索方法或看主题的制作者是否提供相关文档，比如我所用的主题就有<a href=\"https://yun.yunyoujun.cn/guide/\">Yun主题使用指南</a>手把手教你配置。</p>\n<p><code>_config.yml</code>中还可以修改许多配置，可以将自己的博客进行各种自定义，建议看<a href=\"https://hexo.io/zh-cn/docs/\">官方文档</a>好好学。</p>\n<p>各项配置完成后，现在可以生成将会被展示出来的静态文件了，在终端中输入</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo clean\n# g 就是 generate 的缩写\nhexo g</code></pre>\n\n<blockquote>\n<p>如果注意观察文件夹，会发现，当输入<code>hexo clean</code>命令后，目录下的<code>public</code>子目录会被删除，输入<code>hexo g</code>命令后，该子目录又会重新生成，这是因为该子目录下存放的就是将会在网页上被浏览的静态文件，当对博客进行修改后，先<code>clean</code>掉原本的静态文件，在<code>generate</code>新的静态文件，这样就完成了对博客的更新。</p>\n</blockquote>\n<p>如果还想在本地预览的话就接着输入</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo s</code></pre>\n\n<p>OK！现在本地博客已经搞定了，开始着手把它部署到远端吧！\\(@^0^@)/</p>\n<h3 id=\"将本地文件与远程仓库建立关联\"><a href=\"#将本地文件与远程仓库建立关联\" class=\"headerlink\" title=\"将本地文件与远程仓库建立关联\"></a>将本地文件与远程仓库建立关联</h3><hr>\n<p>基本的git操作了，直接在工作目录下</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git init # 此时这个目录就被初始化成了一个Git仓库</code></pre>\n\n<p>然后可以建立一个分支</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git checkout -b hexo # 表示建立了一个名叫hexo的分支</code></pre>\n\n<p>这个分支我将用于备份博客的源代码文件。（本来没有备份的习惯，但这里参考了<a href=\"https://www.yunyoujun.cn/share/how-to-build-your-site/\">教你如何从零开始搭建一个属于自己的网站 </a>的教程，就也学着做了）</p>\n<p>将这个本地的Git仓库与之前在GitHub上搭建的远程仓库建立关联</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">git remote add origin https:&#x2F;&#x2F;github.com&#x2F;用户名&#x2F;用户名.github.io</code></pre>\n\n<p>安装Hexo的部署插件<code>hexo-deployer-git</code></p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">npm install hexo-deployer-git</code></pre>\n\n<p>在<code>_config.yml</code>配置文件中的<code>deployer</code>项中修改</p>\n<pre class=\"language-yaml\" data-language=\"yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git\n  <span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/用户名/用户名.github.io.git <span class=\"token comment\"># 远程仓库的网址</span>\n  <span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main <span class=\"token comment\"># 分支名，表示将要部署的分支</span>\n  <span class=\"token key atrule\">message</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># 可选填，对更新部署的说明</span></code></pre>\n\n<p>至此，本地与远程关联建立完成！</p>\n<h3 id=\"部署与备份\"><a href=\"#部署与备份\" class=\"headerlink\" title=\"部署与备份\"></a>部署与备份</h3><hr>\n<p>部署很简单，之前部署安装了<code>hexo-deployer-git</code>这个插件吗，生成静态文件后直接输入命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">hexo d # d 是 deploy 的缩写</code></pre>\n\n<p>完成部署！</p>\n<p>然后还可以对网站源文件上传到远端进行备份，就利用之前建立的分支，同样是基本的git命令</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\"># git代码提交老三样\ngit add -A\ngit commit -m &quot;xxx&quot; # 养成备注说明的好习惯\ngit push # 第一次推送记得指定默认分支\n# git push --set-upstream origin hexo</code></pre>\n\n<p>ohhhhhh！！！现在个人博客已经搭建完毕了！用浏览器访问看看⑧！！ヽ(✿ﾟ▽ﾟ)ノ</p>\n<h3 id=\"个人感受\"><a href=\"#个人感受\" class=\"headerlink\" title=\"个人感受\"></a>个人感受</h3><hr>\n<p>其实搭建个人博客是受了b站up主<a href=\"https://space.bilibili.com/384068749/\">CodeSheep</a>的某期视频<a href=\"https://www.bilibili.com/video/BV1Yb411a7ty\">手把手教你从0开始搭建自己的个人博客 </a>的影响，就自己搭着看看，一路做下来，只能说很多事情唯一的难点就是 <em>Just do it</em> 了，自己搭建博客之前总觉得这玩意涉及了一堆看不懂的技术栈，我这种又菜又懒的辣鸡肯定搭不出来，结果当自己真正上手做了才发现并没有想象的那么夸张，许多东西都是很基础的命令，比如简单的git命令。真正遇到问题了也大多可以通过自己搜索解决，Hexo官方与我所使用的主题也提供了详细的配置文档供我参考，实际过程中并没有遇到什么无法解决的问题，还学到了不少前端知识，<del>爷真nb</del>。希望以后遇到新事物新技术是也能冷静下来好好研究吧，这里总结一下搭建时的心得经验吧：</p>\n<ul>\n<li><strong>不要怕，Just do it! 迈出第一步就成功了一半</strong></li>\n<li>记得提前搭建好本地环境，比如Node.js，git等工具</li>\n<li>搞清楚每一步要在哪一个目录下进行，各种链接与路径要弄清楚</li>\n<li>出问题了别紧张，看清楚报错信息，网上搜一般都可以搜到解决办法</li>\n<li>搜到解决办法不要看见什么就用什么，多看几个人的回答，找大家都提到的方法成功率更高</li>\n<li>不知道下一步怎么做了就看相关文档，文档讲的很详细</li>\n</ul>\n<hr>\n<h3 id=\"以上，第一篇正经博客\"><a href=\"#以上，第一篇正经博客\" class=\"headerlink\" title=\"以上，第一篇正经博客\"></a>以上，第一篇正经博客</h3><p>感谢支持o(*￣▽￣*)o</p>\n"},{"title":"My first blog","date":"2021-07-28T04:00:08.000Z","_content":"\n## 测试用写着玩\n\n没有内容\n\n---\n\n~~~java\npublic class HelloWorld{\n    public static void main{\n        System.out.println(\"Hello World!\");\n    }\n}\n~~~\n\n","source":"_posts/My-first-blog.md","raw":"---\ntitle: My first blog\ndate: 2021-07-28 12:00:08\ntags: 博客功能测试\ncategories: 没有内容的测试文章\n---\n\n## 测试用写着玩\n\n没有内容\n\n---\n\n~~~java\npublic class HelloWorld{\n    public static void main{\n        System.out.println(\"Hello World!\");\n    }\n}\n~~~\n\n","slug":"My-first-blog","published":1,"updated":"2021-07-29T15:22:48.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleio0000nkwvjak4ig64k","content":"<h2 id=\"测试用写着玩\"><a href=\"#测试用写着玩\" class=\"headerlink\" title=\"测试用写着玩\"></a>测试用写着玩</h2><p>没有内容</p>\n<hr>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"测试用写着玩\"><a href=\"#测试用写着玩\" class=\"headerlink\" title=\"测试用写着玩\"></a>测试用写着玩</h2><p>没有内容</p>\n<hr>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloWorld</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> main<span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n"},{"title":"Java学习笔记-面向对象","date":"2021-08-24T12:42:34.000Z","_content":"\n## 面向对象\n\nObject-Oriented Programming, OOP\n\n**以类的形式组织代码，以对象的形式封装数据**\n\n三大特性：\n\n- **封装**\n- **继承**\n- **多态**\n\n## 方法回顾与拓展\n\n- 方法的定义\n  + 修饰符\n  + 返回值类型\n  + 方法名\n  + 参数表\n  + 异常抛出\n\n- 方法的调用\n\n  + 静态方法：有`static`修饰符，将与类同时加载\n\n  + 非静态方法：没有`static`修饰符，在类实例化后才加载\n\n    > 即需要new一个对象使其实例化后才可以调用\n  \n  + 形参与实参\n  \n  + 值传递与引用传递\n  \n  + `this`关键字\n\n## 类与对象的创建\n\n* **使用`new`创建对象**\n* 使用`new`创建对象的时候，除了分配内存空间之外，还会给创建好的对象进行默认初始化以及对类中构造器的调用\n\n### 构造器\n\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且有以下两个特点：\n  1. 必须与类名字相同\n  2. 必须没有返回类型，也不能写`void`\n- 构造器的作用\n  - 使用`new`关键字，本质上实在调用构造器\n  - 构造器用来初始化值\n  - 当定义了有参构造器，无参构造器必须显式定义\n\neg：\n\n在文件`Student.java`中\n\n```java\npubilc class Student{\n    String name;\n    pubilc Student(){\n        this.name = \"Tom\";\n    } //这是一个无参构造器\n    pubilc Student(String name){\n        this.name = name;\n    } //这是一个有参构造器\n}\n```\n\n那么在文件`Application.java`中\n\n```java\npubilc class Application{\n    public static void main(String[] args){\n        Student Tom = new Student();\n        System.out.println(Tom.name); // 这里将会打印默认初始值Tom\n        Student Alice = new Student(\"Alice\");\n        System.out.println(Alice.name); // 这里将会打印传入的参数Alice\n        // 回忆关于方法的重载相关的知识\n    }\n}\n```\n\n## 创建对象的内存分析\n\n仍然以上文的代码为例，其在内存中的存在形式如下图\n\n![objects](https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/objects.jpg)\n\n## 封装\n\n- **高内聚，低耦合**\n  - 高内聚：类的内部数据操作细节自己完成，不允许外界干涉\n  - 低耦合：仅暴露少量方法给外部使用\n- 封装\n  - 通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏\n- 属性私有，通过get/set对属性进行操作\n\neg\n\n```java\npubilc class Student{\n    // 使用 private 关键字将数据封装，这些字段将无法从外部访问\n    private String name;\n    private int id;\n    private char gender;\n    // 通过一些 public 方法实现对相应字段的操作\n    public String getName(){\n        return this.name;\n    }\n    public void setName(String name){\n        this.name = name;\n    }\n    // ...\n}\n```\n\n封装的意义在于：\n\n+ 确保程序的安全，可以规避不合法的数据，提高健壮性\n\n```java\npubilc class Student{\n    private String name;\n    private int age;\n    private int id;\n    private char gender;\n    public void setAge(int age){\n        if(age>120||age<0){ //判断数据是否合法\n            this.age = 3; //处理非法数据，保障系统安全\n        }else{\n            this.age = age; //合法数据\n        }\n    }\n}\n```\n\n+ 隐藏代码的实现细节\n+ 统一接口\n+ 增加系统的可维护性\n\n## 继承\n\n+ 本质是对某一批类的抽象\n\n+ 使用`extends`关键字，意为“扩展“，子类为父类的扩展\n\n+ Java 中只有单继承，没有多继承\n\n  > 一个子类只能有一个父类，一个父类可以有多个子类\n\n比如现在定义一个 Person 类\n\n```java\npublic class Person{\n    public void say(){\n        System.out.println(\"Hello\");\n    }\n}\n```\n\n再定义一个 Student 类继承它\n\n```java\npublic class Student extends Person{\n    // 这个类中将继承父类中所有 public 的属性和方法\n}\n```\n\n那么在主方法中可以\n\n```java\npublic class Application{\n    pubilc static void main(String[] args){\n        Student student = new Student();\n        student.say(); //这是合法的\n    }\n}\n```\n\n> 实际上，所有的类都可以通过继承关系追溯到一个 Object 类，因此即便一个类不定义任何方法都可以找到一些默认自带的方法比如 `hashCode`方法\n\n## super 关键字\n\n### super 关键字的用法\n\n`super`关键字用于调用父类的数属性和方法\n\n```java\nsuper.name; // 调用父类的 name 属性\nsuper.print(); //调用父类的 print 方法\nsuper(); //调用父类的构造方法\n```\n\n> `super`关键字无法调用被`private`修饰的属性或方法\n\n在子类的无参构造器中，默认调用父类无参构造器，且先于子类无参构造器执行\n\n```java\npublic class Student extends Person{\n    public Student{\n        super(); // 该语句隐式存在，若显式写出，须写在子类构造器第一行\n        // 可以通过 this 关键字调用本类的构造器，但不能与 super 同时显式存在\n        System.out.println(\"子类无参构造执行\");\n    }\n}\n```\n\n```java\npublic class Person{\n    public Person{\n        System.out.println(\"父类无参构造执行\");\n    }\n}\n```\n\n当在`main`方法中`new`一个`Student`对象时，将会打印\n\n```sh\n父类无参构造执行\n子类无参构造执行\n```\n\n> 当父类只有有参构造时，子类若使用无参构造将会报错，但可以在子类的无参构造中的`super`语句中传入参数。\n>\n> ```java\n> // 父类\n> public class Person{\n>     public Person(String name){\n>         System.out.println(name);\n>     }\n> }\n> // 子类\n> class Student extends Person{\n>     public Student(){\n>         super(\"name\"); // 若不写此语句，程序将报错\n>     }\n> }\n> ```\n\n### super 关键字对比 this 关键字\n\n+ 代表的对象不同\n  - `this`：代表调用者本身这个对象\n  - `super`：代表父类对象的引用\n+ 使用前提\n  - `this`：没有继承关系也可以使用\n  - `super`：必须存在继承关系\n+ 构造方法\n  - `this()`：本类的构造\n  - `super()`：父类的构造\n\n## 方法重写\n\n重写：必须要有继承关系，子类可以重写父类的方法\n\n1. 方法名必须相同\n2. 参数列表必须相同\n3. 修饰符：范围可以扩大但不能缩小\n4. 抛出异常：范围可以缩小但不能扩大\n\n重写的意义在于：父类的功能未必满足子类的需求，或超出了子类的需求\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        // 若为静态方法，则方法的调用只和左边定义的数据类型有关\n        // 若为非静态方法，则发生了方法的重写\n        B b = new B();\n        b.test(); // 打印 B=>test\n        A a = new B(); //父类的引用指向了子类\n        a.test(); //由于方法重写，打印 B=>test\n    }\n}\n```\n\n```java\npublic class A{\n    public void test(){\n        System.out.println(\"A=>test\");\n    }\n}\n```\n\n```java\npublic class B extends A{\n    public void test(){\n        System.out.println(\"B=>test\");\n    }\n}\n```\n\n## 多态\n\n即同一种方法可以根据发送对象的不同而采用多种不同的行为方式\n\n比如说，\n\n```java\npublic class Application{\n    public static void main(String args[]){\n        Pet pet = new Pet();\n        Pet dog = new Dog(); // 父类的引用指向子类\n        Pet cat = new Cat();\n        pet.shout(); //将会打印 shout\n        dog.shout(); //将会打印 wof\n        cat.shout(); //将会打印 nya\n    }\n}\n\nclass Pet{\n    public void shout(){\n        System.out.println(\"shout!\");\n    }\n}\n\nclass Cat extends Pet{\n    @Override          // 重写了 Pet 中的 shout 方法\n    public void shout(){\n        System.out.println(\"nya!\");\n    }\n}\n\nclass Dog extends Pet{\n    @Override\n    public void shout(){\n        System.out.println(\"wof!\");\n    }\n}\n```\n\n多态存在的条件\n\n- 存在继承关系\n\n- 方法重写\n\n  > 一些方法不能被重写\n  >\n  > - static 方法\n  >\n  > - final 常量\n  >\n  >   >被 final 修饰的变量初始化后便不能更改\n  >   >\n  >   >被 final 修饰的方法不能重写\n  >   >\n  >   >被 final 修饰的类不能被继承\n  >\n  > - private 方法\n\n- 父类的引用指向子类\n\n多态的意义：提高了程序的灵活性与可扩展性，比如上例中如果需要添加其他的子类，只需要将新增的类继承自`Pet`，再将`shout`方法重写就可以，不需要对原本有的代码进行改动\n\n## instanceof 和类型转换\n\n### instanceof\n\ninstanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false\n\n看以下代码\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        //考虑类的继承结构\n        //Object > String\n        //Object > Person > Teacher\n        //Object > Person > Student\n        Object object = new Student();\n        System.out.println(object instanceof Student); // true\n        System.out.println(object instanceof Person); // true\n        System.out.println(object instanceof Object); // true\n        System.out.println(object instanceof Teacher); //false\n        System.out.println(object instanceof String); //false\n        Person person = new Student();\n        System.out.println(person instanceof Student); // true\n        System.out.println(person instanceof Person); // true\n        System.out.println(person instanceof Object); // true\n        System.out.println(person instanceof Teacher); // false\n        //System.out.println(person instanceof String); // 编译报错\n        Student student = new Student();\n        System.out.println(student instanceof Student); // true\n        System.out.println(student instanceof Person); // true\n        System.out.println(student instanceof Object); // true\n        //System.out.println(student instanceof Teacher); // 编译报错\n        //System.out.println(student instanceof String); // 编译报错\n    }\n}\n\nclass Person{\n    \n}\n\nclass Student extends Person{\n    \n}\n\nclass Teacher extends Person{\n    \n}\n```\n\n对于语句`X instanceof Y`，是否编译通过取决于`X`引用类型与`Y`类是否可比，若可比，则编译通过，否则编译报错；而语句的值取决于`X`所指向的实际类型是否是`Y`类或其子类，若是，则值为`true`，否则值为`false`\n\n### 类型转换\n\n与基础类型的转换类似，父类型处于高位，子类型处于低位，如果父类型想调用子类型的方法，可以使用强制转换\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        Person obj = new Student();\n        // obj.run(); //会报错\n        ((Student) obj).run();\n        // 或者\n        // Student student = (Student)obj;\n        // student.run();\n    }\n}\n\nclass Person{\n    // run方法是Student拥有的方法，父类中没有这个方法\n}\n\nclass Student extends Person{\n    public void run(){\n        System.out.println(\"run\");\n    }\n}\n```\n\n而子类转换为父类，可以自动转换\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        Student student = new Student();\n        student.run(); //可以直接调用自己的方法\n        Person person = student; //无需强制转换\n    }\n}\n\nclass Person{\n    // run方法是Student拥有的方法，父类中没有这个方法\n}\n\nclass Student extends Person{\n    public void run(){\n        System.out.println(\"run\");\n    }\n}\n```\n\n## static 关键字\n\n### 静态变量\n\n当给变量加上`static`修饰词时，变量成为静态变量，静态变量与类同时加载，即使没有将类实例化成对象，也可以通过类来访问这个变量，因为此时静态变量已经存在于内存中了\n\n```java\npublic class Student{\n    private static int age;\n    private int score;\n    public static void main(String[] args){\n        System.out.println(Student.age); // 可以直接访问\n        // System.out.println(Student.score); //不能直接访问\n    }\n}\n```\n\n### 静态方法\n\n当给方法加上`static`修饰词时，变量成为静态方法，静态方法与类同时加载，其他方法可以直接调用静态方法，而非静态方法需要先将类实例化成对象才能调用\n\n```java\npublic class Student{\n    private static int age;\n    private int score;\n    public static void go(){\n        \n    }\n    public void run(){\n        go(); // 其他方法可以直接调用静态方法\n    }\n    public static void main(String[] args){\n        Student.go(); //可以直接调用\n        // 如果在同一个类中，还可以\n        go();\n    }\n}\n```\n\n### 静态代码块\n\n在类中可以加入用`{}`包裹的代码块，这种代码块先于构造器执行\n\n```java\npublic class Person{\n    {\n        // 匿名代码块\n    }\n    static {\n        // 静态代码块\n    }\n        \n}\n```\n\n其中静态代码块最先执行且执行一次，然后执行匿名代码块，最后执行构造器\n\n可以利用这种特性对数据进行初始化\n\n### 静态导入包\n\n通过静态导入包可以在当前类中直接使用导入包中的方法或属性\n\n```java\nimport static pkg1.pkg2.pkg3.classname.methodname;\nimport static pkg1.pkg2.pkg3.classname.fieldname;\n```\n\n## 抽象类\n\n通过`abstract`修饰过的类称为抽象类\n\n+ 抽象类不能`new`，只能通过子类实现它\n+ 抽象类中可以写普通方法\n+ 抽象方法只能存在于抽象类中\n+ 抽象方法的实现只能通过子类重写\n\n```java\npublic abstract class Action{\n    public abstract void do(); // 这是一个抽象方法\n}\n\nclass A{\n    @Override\n    public abstract void do(){\n        // 方法体\n    }\n}\n```\n\n## 接口\n\n**接口的本质是契约**\n\n定义接口的关键字是`interface`\n\n定义一个接口\n\n```java\npublic interface UserService {\n    void add(String name); //接口中的方法只有方法名，且默认为 public abstract\n    void delete(String name);\n    void update(String name);\n    void query(String name);\n}\n```\n\n接口需要有实现类，通过关键字`implements`继承\n\n```java\npublic class UserServiceImpl implements UserService {\n    public void add(String name){\n        // 在实现类中重写接口中的方法\n    }\n    public void delete(String name){\n        \n    }\n    public void update(String name){\n        \n    }\n    public void query(String name){\n        \n    }\n}\n```\n\n接口是多继承的，一个类可以实现多个接口\n\n```java\npublic interface TimeService {\n    void timer();\n}\n```\n\n```java\n// 继承了多个接口\npublic class UserServiceImpl implements UserService,TimeService {\n    public void add(String name){\n\t\t\n    }\n    public void delete(String name){\n        \n    }\n    public void update(String name){\n        \n    }\n    public void query(String name){\n        \n    }\n    public void timer(){\n        \n    }\n}\n```\n\n接口中也可以定义属性\n\n所有属性默认为`public static final`\n\n接口的特点：\n\n- 约束\n- 定义一些方法，让不同的人实现\n- 接口不能被实例化，接口中没有构造方法\n- `implements`可以实现多个接口\n\n## 内部类\n\n内部类就是在一个类的内部再定义一个类\n\n- 成员内部类\n- 静态内部类\n- 局部内部类\n- 匿名内部类\n\n### 成员内部类\n\n```java\npublic class Outer{\n    private int id = 10;\n    public void out(){\n        \n    }\n    public class Inner{\n        public void in(){\n            \n        }\n        public int getId(){\n            return id;\n        }\n    }\n}\n```\n\n可以通过外部类实例化内部类\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        // 通过内部类获取外部类的私有属性/方法\n        int id = inner.getId;\n    }\n}\n```\n\n### 静态内部类\n\n用关键字`static`修饰的内部类，只能获取外部类的静态变量/方法\n\n### 匿名内部类\n\n没有名字的初始化类，不用将实例保存到变量中\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        new Apple().eat(); //这是一个匿名内部类\n        UserService userservice = new UserService(){ // 将返回一个UserService对象\n          public void hello(){\n              \n          }  \n        }; // 这也是一个匿名内部类，可以用来实现接口\n    }\n}\nclass Apple{\n    public void eat(){\n        \n    }\n}\ninterface UserService{\n    void hello();\n}\n```\n\n\n\n### 局部内部类\n\n定义在方法中的类，类似于局部变量\n","source":"_posts/Java-note-6.md","raw":"---\ntitle: Java学习笔记-面向对象\ndate: 2021-08-24 20:42:34\ntags: \n  - Java\n  - 学习\ncategories:\n  - 学习笔记\n  - Java笔记\n---\n\n## 面向对象\n\nObject-Oriented Programming, OOP\n\n**以类的形式组织代码，以对象的形式封装数据**\n\n三大特性：\n\n- **封装**\n- **继承**\n- **多态**\n\n## 方法回顾与拓展\n\n- 方法的定义\n  + 修饰符\n  + 返回值类型\n  + 方法名\n  + 参数表\n  + 异常抛出\n\n- 方法的调用\n\n  + 静态方法：有`static`修饰符，将与类同时加载\n\n  + 非静态方法：没有`static`修饰符，在类实例化后才加载\n\n    > 即需要new一个对象使其实例化后才可以调用\n  \n  + 形参与实参\n  \n  + 值传递与引用传递\n  \n  + `this`关键字\n\n## 类与对象的创建\n\n* **使用`new`创建对象**\n* 使用`new`创建对象的时候，除了分配内存空间之外，还会给创建好的对象进行默认初始化以及对类中构造器的调用\n\n### 构造器\n\n- 类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且有以下两个特点：\n  1. 必须与类名字相同\n  2. 必须没有返回类型，也不能写`void`\n- 构造器的作用\n  - 使用`new`关键字，本质上实在调用构造器\n  - 构造器用来初始化值\n  - 当定义了有参构造器，无参构造器必须显式定义\n\neg：\n\n在文件`Student.java`中\n\n```java\npubilc class Student{\n    String name;\n    pubilc Student(){\n        this.name = \"Tom\";\n    } //这是一个无参构造器\n    pubilc Student(String name){\n        this.name = name;\n    } //这是一个有参构造器\n}\n```\n\n那么在文件`Application.java`中\n\n```java\npubilc class Application{\n    public static void main(String[] args){\n        Student Tom = new Student();\n        System.out.println(Tom.name); // 这里将会打印默认初始值Tom\n        Student Alice = new Student(\"Alice\");\n        System.out.println(Alice.name); // 这里将会打印传入的参数Alice\n        // 回忆关于方法的重载相关的知识\n    }\n}\n```\n\n## 创建对象的内存分析\n\n仍然以上文的代码为例，其在内存中的存在形式如下图\n\n![objects](https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/objects.jpg)\n\n## 封装\n\n- **高内聚，低耦合**\n  - 高内聚：类的内部数据操作细节自己完成，不允许外界干涉\n  - 低耦合：仅暴露少量方法给外部使用\n- 封装\n  - 通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏\n- 属性私有，通过get/set对属性进行操作\n\neg\n\n```java\npubilc class Student{\n    // 使用 private 关键字将数据封装，这些字段将无法从外部访问\n    private String name;\n    private int id;\n    private char gender;\n    // 通过一些 public 方法实现对相应字段的操作\n    public String getName(){\n        return this.name;\n    }\n    public void setName(String name){\n        this.name = name;\n    }\n    // ...\n}\n```\n\n封装的意义在于：\n\n+ 确保程序的安全，可以规避不合法的数据，提高健壮性\n\n```java\npubilc class Student{\n    private String name;\n    private int age;\n    private int id;\n    private char gender;\n    public void setAge(int age){\n        if(age>120||age<0){ //判断数据是否合法\n            this.age = 3; //处理非法数据，保障系统安全\n        }else{\n            this.age = age; //合法数据\n        }\n    }\n}\n```\n\n+ 隐藏代码的实现细节\n+ 统一接口\n+ 增加系统的可维护性\n\n## 继承\n\n+ 本质是对某一批类的抽象\n\n+ 使用`extends`关键字，意为“扩展“，子类为父类的扩展\n\n+ Java 中只有单继承，没有多继承\n\n  > 一个子类只能有一个父类，一个父类可以有多个子类\n\n比如现在定义一个 Person 类\n\n```java\npublic class Person{\n    public void say(){\n        System.out.println(\"Hello\");\n    }\n}\n```\n\n再定义一个 Student 类继承它\n\n```java\npublic class Student extends Person{\n    // 这个类中将继承父类中所有 public 的属性和方法\n}\n```\n\n那么在主方法中可以\n\n```java\npublic class Application{\n    pubilc static void main(String[] args){\n        Student student = new Student();\n        student.say(); //这是合法的\n    }\n}\n```\n\n> 实际上，所有的类都可以通过继承关系追溯到一个 Object 类，因此即便一个类不定义任何方法都可以找到一些默认自带的方法比如 `hashCode`方法\n\n## super 关键字\n\n### super 关键字的用法\n\n`super`关键字用于调用父类的数属性和方法\n\n```java\nsuper.name; // 调用父类的 name 属性\nsuper.print(); //调用父类的 print 方法\nsuper(); //调用父类的构造方法\n```\n\n> `super`关键字无法调用被`private`修饰的属性或方法\n\n在子类的无参构造器中，默认调用父类无参构造器，且先于子类无参构造器执行\n\n```java\npublic class Student extends Person{\n    public Student{\n        super(); // 该语句隐式存在，若显式写出，须写在子类构造器第一行\n        // 可以通过 this 关键字调用本类的构造器，但不能与 super 同时显式存在\n        System.out.println(\"子类无参构造执行\");\n    }\n}\n```\n\n```java\npublic class Person{\n    public Person{\n        System.out.println(\"父类无参构造执行\");\n    }\n}\n```\n\n当在`main`方法中`new`一个`Student`对象时，将会打印\n\n```sh\n父类无参构造执行\n子类无参构造执行\n```\n\n> 当父类只有有参构造时，子类若使用无参构造将会报错，但可以在子类的无参构造中的`super`语句中传入参数。\n>\n> ```java\n> // 父类\n> public class Person{\n>     public Person(String name){\n>         System.out.println(name);\n>     }\n> }\n> // 子类\n> class Student extends Person{\n>     public Student(){\n>         super(\"name\"); // 若不写此语句，程序将报错\n>     }\n> }\n> ```\n\n### super 关键字对比 this 关键字\n\n+ 代表的对象不同\n  - `this`：代表调用者本身这个对象\n  - `super`：代表父类对象的引用\n+ 使用前提\n  - `this`：没有继承关系也可以使用\n  - `super`：必须存在继承关系\n+ 构造方法\n  - `this()`：本类的构造\n  - `super()`：父类的构造\n\n## 方法重写\n\n重写：必须要有继承关系，子类可以重写父类的方法\n\n1. 方法名必须相同\n2. 参数列表必须相同\n3. 修饰符：范围可以扩大但不能缩小\n4. 抛出异常：范围可以缩小但不能扩大\n\n重写的意义在于：父类的功能未必满足子类的需求，或超出了子类的需求\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        // 若为静态方法，则方法的调用只和左边定义的数据类型有关\n        // 若为非静态方法，则发生了方法的重写\n        B b = new B();\n        b.test(); // 打印 B=>test\n        A a = new B(); //父类的引用指向了子类\n        a.test(); //由于方法重写，打印 B=>test\n    }\n}\n```\n\n```java\npublic class A{\n    public void test(){\n        System.out.println(\"A=>test\");\n    }\n}\n```\n\n```java\npublic class B extends A{\n    public void test(){\n        System.out.println(\"B=>test\");\n    }\n}\n```\n\n## 多态\n\n即同一种方法可以根据发送对象的不同而采用多种不同的行为方式\n\n比如说，\n\n```java\npublic class Application{\n    public static void main(String args[]){\n        Pet pet = new Pet();\n        Pet dog = new Dog(); // 父类的引用指向子类\n        Pet cat = new Cat();\n        pet.shout(); //将会打印 shout\n        dog.shout(); //将会打印 wof\n        cat.shout(); //将会打印 nya\n    }\n}\n\nclass Pet{\n    public void shout(){\n        System.out.println(\"shout!\");\n    }\n}\n\nclass Cat extends Pet{\n    @Override          // 重写了 Pet 中的 shout 方法\n    public void shout(){\n        System.out.println(\"nya!\");\n    }\n}\n\nclass Dog extends Pet{\n    @Override\n    public void shout(){\n        System.out.println(\"wof!\");\n    }\n}\n```\n\n多态存在的条件\n\n- 存在继承关系\n\n- 方法重写\n\n  > 一些方法不能被重写\n  >\n  > - static 方法\n  >\n  > - final 常量\n  >\n  >   >被 final 修饰的变量初始化后便不能更改\n  >   >\n  >   >被 final 修饰的方法不能重写\n  >   >\n  >   >被 final 修饰的类不能被继承\n  >\n  > - private 方法\n\n- 父类的引用指向子类\n\n多态的意义：提高了程序的灵活性与可扩展性，比如上例中如果需要添加其他的子类，只需要将新增的类继承自`Pet`，再将`shout`方法重写就可以，不需要对原本有的代码进行改动\n\n## instanceof 和类型转换\n\n### instanceof\n\ninstanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false\n\n看以下代码\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        //考虑类的继承结构\n        //Object > String\n        //Object > Person > Teacher\n        //Object > Person > Student\n        Object object = new Student();\n        System.out.println(object instanceof Student); // true\n        System.out.println(object instanceof Person); // true\n        System.out.println(object instanceof Object); // true\n        System.out.println(object instanceof Teacher); //false\n        System.out.println(object instanceof String); //false\n        Person person = new Student();\n        System.out.println(person instanceof Student); // true\n        System.out.println(person instanceof Person); // true\n        System.out.println(person instanceof Object); // true\n        System.out.println(person instanceof Teacher); // false\n        //System.out.println(person instanceof String); // 编译报错\n        Student student = new Student();\n        System.out.println(student instanceof Student); // true\n        System.out.println(student instanceof Person); // true\n        System.out.println(student instanceof Object); // true\n        //System.out.println(student instanceof Teacher); // 编译报错\n        //System.out.println(student instanceof String); // 编译报错\n    }\n}\n\nclass Person{\n    \n}\n\nclass Student extends Person{\n    \n}\n\nclass Teacher extends Person{\n    \n}\n```\n\n对于语句`X instanceof Y`，是否编译通过取决于`X`引用类型与`Y`类是否可比，若可比，则编译通过，否则编译报错；而语句的值取决于`X`所指向的实际类型是否是`Y`类或其子类，若是，则值为`true`，否则值为`false`\n\n### 类型转换\n\n与基础类型的转换类似，父类型处于高位，子类型处于低位，如果父类型想调用子类型的方法，可以使用强制转换\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        Person obj = new Student();\n        // obj.run(); //会报错\n        ((Student) obj).run();\n        // 或者\n        // Student student = (Student)obj;\n        // student.run();\n    }\n}\n\nclass Person{\n    // run方法是Student拥有的方法，父类中没有这个方法\n}\n\nclass Student extends Person{\n    public void run(){\n        System.out.println(\"run\");\n    }\n}\n```\n\n而子类转换为父类，可以自动转换\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        Student student = new Student();\n        student.run(); //可以直接调用自己的方法\n        Person person = student; //无需强制转换\n    }\n}\n\nclass Person{\n    // run方法是Student拥有的方法，父类中没有这个方法\n}\n\nclass Student extends Person{\n    public void run(){\n        System.out.println(\"run\");\n    }\n}\n```\n\n## static 关键字\n\n### 静态变量\n\n当给变量加上`static`修饰词时，变量成为静态变量，静态变量与类同时加载，即使没有将类实例化成对象，也可以通过类来访问这个变量，因为此时静态变量已经存在于内存中了\n\n```java\npublic class Student{\n    private static int age;\n    private int score;\n    public static void main(String[] args){\n        System.out.println(Student.age); // 可以直接访问\n        // System.out.println(Student.score); //不能直接访问\n    }\n}\n```\n\n### 静态方法\n\n当给方法加上`static`修饰词时，变量成为静态方法，静态方法与类同时加载，其他方法可以直接调用静态方法，而非静态方法需要先将类实例化成对象才能调用\n\n```java\npublic class Student{\n    private static int age;\n    private int score;\n    public static void go(){\n        \n    }\n    public void run(){\n        go(); // 其他方法可以直接调用静态方法\n    }\n    public static void main(String[] args){\n        Student.go(); //可以直接调用\n        // 如果在同一个类中，还可以\n        go();\n    }\n}\n```\n\n### 静态代码块\n\n在类中可以加入用`{}`包裹的代码块，这种代码块先于构造器执行\n\n```java\npublic class Person{\n    {\n        // 匿名代码块\n    }\n    static {\n        // 静态代码块\n    }\n        \n}\n```\n\n其中静态代码块最先执行且执行一次，然后执行匿名代码块，最后执行构造器\n\n可以利用这种特性对数据进行初始化\n\n### 静态导入包\n\n通过静态导入包可以在当前类中直接使用导入包中的方法或属性\n\n```java\nimport static pkg1.pkg2.pkg3.classname.methodname;\nimport static pkg1.pkg2.pkg3.classname.fieldname;\n```\n\n## 抽象类\n\n通过`abstract`修饰过的类称为抽象类\n\n+ 抽象类不能`new`，只能通过子类实现它\n+ 抽象类中可以写普通方法\n+ 抽象方法只能存在于抽象类中\n+ 抽象方法的实现只能通过子类重写\n\n```java\npublic abstract class Action{\n    public abstract void do(); // 这是一个抽象方法\n}\n\nclass A{\n    @Override\n    public abstract void do(){\n        // 方法体\n    }\n}\n```\n\n## 接口\n\n**接口的本质是契约**\n\n定义接口的关键字是`interface`\n\n定义一个接口\n\n```java\npublic interface UserService {\n    void add(String name); //接口中的方法只有方法名，且默认为 public abstract\n    void delete(String name);\n    void update(String name);\n    void query(String name);\n}\n```\n\n接口需要有实现类，通过关键字`implements`继承\n\n```java\npublic class UserServiceImpl implements UserService {\n    public void add(String name){\n        // 在实现类中重写接口中的方法\n    }\n    public void delete(String name){\n        \n    }\n    public void update(String name){\n        \n    }\n    public void query(String name){\n        \n    }\n}\n```\n\n接口是多继承的，一个类可以实现多个接口\n\n```java\npublic interface TimeService {\n    void timer();\n}\n```\n\n```java\n// 继承了多个接口\npublic class UserServiceImpl implements UserService,TimeService {\n    public void add(String name){\n\t\t\n    }\n    public void delete(String name){\n        \n    }\n    public void update(String name){\n        \n    }\n    public void query(String name){\n        \n    }\n    public void timer(){\n        \n    }\n}\n```\n\n接口中也可以定义属性\n\n所有属性默认为`public static final`\n\n接口的特点：\n\n- 约束\n- 定义一些方法，让不同的人实现\n- 接口不能被实例化，接口中没有构造方法\n- `implements`可以实现多个接口\n\n## 内部类\n\n内部类就是在一个类的内部再定义一个类\n\n- 成员内部类\n- 静态内部类\n- 局部内部类\n- 匿名内部类\n\n### 成员内部类\n\n```java\npublic class Outer{\n    private int id = 10;\n    public void out(){\n        \n    }\n    public class Inner{\n        public void in(){\n            \n        }\n        public int getId(){\n            return id;\n        }\n    }\n}\n```\n\n可以通过外部类实例化内部类\n\n```java\npublic class Application{\n    public static void main(String[] args){\n        Outer outer = new Outer();\n        Outer.Inner inner = outer.new Inner();\n        // 通过内部类获取外部类的私有属性/方法\n        int id = inner.getId;\n    }\n}\n```\n\n### 静态内部类\n\n用关键字`static`修饰的内部类，只能获取外部类的静态变量/方法\n\n### 匿名内部类\n\n没有名字的初始化类，不用将实例保存到变量中\n\n```java\npublic class Test {\n    public static void main(String[] args) {\n        new Apple().eat(); //这是一个匿名内部类\n        UserService userservice = new UserService(){ // 将返回一个UserService对象\n          public void hello(){\n              \n          }  \n        }; // 这也是一个匿名内部类，可以用来实现接口\n    }\n}\nclass Apple{\n    public void eat(){\n        \n    }\n}\ninterface UserService{\n    void hello();\n}\n```\n\n\n\n### 局部内部类\n\n定义在方法中的类，类似于局部变量\n","slug":"Java-note-6","published":1,"updated":"2021-08-25T10:57:54.109Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksuleioc0020kwvjazlgaa7h","content":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>Object-Oriented Programming, OOP</p>\n<p><strong>以类的形式组织代码，以对象的形式封装数据</strong></p>\n<p>三大特性：</p>\n<ul>\n<li><strong>封装</strong></li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n<h2 id=\"方法回顾与拓展\"><a href=\"#方法回顾与拓展\" class=\"headerlink\" title=\"方法回顾与拓展\"></a>方法回顾与拓展</h2><ul>\n<li><p>方法的定义</p>\n<ul>\n<li>修饰符</li>\n<li>返回值类型</li>\n<li>方法名</li>\n<li>参数表</li>\n<li>异常抛出</li>\n</ul>\n</li>\n<li><p>方法的调用</p>\n<ul>\n<li><p>静态方法：有<code>static</code>修饰符，将与类同时加载</p>\n</li>\n<li><p>非静态方法：没有<code>static</code>修饰符，在类实例化后才加载</p>\n<blockquote>\n<p>即需要new一个对象使其实例化后才可以调用</p>\n</blockquote>\n</li>\n<li><p>形参与实参</p>\n</li>\n<li><p>值传递与引用传递</p>\n</li>\n<li><p><code>this</code>关键字</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类与对象的创建\"><a href=\"#类与对象的创建\" class=\"headerlink\" title=\"类与对象的创建\"></a>类与对象的创建</h2><ul>\n<li><strong>使用<code>new</code>创建对象</strong></li>\n<li>使用<code>new</code>创建对象的时候，除了分配内存空间之外，还会给创建好的对象进行默认初始化以及对类中构造器的调用</li>\n</ul>\n<h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><ul>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且有以下两个特点：<ol>\n<li>必须与类名字相同</li>\n<li>必须没有返回类型，也不能写<code>void</code></li>\n</ol>\n</li>\n<li>构造器的作用<ul>\n<li>使用<code>new</code>关键字，本质上实在调用构造器</li>\n<li>构造器用来初始化值</li>\n<li>当定义了有参构造器，无参构造器必须显式定义</li>\n</ul>\n</li>\n</ul>\n<p>eg：</p>\n<p>在文件<code>Student.java</code>中</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    pubilc <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//这是一个无参构造器</span>\n    pubilc <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//这是一个有参构造器</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>那么在文件<code>Application.java</code>中</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span> <span class=\"token class-name\">Tom</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tom</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里将会打印默认初始值Tom</span>\n        <span class=\"token class-name\">Student</span> <span class=\"token class-name\">Alice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里将会打印传入的参数Alice</span>\n        <span class=\"token comment\">// 回忆关于方法的重载相关的知识</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"创建对象的内存分析\"><a href=\"#创建对象的内存分析\" class=\"headerlink\" title=\"创建对象的内存分析\"></a>创建对象的内存分析</h2><p>仍然以上文的代码为例，其在内存中的存在形式如下图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/objects.jpg\" alt=\"objects\"></p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li><strong>高内聚，低耦合</strong><ul>\n<li>高内聚：类的内部数据操作细节自己完成，不允许外界干涉</li>\n<li>低耦合：仅暴露少量方法给外部使用</li>\n</ul>\n</li>\n<li>封装<ul>\n<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</li>\n</ul>\n</li>\n<li>属性私有，通过get/set对属性进行操作</li>\n</ul>\n<p>eg</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 使用 private 关键字将数据封装，这些字段将无法从外部访问</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 通过一些 public 方法实现对相应字段的操作</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>封装的意义在于：</p>\n<ul>\n<li>确保程序的安全，可以规避不合法的数据，提高健壮性</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">></span><span class=\"token number\">120</span><span class=\"token operator\">||</span>age<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//判断数据是否合法</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//处理非法数据，保障系统安全</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">//合法数据</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>隐藏代码的实现细节</li>\n<li>统一接口</li>\n<li>增加系统的可维护性</li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li><p>本质是对某一批类的抽象</p>\n</li>\n<li><p>使用<code>extends</code>关键字，意为“扩展“，子类为父类的扩展</p>\n</li>\n<li><p>Java 中只有单继承，没有多继承</p>\n<blockquote>\n<p>一个子类只能有一个父类，一个父类可以有多个子类</p>\n</blockquote>\n</li>\n</ul>\n<p>比如现在定义一个 Person 类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>再定义一个 Student 类继承它</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 这个类中将继承父类中所有 public 的属性和方法</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>那么在主方法中可以</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    pubilc <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这是合法的</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<blockquote>\n<p>实际上，所有的类都可以通过继承关系追溯到一个 Object 类，因此即便一个类不定义任何方法都可以找到一些默认自带的方法比如 <code>hashCode</code>方法</p>\n</blockquote>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><h3 id=\"super-关键字的用法\"><a href=\"#super-关键字的用法\" class=\"headerlink\" title=\"super 关键字的用法\"></a>super 关键字的用法</h3><p><code>super</code>关键字用于调用父类的数属性和方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的 name 属性</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用父类的 print 方法</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用父类的构造方法</span></code></pre>\n\n<blockquote>\n<p><code>super</code>关键字无法调用被<code>private</code>修饰的属性或方法</p>\n</blockquote>\n<p>在子类的无参构造器中，默认调用父类无参构造器，且先于子类无参构造器执行</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该语句隐式存在，若显式写出，须写在子类构造器第一行</span>\n        <span class=\"token comment\">// 可以通过 this 关键字调用本类的构造器，但不能与 super 同时显式存在</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子类无参构造执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"父类无参构造执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>当在<code>main</code>方法中<code>new</code>一个<code>Student</code>对象时，将会打印</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">父类无参构造执行\n子类无参构造执行</code></pre>\n\n<blockquote>\n<p>当父类只有有参构造时，子类若使用无参构造将会报错，但可以在子类的无参构造中的<code>super</code>语句中传入参数。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 父类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 子类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若不写此语句，程序将报错</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n</blockquote>\n<h3 id=\"super-关键字对比-this-关键字\"><a href=\"#super-关键字对比-this-关键字\" class=\"headerlink\" title=\"super 关键字对比 this 关键字\"></a>super 关键字对比 this 关键字</h3><ul>\n<li>代表的对象不同<ul>\n<li><code>this</code>：代表调用者本身这个对象</li>\n<li><code>super</code>：代表父类对象的引用</li>\n</ul>\n</li>\n<li>使用前提<ul>\n<li><code>this</code>：没有继承关系也可以使用</li>\n<li><code>super</code>：必须存在继承关系</li>\n</ul>\n</li>\n<li>构造方法<ul>\n<li><code>this()</code>：本类的构造</li>\n<li><code>super()</code>：父类的构造</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h2><p>重写：必须要有继承关系，子类可以重写父类的方法</p>\n<ol>\n<li>方法名必须相同</li>\n<li>参数列表必须相同</li>\n<li>修饰符：范围可以扩大但不能缩小</li>\n<li>抛出异常：范围可以缩小但不能扩大</li>\n</ol>\n<p>重写的意义在于：父类的功能未必满足子类的需求，或超出了子类的需求</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 若为静态方法，则方法的调用只和左边定义的数据类型有关</span>\n        <span class=\"token comment\">// 若为非静态方法，则发生了方法的重写</span>\n        <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印 B=>test</span>\n        <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//父类的引用指向了子类</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//由于方法重写，打印 B=>test</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=>test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B=>test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>即同一种方法可以根据发送对象的不同而采用多种不同的行为方式</p>\n<p>比如说，</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Pet</span> pet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Pet</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 父类的引用指向子类</span>\n        <span class=\"token class-name\">Pet</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pet<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将会打印 shout</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将会打印 wof</span>\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将会打印 nya</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shout!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>          <span class=\"token comment\">// 重写了 Pet 中的 shout 方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nya!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wof!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>多态存在的条件</p>\n<ul>\n<li><p>存在继承关系</p>\n</li>\n<li><p>方法重写</p>\n<blockquote>\n<p>一些方法不能被重写</p>\n<ul>\n<li><p>static 方法</p>\n</li>\n<li><p>final 常量</p>\n<blockquote>\n<p>被 final 修饰的变量初始化后便不能更改</p>\n<p>被 final 修饰的方法不能重写</p>\n<p>被 final 修饰的类不能被继承</p>\n</blockquote>\n</li>\n<li><p>private 方法</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>父类的引用指向子类</p>\n</li>\n</ul>\n<p>多态的意义：提高了程序的灵活性与可扩展性，比如上例中如果需要添加其他的子类，只需要将新增的类继承自<code>Pet</code>，再将<code>shout</code>方法重写就可以，不需要对原本有的代码进行改动</p>\n<h2 id=\"instanceof-和类型转换\"><a href=\"#instanceof-和类型转换\" class=\"headerlink\" title=\"instanceof 和类型转换\"></a>instanceof 和类型转换</h2><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false</p>\n<p>看以下代码</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//考虑类的继承结构</span>\n        <span class=\"token comment\">//Object > String</span>\n        <span class=\"token comment\">//Object > Person > Teacher</span>\n        <span class=\"token comment\">//Object > Person > Student</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n        <span class=\"token comment\">//System.out.println(person instanceof String); // 编译报错</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token comment\">//System.out.println(student instanceof Teacher); // 编译报错</span>\n        <span class=\"token comment\">//System.out.println(student instanceof String); // 编译报错</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>对于语句<code>X instanceof Y</code>，是否编译通过取决于<code>X</code>引用类型与<code>Y</code>类是否可比，若可比，则编译通过，否则编译报错；而语句的值取决于<code>X</code>所指向的实际类型是否是<code>Y</code>类或其子类，若是，则值为<code>true</code>，否则值为<code>false</code></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>与基础类型的转换类似，父类型处于高位，子类型处于低位，如果父类型想调用子类型的方法，可以使用强制转换</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Person</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// obj.run(); //会报错</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 或者</span>\n        <span class=\"token comment\">// Student student = (Student)obj;</span>\n        <span class=\"token comment\">// student.run();</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// run方法是Student拥有的方法，父类中没有这个方法</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>而子类转换为父类，可以自动转换</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以直接调用自己的方法</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">//无需强制转换</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// run方法是Student拥有的方法，父类中没有这个方法</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h3><p>当给变量加上<code>static</code>修饰词时，变量成为静态变量，静态变量与类同时加载，即使没有将类实例化成对象，也可以通过类来访问这个变量，因为此时静态变量已经存在于内存中了</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以直接访问</span>\n        <span class=\"token comment\">// System.out.println(Student.score); //不能直接访问</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><p>当给方法加上<code>static</code>修饰词时，变量成为静态方法，静态方法与类同时加载，其他方法可以直接调用静态方法，而非静态方法需要先将类实例化成对象才能调用</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 其他方法可以直接调用静态方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以直接调用</span>\n        <span class=\"token comment\">// 如果在同一个类中，还可以</span>\n        <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p>在类中可以加入用<code>&#123;&#125;</code>包裹的代码块，这种代码块先于构造器执行</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 匿名代码块</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 静态代码块</span>\n    <span class=\"token punctuation\">&#125;</span>\n        \n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>其中静态代码块最先执行且执行一次，然后执行匿名代码块，最后执行构造器</p>\n<p>可以利用这种特性对数据进行初始化</p>\n<h3 id=\"静态导入包\"><a href=\"#静态导入包\" class=\"headerlink\" title=\"静态导入包\"></a>静态导入包</h3><p>通过静态导入包可以在当前类中直接使用导入包中的方法或属性</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">pkg1<span class=\"token punctuation\">.</span>pkg2<span class=\"token punctuation\">.</span>pkg3<span class=\"token punctuation\">.</span>classname<span class=\"token punctuation\">.</span>methodname</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">pkg1<span class=\"token punctuation\">.</span>pkg2<span class=\"token punctuation\">.</span>pkg3<span class=\"token punctuation\">.</span>classname<span class=\"token punctuation\">.</span>fieldname</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>通过<code>abstract</code>修饰过的类称为抽象类</p>\n<ul>\n<li>抽象类不能<code>new</code>，只能通过子类实现它</li>\n<li>抽象类中可以写普通方法</li>\n<li>抽象方法只能存在于抽象类中</li>\n<li>抽象方法的实现只能通过子类重写</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这是一个抽象方法</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 方法体</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p><strong>接口的本质是契约</strong></p>\n<p>定义接口的关键字是<code>interface</code></p>\n<p>定义一个接口</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//接口中的方法只有方法名，且默认为 public abstract</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>接口需要有实现类，通过关键字<code>implements</code>继承</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 在实现类中重写接口中的方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>接口是多继承的，一个类可以实现多个接口</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimeService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 继承了多个接口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>接口中也可以定义属性</p>\n<p>所有属性默认为<code>public static final</code></p>\n<p>接口的特点：</p>\n<ul>\n<li>约束</li>\n<li>定义一些方法，让不同的人实现</li>\n<li>接口不能被实例化，接口中没有构造方法</li>\n<li><code>implements</code>可以实现多个接口</li>\n</ul>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>内部类就是在一个类的内部再定义一个类</p>\n<ul>\n<li>成员内部类</li>\n<li>静态内部类</li>\n<li>局部内部类</li>\n<li>匿名内部类</li>\n</ul>\n<h3 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            \n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>可以通过外部类实例化内部类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Outer</span> outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inner</span> inner <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过内部类获取外部类的私有属性/方法</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> inner<span class=\"token punctuation\">.</span>getId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><p>用关键字<code>static</code>修饰的内部类，只能获取外部类的静态变量/方法</p>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><p>没有名字的初始化类，不用将实例保存到变量中</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这是一个匿名内部类</span>\n        <span class=\"token class-name\">UserService</span> userservice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 将返回一个UserService对象</span>\n          <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              \n          <span class=\"token punctuation\">&#125;</span>  \n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这也是一个匿名内部类，可以用来实现接口</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n<h3 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h3><p>定义在方法中的类，类似于局部变量</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h2><p>Object-Oriented Programming, OOP</p>\n<p><strong>以类的形式组织代码，以对象的形式封装数据</strong></p>\n<p>三大特性：</p>\n<ul>\n<li><strong>封装</strong></li>\n<li><strong>继承</strong></li>\n<li><strong>多态</strong></li>\n</ul>\n<h2 id=\"方法回顾与拓展\"><a href=\"#方法回顾与拓展\" class=\"headerlink\" title=\"方法回顾与拓展\"></a>方法回顾与拓展</h2><ul>\n<li><p>方法的定义</p>\n<ul>\n<li>修饰符</li>\n<li>返回值类型</li>\n<li>方法名</li>\n<li>参数表</li>\n<li>异常抛出</li>\n</ul>\n</li>\n<li><p>方法的调用</p>\n<ul>\n<li><p>静态方法：有<code>static</code>修饰符，将与类同时加载</p>\n</li>\n<li><p>非静态方法：没有<code>static</code>修饰符，在类实例化后才加载</p>\n<blockquote>\n<p>即需要new一个对象使其实例化后才可以调用</p>\n</blockquote>\n</li>\n<li><p>形参与实参</p>\n</li>\n<li><p>值传递与引用传递</p>\n</li>\n<li><p><code>this</code>关键字</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类与对象的创建\"><a href=\"#类与对象的创建\" class=\"headerlink\" title=\"类与对象的创建\"></a>类与对象的创建</h2><ul>\n<li><strong>使用<code>new</code>创建对象</strong></li>\n<li>使用<code>new</code>创建对象的时候，除了分配内存空间之外，还会给创建好的对象进行默认初始化以及对类中构造器的调用</li>\n</ul>\n<h3 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a>构造器</h3><ul>\n<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须要调用的。并且有以下两个特点：<ol>\n<li>必须与类名字相同</li>\n<li>必须没有返回类型，也不能写<code>void</code></li>\n</ol>\n</li>\n<li>构造器的作用<ul>\n<li>使用<code>new</code>关键字，本质上实在调用构造器</li>\n<li>构造器用来初始化值</li>\n<li>当定义了有参构造器，无参构造器必须显式定义</li>\n</ul>\n</li>\n</ul>\n<p>eg：</p>\n<p>在文件<code>Student.java</code>中</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    pubilc <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//这是一个无参构造器</span>\n    pubilc <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//这是一个有参构造器</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>那么在文件<code>Application.java</code>中</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span> <span class=\"token class-name\">Tom</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Tom</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里将会打印默认初始值Tom</span>\n        <span class=\"token class-name\">Student</span> <span class=\"token class-name\">Alice</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Alice</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里将会打印传入的参数Alice</span>\n        <span class=\"token comment\">// 回忆关于方法的重载相关的知识</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"创建对象的内存分析\"><a href=\"#创建对象的内存分析\" class=\"headerlink\" title=\"创建对象的内存分析\"></a>创建对象的内存分析</h2><p>仍然以上文的代码为例，其在内存中的存在形式如下图</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Kenguo05/blog-img@main/img/blog-emoji/objects.jpg\" alt=\"objects\"></p>\n<h2 id=\"封装\"><a href=\"#封装\" class=\"headerlink\" title=\"封装\"></a>封装</h2><ul>\n<li><strong>高内聚，低耦合</strong><ul>\n<li>高内聚：类的内部数据操作细节自己完成，不允许外界干涉</li>\n<li>低耦合：仅暴露少量方法给外部使用</li>\n</ul>\n</li>\n<li>封装<ul>\n<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏</li>\n</ul>\n</li>\n<li>属性私有，通过get/set对属性进行操作</li>\n</ul>\n<p>eg</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 使用 private 关键字将数据封装，这些字段将无法从外部访问</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 通过一些 public 方法实现对相应字段的操作</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>封装的意义在于：</p>\n<ul>\n<li>确保程序的安全，可以规避不合法的数据，提高健壮性</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\">pubilc <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">char</span> gender<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setAge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>age<span class=\"token operator\">></span><span class=\"token number\">120</span><span class=\"token operator\">||</span>age<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//判断数据是否合法</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//处理非法数据，保障系统安全</span>\n        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span> <span class=\"token comment\">//合法数据</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<ul>\n<li>隐藏代码的实现细节</li>\n<li>统一接口</li>\n<li>增加系统的可维护性</li>\n</ul>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><ul>\n<li><p>本质是对某一批类的抽象</p>\n</li>\n<li><p>使用<code>extends</code>关键字，意为“扩展“，子类为父类的扩展</p>\n</li>\n<li><p>Java 中只有单继承，没有多继承</p>\n<blockquote>\n<p>一个子类只能有一个父类，一个父类可以有多个子类</p>\n</blockquote>\n</li>\n</ul>\n<p>比如现在定义一个 Person 类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>再定义一个 Student 类继承它</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 这个类中将继承父类中所有 public 的属性和方法</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>那么在主方法中可以</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    pubilc <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">say</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这是合法的</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<blockquote>\n<p>实际上，所有的类都可以通过继承关系追溯到一个 Object 类，因此即便一个类不定义任何方法都可以找到一些默认自带的方法比如 <code>hashCode</code>方法</p>\n</blockquote>\n<h2 id=\"super-关键字\"><a href=\"#super-关键字\" class=\"headerlink\" title=\"super 关键字\"></a>super 关键字</h2><h3 id=\"super-关键字的用法\"><a href=\"#super-关键字的用法\" class=\"headerlink\" title=\"super 关键字的用法\"></a>super 关键字的用法</h3><p><code>super</code>关键字用于调用父类的数属性和方法</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 调用父类的 name 属性</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用父类的 print 方法</span>\n<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//调用父类的构造方法</span></code></pre>\n\n<blockquote>\n<p><code>super</code>关键字无法调用被<code>private</code>修饰的属性或方法</p>\n</blockquote>\n<p>在子类的无参构造器中，默认调用父类无参构造器，且先于子类无参构造器执行</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该语句隐式存在，若显式写出，须写在子类构造器第一行</span>\n        <span class=\"token comment\">// 可以通过 this 关键字调用本类的构造器，但不能与 super 同时显式存在</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"子类无参构造执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"父类无参构造执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>当在<code>main</code>方法中<code>new</code>一个<code>Student</code>对象时，将会打印</p>\n<pre class=\"language-sh\" data-language=\"sh\"><code class=\"language-sh\">父类无参构造执行\n子类无参构造执行</code></pre>\n\n<blockquote>\n<p>当父类只有有参构造时，子类若使用无参构造将会报错，但可以在子类的无参构造中的<code>super</code>语句中传入参数。</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 父类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 子类</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 若不写此语句，程序将报错</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n</blockquote>\n<h3 id=\"super-关键字对比-this-关键字\"><a href=\"#super-关键字对比-this-关键字\" class=\"headerlink\" title=\"super 关键字对比 this 关键字\"></a>super 关键字对比 this 关键字</h3><ul>\n<li>代表的对象不同<ul>\n<li><code>this</code>：代表调用者本身这个对象</li>\n<li><code>super</code>：代表父类对象的引用</li>\n</ul>\n</li>\n<li>使用前提<ul>\n<li><code>this</code>：没有继承关系也可以使用</li>\n<li><code>super</code>：必须存在继承关系</li>\n</ul>\n</li>\n<li>构造方法<ul>\n<li><code>this()</code>：本类的构造</li>\n<li><code>super()</code>：父类的构造</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"方法重写\"><a href=\"#方法重写\" class=\"headerlink\" title=\"方法重写\"></a>方法重写</h2><p>重写：必须要有继承关系，子类可以重写父类的方法</p>\n<ol>\n<li>方法名必须相同</li>\n<li>参数列表必须相同</li>\n<li>修饰符：范围可以扩大但不能缩小</li>\n<li>抛出异常：范围可以缩小但不能扩大</li>\n</ol>\n<p>重写的意义在于：父类的功能未必满足子类的需求，或超出了子类的需求</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 若为静态方法，则方法的调用只和左边定义的数据类型有关</span>\n        <span class=\"token comment\">// 若为非静态方法，则发生了方法的重写</span>\n        <span class=\"token class-name\">B</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        b<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 打印 B=>test</span>\n        <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//父类的引用指向了子类</span>\n        a<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//由于方法重写，打印 B=>test</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A=>test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B=>test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><p>即同一种方法可以根据发送对象的不同而采用多种不同的行为方式</p>\n<p>比如说，</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Pet</span> pet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Pet</span> dog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Dog</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 父类的引用指向子类</span>\n        <span class=\"token class-name\">Pet</span> cat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        pet<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将会打印 shout</span>\n        dog<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将会打印 wof</span>\n        cat<span class=\"token punctuation\">.</span><span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将会打印 nya</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shout!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Cat</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>          <span class=\"token comment\">// 重写了 Pet 中的 shout 方法</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"nya!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Dog</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Pet</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">shout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wof!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>多态存在的条件</p>\n<ul>\n<li><p>存在继承关系</p>\n</li>\n<li><p>方法重写</p>\n<blockquote>\n<p>一些方法不能被重写</p>\n<ul>\n<li><p>static 方法</p>\n</li>\n<li><p>final 常量</p>\n<blockquote>\n<p>被 final 修饰的变量初始化后便不能更改</p>\n<p>被 final 修饰的方法不能重写</p>\n<p>被 final 修饰的类不能被继承</p>\n</blockquote>\n</li>\n<li><p>private 方法</p>\n</li>\n</ul>\n</blockquote>\n</li>\n<li><p>父类的引用指向子类</p>\n</li>\n</ul>\n<p>多态的意义：提高了程序的灵活性与可扩展性，比如上例中如果需要添加其他的子类，只需要将新增的类继承自<code>Pet</code>，再将<code>shout</code>方法重写就可以，不需要对原本有的代码进行改动</p>\n<h2 id=\"instanceof-和类型转换\"><a href=\"#instanceof-和类型转换\" class=\"headerlink\" title=\"instanceof 和类型转换\"></a>instanceof 和类型转换</h2><h3 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h3><p>instanceof是Java中的二元运算符，左边是对象，右边是类；当对象是右边类或子类所创建对象时，返回true；否则，返回false</p>\n<p>看以下代码</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//考虑类的继承结构</span>\n        <span class=\"token comment\">//Object > String</span>\n        <span class=\"token comment\">//Object > Person > Teacher</span>\n        <span class=\"token comment\">//Object > Person > Student</span>\n        <span class=\"token class-name\">Object</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>object <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n        <span class=\"token comment\">//System.out.println(person instanceof String); // 编译报错</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n        <span class=\"token comment\">//System.out.println(student instanceof Teacher); // 编译报错</span>\n        <span class=\"token comment\">//System.out.println(student instanceof String); // 编译报错</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    \n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>对于语句<code>X instanceof Y</code>，是否编译通过取决于<code>X</code>引用类型与<code>Y</code>类是否可比，若可比，则编译通过，否则编译报错；而语句的值取决于<code>X</code>所指向的实际类型是否是<code>Y</code>类或其子类，若是，则值为<code>true</code>，否则值为<code>false</code></p>\n<h3 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h3><p>与基础类型的转换类似，父类型处于高位，子类型处于低位，如果父类型想调用子类型的方法，可以使用强制转换</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Person</span> obj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// obj.run(); //会报错</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 或者</span>\n        <span class=\"token comment\">// Student student = (Student)obj;</span>\n        <span class=\"token comment\">// student.run();</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// run方法是Student拥有的方法，父类中没有这个方法</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>而子类转换为父类，可以自动转换</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span> student <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        student<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以直接调用自己的方法</span>\n        <span class=\"token class-name\">Person</span> person <span class=\"token operator\">=</span> student<span class=\"token punctuation\">;</span> <span class=\"token comment\">//无需强制转换</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// run方法是Student拥有的方法，父类中没有这个方法</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"run\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"static-关键字\"><a href=\"#static-关键字\" class=\"headerlink\" title=\"static 关键字\"></a>static 关键字</h2><h3 id=\"静态变量\"><a href=\"#静态变量\" class=\"headerlink\" title=\"静态变量\"></a>静态变量</h3><p>当给变量加上<code>static</code>修饰词时，变量成为静态变量，静态变量与类同时加载，即使没有将类实例化成对象，也可以通过类来访问这个变量，因为此时静态变量已经存在于内存中了</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 可以直接访问</span>\n        <span class=\"token comment\">// System.out.println(Student.score); //不能直接访问</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态方法\"><a href=\"#静态方法\" class=\"headerlink\" title=\"静态方法\"></a>静态方法</h3><p>当给方法加上<code>static</code>修饰词时，变量成为静态方法，静态方法与类同时加载，其他方法可以直接调用静态方法，而非静态方法需要先将类实例化成对象才能调用</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> age<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> score<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 其他方法可以直接调用静态方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Student</span><span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//可以直接调用</span>\n        <span class=\"token comment\">// 如果在同一个类中，还可以</span>\n        <span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态代码块\"><a href=\"#静态代码块\" class=\"headerlink\" title=\"静态代码块\"></a>静态代码块</h3><p>在类中可以加入用<code>&#123;&#125;</code>包裹的代码块，这种代码块先于构造器执行</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 匿名代码块</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 静态代码块</span>\n    <span class=\"token punctuation\">&#125;</span>\n        \n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>其中静态代码块最先执行且执行一次，然后执行匿名代码块，最后执行构造器</p>\n<p>可以利用这种特性对数据进行初始化</p>\n<h3 id=\"静态导入包\"><a href=\"#静态导入包\" class=\"headerlink\" title=\"静态导入包\"></a>静态导入包</h3><p>通过静态导入包可以在当前类中直接使用导入包中的方法或属性</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">pkg1<span class=\"token punctuation\">.</span>pkg2<span class=\"token punctuation\">.</span>pkg3<span class=\"token punctuation\">.</span>classname<span class=\"token punctuation\">.</span>methodname</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token keyword\">static</span> <span class=\"token namespace\">pkg1<span class=\"token punctuation\">.</span>pkg2<span class=\"token punctuation\">.</span>pkg3<span class=\"token punctuation\">.</span>classname<span class=\"token punctuation\">.</span>fieldname</span><span class=\"token punctuation\">;</span></code></pre>\n\n<h2 id=\"抽象类\"><a href=\"#抽象类\" class=\"headerlink\" title=\"抽象类\"></a>抽象类</h2><p>通过<code>abstract</code>修饰过的类称为抽象类</p>\n<ul>\n<li>抽象类不能<code>new</code>，只能通过子类实现它</li>\n<li>抽象类中可以写普通方法</li>\n<li>抽象方法只能存在于抽象类中</li>\n<li>抽象方法的实现只能通过子类重写</li>\n</ul>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Action</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这是一个抽象方法</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">do</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 方法体</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><p><strong>接口的本质是契约</strong></p>\n<p>定义接口的关键字是<code>interface</code></p>\n<p>定义一个接口</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//接口中的方法只有方法名，且默认为 public abstract</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>接口需要有实现类，通过关键字<code>implements</code>继承</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">// 在实现类中重写接口中的方法</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>接口是多继承的，一个类可以实现多个接口</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">TimeService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 继承了多个接口</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserServiceImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">TimeService</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\t\t\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">query</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">timer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>接口中也可以定义属性</p>\n<p>所有属性默认为<code>public static final</code></p>\n<p>接口的特点：</p>\n<ul>\n<li>约束</li>\n<li>定义一些方法，让不同的人实现</li>\n<li>接口不能被实例化，接口中没有构造方法</li>\n<li><code>implements</code>可以实现多个接口</li>\n</ul>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><p>内部类就是在一个类的内部再定义一个类</p>\n<ul>\n<li>成员内部类</li>\n<li>静态内部类</li>\n<li>局部内部类</li>\n<li>匿名内部类</li>\n</ul>\n<h3 id=\"成员内部类\"><a href=\"#成员内部类\" class=\"headerlink\" title=\"成员内部类\"></a>成员内部类</h3><pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            \n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<p>可以通过外部类实例化内部类</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Application</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token class-name\">Outer</span> outer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inner</span> inner <span class=\"token operator\">=</span> outer<span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 通过内部类获取外部类的私有属性/方法</span>\n        <span class=\"token keyword\">int</span> id <span class=\"token operator\">=</span> inner<span class=\"token punctuation\">.</span>getId<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n<h3 id=\"静态内部类\"><a href=\"#静态内部类\" class=\"headerlink\" title=\"静态内部类\"></a>静态内部类</h3><p>用关键字<code>static</code>修饰的内部类，只能获取外部类的静态变量/方法</p>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><p>没有名字的初始化类，不用将实例保存到变量中</p>\n<pre class=\"language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Test</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//这是一个匿名内部类</span>\n        <span class=\"token class-name\">UserService</span> userservice <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 将返回一个UserService对象</span>\n          <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n              \n          <span class=\"token punctuation\">&#125;</span>  \n        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这也是一个匿名内部类，可以用来实现接口</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Apple</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span></code></pre>\n\n\n\n<h3 id=\"局部内部类\"><a href=\"#局部内部类\" class=\"headerlink\" title=\"局部内部类\"></a>局部内部类</h3><p>定义在方法中的类，类似于局部变量</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cksuleins0008kwvj2l7e8ewo","category_id":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleio2000ukwvj0ekb467t"},{"post_id":"cksuleins0008kwvj2l7e8ewo","category_id":"cksuleinz000kkwvj4oew408t","_id":"cksuleio2000wkwvjauye25my"},{"post_id":"cksuleinm0001kwvjfeme67pw","category_id":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleio2000ykwvj8fgt6n7e"},{"post_id":"cksuleinm0001kwvjfeme67pw","category_id":"cksuleinz000kkwvj4oew408t","_id":"cksuleio30011kwvj8hnx4e2w"},{"post_id":"cksuleint0009kwvj86m21jut","category_id":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleio30014kwvjcfck2lsc"},{"post_id":"cksuleint0009kwvj86m21jut","category_id":"cksuleinz000kkwvj4oew408t","_id":"cksuleio40017kwvjdod1djt6"},{"post_id":"cksuleinv000ckwvj0dso97oo","category_id":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleio4001akwvjfw5d72qk"},{"post_id":"cksuleinv000ckwvj0dso97oo","category_id":"cksuleinz000kkwvj4oew408t","_id":"cksuleio5001dkwvj5okyad67"},{"post_id":"cksuleino0003kwvj7twj8b1x","category_id":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleio5001fkwvjdudcfk5i"},{"post_id":"cksuleino0003kwvj7twj8b1x","category_id":"cksuleinz000kkwvj4oew408t","_id":"cksuleio6001ikwvj1c01cunw"},{"post_id":"cksuleinw000dkwvjbae760rq","category_id":"cksuleio40019kwvjbi382p5c","_id":"cksuleio6001kkwvjgchy2fh3"},{"post_id":"cksuleinr0007kwvj3xxw28xe","category_id":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleio7001nkwvj09533h4b"},{"post_id":"cksuleinr0007kwvj3xxw28xe","category_id":"cksuleinz000kkwvj4oew408t","_id":"cksuleio7001rkwvjayrbdv96"},{"post_id":"cksuleiny000jkwvjh06ke2mj","category_id":"cksuleio6001jkwvjequg1h6y","_id":"cksuleio7001skwvjglqh0npx"},{"post_id":"cksuleio0000nkwvjak4ig64k","category_id":"cksuleio7001pkwvjdjq830uf","_id":"cksuleio8001ukwvj6040chja"},{"post_id":"cksuleioc0020kwvjazlgaa7h","category_id":"cksuleinq0004kwvj7jxtcqa7","_id":"cksuleiod0023kwvj9dwdfok1"},{"post_id":"cksuleioc0020kwvjazlgaa7h","category_id":"cksuleinz000kkwvj4oew408t","_id":"cksuleiod0024kwvj7le09imc"}],"PostTag":[{"post_id":"cksuleinv000ckwvj0dso97oo","tag_id":"cksuleinr0005kwvj0utseygg","_id":"cksuleinx000gkwvjdo1h26sa"},{"post_id":"cksuleinv000ckwvj0dso97oo","tag_id":"cksuleinu000bkwvj7wdwgo2s","_id":"cksuleiny000ikwvjhh2986ho"},{"post_id":"cksuleinm0001kwvjfeme67pw","tag_id":"cksuleinr0005kwvj0utseygg","_id":"cksuleinz000mkwvj7fnid4u4"},{"post_id":"cksuleinm0001kwvjfeme67pw","tag_id":"cksuleinu000bkwvj7wdwgo2s","_id":"cksuleio0000okwvj0r3c2kgq"},{"post_id":"cksuleino0003kwvj7twj8b1x","tag_id":"cksuleinr0005kwvj0utseygg","_id":"cksuleio1000rkwvjc9rtf9de"},{"post_id":"cksuleino0003kwvj7twj8b1x","tag_id":"cksuleinu000bkwvj7wdwgo2s","_id":"cksuleio1000skwvj9f3rbzyn"},{"post_id":"cksuleinr0007kwvj3xxw28xe","tag_id":"cksuleinr0005kwvj0utseygg","_id":"cksuleio30010kwvj8fb86pu0"},{"post_id":"cksuleinr0007kwvj3xxw28xe","tag_id":"cksuleinu000bkwvj7wdwgo2s","_id":"cksuleio30012kwvjbwercxio"},{"post_id":"cksuleins0008kwvj2l7e8ewo","tag_id":"cksuleinr0005kwvj0utseygg","_id":"cksuleio40016kwvj0op820e7"},{"post_id":"cksuleins0008kwvj2l7e8ewo","tag_id":"cksuleinu000bkwvj7wdwgo2s","_id":"cksuleio40018kwvjd2po7oy6"},{"post_id":"cksuleint0009kwvj86m21jut","tag_id":"cksuleinr0005kwvj0utseygg","_id":"cksuleio5001ckwvj3gcudgzy"},{"post_id":"cksuleint0009kwvj86m21jut","tag_id":"cksuleinu000bkwvj7wdwgo2s","_id":"cksuleio5001ekwvjatkpe3xn"},{"post_id":"cksuleinw000dkwvjbae760rq","tag_id":"cksuleio5001bkwvj6hpphoja","_id":"cksuleio6001mkwvjeaogb0u8"},{"post_id":"cksuleinw000dkwvjbae760rq","tag_id":"cksuleio5001hkwvj0qh2db5z","_id":"cksuleio7001okwvj251t6qpa"},{"post_id":"cksuleiny000jkwvjh06ke2mj","tag_id":"cksuleio6001lkwvje2px0ctk","_id":"cksuleio8001wkwvj4v7y40k1"},{"post_id":"cksuleiny000jkwvjh06ke2mj","tag_id":"cksuleio5001bkwvj6hpphoja","_id":"cksuleio8001xkwvjgpyhctjg"},{"post_id":"cksuleiny000jkwvjh06ke2mj","tag_id":"cksuleio7001tkwvj79hsesma","_id":"cksuleio8001ykwvjdxal1pi0"},{"post_id":"cksuleio0000nkwvjak4ig64k","tag_id":"cksuleio8001vkwvj96clev9h","_id":"cksuleio8001zkwvj0w2nadba"},{"post_id":"cksuleioc0020kwvjazlgaa7h","tag_id":"cksuleinr0005kwvj0utseygg","_id":"cksuleiod0021kwvjavy141p8"},{"post_id":"cksuleioc0020kwvjazlgaa7h","tag_id":"cksuleinu000bkwvj7wdwgo2s","_id":"cksuleiod0022kwvj3xjifmct"}],"Tag":[{"name":"Java","_id":"cksuleinr0005kwvj0utseygg"},{"name":"学习","_id":"cksuleinu000bkwvj7wdwgo2s"},{"name":"博客搭建","_id":"cksuleio5001bkwvj6hpphoja"},{"name":"SSL","_id":"cksuleio5001hkwvj0qh2db5z"},{"name":"Hexo","_id":"cksuleio6001lkwvje2px0ctk"},{"name":"分享","_id":"cksuleio7001tkwvj79hsesma"},{"name":"博客功能测试","_id":"cksuleio8001vkwvj96clev9h"}]}}